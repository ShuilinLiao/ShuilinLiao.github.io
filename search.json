[{"title":"如何绘制带有显著性标记的箱线图/柱状图","url":"/2020/11/26/2020-11-26-boxplot/","content":"<p>介绍如何用R绘制多组比较的箱线图/柱状图。<br><a id=\"more\"></a></p>\n<h2 id=\"数据准备\"><a href=\"#数据准备\" class=\"headerlink\" title=\"数据准备\"></a>数据准备</h2><p>Prerequisites<br>Make sure you have installed the following R packages:<br>tidyverse for data manipulation and visualization<br>ggpubr for creating easily publication ready plots<br>rstatix provides pipe-friendly R functions for easy statistical analyses.</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">library</span>(ggpubr)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## Loading required package: ggplot2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## RStudio Community is a great place to get help: https:&#x2F;&#x2F;community.rstudio.com&#x2F;c&#x2F;tidyverse</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## Registered S3 method overwritten by &#39;data.table&#39;:</span><br><span class=\"line\">##   method           from</span><br><span class=\"line\">##   print.data.table</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">library</span>(rstatix)</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## </span><br><span class=\"line\">## Attaching package: &#39;rstatix&#39;</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## The following object is masked from &#39;package:stats&#39;:</span><br><span class=\"line\">## </span><br><span class=\"line\">##     filter</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Transform `dose` into factor variable </span></span><br><span class=\"line\">df &lt;- ToothGrowth </span><br><span class=\"line\">df$dose &lt;- as.factor(df$dose) </span><br><span class=\"line\"><span class=\"comment\"># Add a random grouping variable </span></span><br><span class=\"line\">df$group &lt;- factor(rep(c(<span class=\"string\">&quot;grp1&quot;</span>, <span class=\"string\">&quot;grp2&quot;</span>), <span class=\"number\">30</span>)) </span><br><span class=\"line\">head(df, <span class=\"number\">3</span>)</span><br></pre></td></tr></table></figure>\n<h2 id=\"每个panel中包含两组数据\"><a href=\"#每个panel中包含两组数据\" class=\"headerlink\" title=\"每个panel中包含两组数据\"></a>每个panel中包含两组数据</h2><h3 id=\"使用一个变量进行分面\"><a href=\"#使用一个变量进行分面\" class=\"headerlink\" title=\"使用一个变量进行分面\"></a>使用一个变量进行分面</h3><p>Statistical tests<br>使用dose变量进行分面，并在x轴上水平上比较supp变量。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- df %&gt;%</span><br><span class=\"line\">  group_by(dose) %&gt;%</span><br><span class=\"line\">  t_test(len ~ supp) %&gt;%</span><br><span class=\"line\">  adjust_pvalue(method = <span class=\"string\">&quot;bonferroni&quot;</span>) %&gt;%</span><br><span class=\"line\">  add_significance()</span><br><span class=\"line\">stat.test</span><br></pre></td></tr></table></figure>\n<p>Box plots</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create a box plot</span></span><br><span class=\"line\">bxp &lt;- ggboxplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;supp&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#00AFBB&quot;</span>, </span><br><span class=\"line\">  facet.by = <span class=\"string\">&quot;dose&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Make facet and add p-values</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_xy_position(x = <span class=\"string\">&quot;supp&quot;</span>)</span><br><span class=\"line\">bxp + stat_pvalue_manual(stat.test)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-6-1.png\" alt=\"plot of chunk unnamed-chunk-6\"></p>\n<p>Box plots 显示P值<br>使分面比例自由，并添加散点Make the facet scale free and add jitter points<br>使用 <code>bracket.nudge.y</code>将括号位置向下调整<br>不显示ns (non-significant)<br>显示矫正之后并且Pvalue显著的标志<br>在p-value标签和plot边框之间添加10%的空格</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">bxp &lt;- ggboxplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;supp&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#00AFBB&quot;</span>, </span><br><span class=\"line\">  facet.by = <span class=\"string\">&quot;dose&quot;</span>, scales = <span class=\"string\">&quot;free&quot;</span>, add = <span class=\"string\">&quot;jitter&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">bxp +  </span><br><span class=\"line\">  stat_pvalue_manual(</span><br><span class=\"line\">    stat.test, bracket.nudge.y = -<span class=\"number\">2</span>, hide.ns = <span class=\"literal\">TRUE</span>,</span><br><span class=\"line\">    label = <span class=\"string\">&quot;&#123;p.adj&#125;&#123;p.adj.signif&#125;&quot;</span></span><br><span class=\"line\">    ) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.05</span>, <span class=\"number\">0.1</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-7-1.png\" alt=\"plot of chunk unnamed-chunk-7\"></p>\n<p>Bar plots<br>使用 add = “mean_sd”用于创建error bar(mean +/- SD)。<br>需要使用汇总统计函数来自动计算p-value标签位置 add_xy_position()。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create a bar plot with error bars (mean +/- sd)</span></span><br><span class=\"line\">bp &lt;- ggbarplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;supp&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, add = <span class=\"string\">&quot;mean_sd&quot;</span>, </span><br><span class=\"line\">  fill = <span class=\"string\">&quot;#00AFBB&quot;</span>, facet.by = <span class=\"string\">&quot;dose&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add p-values onto the bar plots</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_xy_position(fun = <span class=\"string\">&quot;mean_sd&quot;</span>, x = <span class=\"string\">&quot;supp&quot;</span>)</span><br><span class=\"line\">bp + stat_pvalue_manual(stat.test)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-8-1.png\" alt=\"plot of chunk unnamed-chunk-8\"></p>\n<p>Bar plots with jitter points<br>在计算p-value标签的位置时，需要设定fun = “max”，<br>从而将括号将从数据点的最大值开始，避免数据点和括号之间的重叠。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create a bar plot with error bars (mean +/- sd)</span></span><br><span class=\"line\">bp &lt;- ggbarplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;supp&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, add = c(<span class=\"string\">&quot;mean_sd&quot;</span>, <span class=\"string\">&quot;jitter&quot;</span>), </span><br><span class=\"line\">  fill = <span class=\"string\">&quot;#00AFBB&quot;</span>, facet.by = <span class=\"string\">&quot;dose&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># Add p-values onto the bar plots</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_xy_position(fun = <span class=\"string\">&quot;max&quot;</span>, x = <span class=\"string\">&quot;supp&quot;</span>)</span><br><span class=\"line\">bp + stat_pvalue_manual(stat.test)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-9-1.png\" alt=\"plot of chunk unnamed-chunk-9\"></p>\n<h3 id=\"使用两个变量进行分面\"><a href=\"#使用两个变量进行分面\" class=\"headerlink\" title=\"使用两个变量进行分面\"></a>使用两个变量进行分面</h3><p>使用dose和group变量进行分面，并在x轴上水平上比较supp变量。</p>\n<p>Statistical tests</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- df %&gt;%</span><br><span class=\"line\">  group_by(group, dose) %&gt;%</span><br><span class=\"line\">  t_test(len ~ supp) %&gt;%</span><br><span class=\"line\">  adjust_pvalue(method = <span class=\"string\">&quot;bonferroni&quot;</span>) %&gt;%</span><br><span class=\"line\">  add_significance()</span><br><span class=\"line\">stat.test </span><br></pre></td></tr></table></figure>\n<p>Box plots</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create box plots with significance levels</span></span><br><span class=\"line\"><span class=\"comment\"># Hide ns (non-significant)</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_xy_position(x = <span class=\"string\">&quot;supp&quot;</span>)</span><br><span class=\"line\">ggboxplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;supp&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#E7B800&quot;</span>,</span><br><span class=\"line\">  facet = c(<span class=\"string\">&quot;group&quot;</span>, <span class=\"string\">&quot;dose&quot;</span>)</span><br><span class=\"line\">  ) +</span><br><span class=\"line\">  stat_pvalue_manual(stat.test, hide.ns = <span class=\"literal\">TRUE</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-11-1.png\" alt=\"plot of chunk unnamed-chunk-11\"></p>\n<p>Bar plots</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create bar plots with significance levels</span></span><br><span class=\"line\"><span class=\"comment\"># Hide ns (non-significant)</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_xy_position(x = <span class=\"string\">&quot;supp&quot;</span>, fun = <span class=\"string\">&quot;mean_sd&quot;</span>)</span><br><span class=\"line\">ggbarplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;supp&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#E7B800&quot;</span>,</span><br><span class=\"line\">  add = c(<span class=\"string\">&quot;mean_sd&quot;</span>, <span class=\"string\">&quot;jitter&quot;</span>), facet = c(<span class=\"string\">&quot;group&quot;</span>, <span class=\"string\">&quot;dose&quot;</span>)</span><br><span class=\"line\">  ) +</span><br><span class=\"line\">  stat_pvalue_manual(stat.test, hide.ns = <span class=\"literal\">TRUE</span>)</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-12-1.png\" alt=\"plot of chunk unnamed-chunk-12\"></p>\n<h2 id=\"每个panel中包含三组或以上的数据\"><a href=\"#每个panel中包含三组或以上的数据\" class=\"headerlink\" title=\"每个panel中包含三组或以上的数据\"></a>每个panel中包含三组或以上的数据</h2><h3 id=\"使用一个变量进行分面-1\"><a href=\"#使用一个变量进行分面-1\" class=\"headerlink\" title=\"使用一个变量进行分面\"></a>使用一个变量进行分面</h3><h4 id=\"执行所有两两比较\"><a href=\"#执行所有两两比较\" class=\"headerlink\" title=\"执行所有两两比较\"></a>执行所有两两比较</h4><p>使用supp变量进行分组，然后对dose变量之间的水平进行两两比较。<br>Statistical test:</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- df %&gt;%</span><br><span class=\"line\">  group_by(supp) %&gt;%</span><br><span class=\"line\">  t_test(len ~ dose)</span><br><span class=\"line\">stat.test</span><br></pre></td></tr></table></figure>\n<p>在图中添加p值。<br>ggplot2中scale_y_continuous(expand = expand (mult = c(0,0.1))用于在标签和图形顶部边框之间添加更多空格</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Box plots with p-values</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_y_position()</span><br><span class=\"line\">ggboxplot(df, x = <span class=\"string\">&quot;dose&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#FC4E07&quot;</span>, facet.by = <span class=\"string\">&quot;supp&quot;</span>) +</span><br><span class=\"line\">  stat_pvalue_manual(stat.test, label = <span class=\"string\">&quot;p.adj.signif&quot;</span>, tip.length = <span class=\"number\">0.01</span>) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.05</span>, <span class=\"number\">0.1</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-14-1.png\" alt=\"plot of chunk unnamed-chunk-14\"></p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Bar plot with p-values</span></span><br><span class=\"line\"><span class=\"comment\"># Add 10% space on the y-axis above the box plots</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_y_position(fun = <span class=\"string\">&quot;mean_sd&quot;</span>)</span><br><span class=\"line\">ggbarplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;dose&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#FC4E07&quot;</span>,</span><br><span class=\"line\">  add = <span class=\"string\">&quot;mean_sd&quot;</span>, facet.by = <span class=\"string\">&quot;supp&quot;</span></span><br><span class=\"line\">  ) + </span><br><span class=\"line\">  stat_pvalue_manual(stat.test,  label = <span class=\"string\">&quot;p.adj.signif&quot;</span>, tip.length = <span class=\"number\">0.01</span>) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.05</span>, <span class=\"number\">0.1</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-15-1.png\" alt=\"plot of chunk unnamed-chunk-15\"></p>\n<h4 id=\"与参照组进行两两比较\"><a href=\"#与参照组进行两两比较\" class=\"headerlink\" title=\"与参照组进行两两比较\"></a>与参照组进行两两比较</h4><p>Statistical test:</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- df %&gt;%</span><br><span class=\"line\">  group_by(supp) %&gt;%</span><br><span class=\"line\">  t_test(len ~ dose, ref.group = <span class=\"string\">&quot;0.5&quot;</span>)</span><br><span class=\"line\">stat.test</span><br></pre></td></tr></table></figure>\n<p>Box plots </p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_y_position()</span><br><span class=\"line\">ggboxplot(df, x = <span class=\"string\">&quot;dose&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#FC4E07&quot;</span>, facet.by = <span class=\"string\">&quot;supp&quot;</span>) +</span><br><span class=\"line\">  stat_pvalue_manual(stat.test, label = <span class=\"string\">&quot;p.adj.signif&quot;</span>, tip.length = <span class=\"number\">0.01</span>) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.05</span>, <span class=\"number\">0.1</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-17-1.png\" alt=\"plot of chunk unnamed-chunk-17\"></p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Show only significance levels at x = group2</span></span><br><span class=\"line\"><span class=\"comment\"># Move down significance symbols using vjust</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_y_position()</span><br><span class=\"line\">ggboxplot(df, x = <span class=\"string\">&quot;dose&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#FC4E07&quot;</span>, facet.by = <span class=\"string\">&quot;supp&quot;</span>) +</span><br><span class=\"line\">  stat_pvalue_manual(stat.test, label = <span class=\"string\">&quot;p.adj.signif&quot;</span>, x = <span class=\"string\">&quot;group2&quot;</span>, vjust = <span class=\"number\">2</span>) </span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-18-1.png\" alt=\"plot of chunk unnamed-chunk-18\"></p>\n<p>Bar plot</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Add 10% space on the y-axis above the box plots</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_y_position(fun = <span class=\"string\">&quot;mean_sd&quot;</span>)</span><br><span class=\"line\">ggbarplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;dose&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#FC4E07&quot;</span>,</span><br><span class=\"line\">  add = c(<span class=\"string\">&quot;mean_sd&quot;</span>, <span class=\"string\">&quot;jitter&quot;</span>), facet.by = <span class=\"string\">&quot;supp&quot;</span></span><br><span class=\"line\">  ) + </span><br><span class=\"line\">  stat_pvalue_manual(stat.test,  label = <span class=\"string\">&quot;p.adj.signif&quot;</span>, tip.length = <span class=\"number\">0.01</span>) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.05</span>, <span class=\"number\">0.1</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-19-1.png\" alt=\"plot of chunk unnamed-chunk-19\"></p>\n<h3 id=\"使用两个变量进行分面-1\"><a href=\"#使用两个变量进行分面-1\" class=\"headerlink\" title=\"使用两个变量进行分面\"></a>使用两个变量进行分面</h3><p>Statistical test<br>使用dose和group变量进行分面，并在x轴上水平上比较supp变量。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- df %&gt;%</span><br><span class=\"line\">  group_by(group, supp) %&gt;%</span><br><span class=\"line\">  t_test(len ~ dose) %&gt;%</span><br><span class=\"line\">  adjust_pvalue(method = <span class=\"string\">&quot;bonferroni&quot;</span>) %&gt;%</span><br><span class=\"line\">  add_significance()</span><br><span class=\"line\">stat.test </span><br></pre></td></tr></table></figure>\n<p>Box plots</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create box plots with significance levels</span></span><br><span class=\"line\"><span class=\"comment\"># Hide ns (non-significant)</span></span><br><span class=\"line\"><span class=\"comment\"># Add 15% space between labels and the plot top border</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_xy_position(x = <span class=\"string\">&quot;dose&quot;</span>)</span><br><span class=\"line\">ggboxplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;dose&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#FC4E07&quot;</span>,</span><br><span class=\"line\">  facet = c(<span class=\"string\">&quot;group&quot;</span>, <span class=\"string\">&quot;supp&quot;</span>)</span><br><span class=\"line\">  ) +</span><br><span class=\"line\">  stat_pvalue_manual(stat.test, hide.ns = <span class=\"literal\">TRUE</span>) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.05</span>, <span class=\"number\">0.15</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-21-1.png\" alt=\"plot of chunk unnamed-chunk-21\"></p>\n<p>Bar plots</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Create bar plots with significance levels</span></span><br><span class=\"line\"><span class=\"comment\"># Hide ns (non-significant)</span></span><br><span class=\"line\"><span class=\"comment\"># Add 15% space between labels and the plot top border</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;% add_xy_position(x = <span class=\"string\">&quot;dose&quot;</span>, fun = <span class=\"string\">&quot;mean_sd&quot;</span>)</span><br><span class=\"line\">ggbarplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;dose&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, fill = <span class=\"string\">&quot;#FC4E07&quot;</span>,</span><br><span class=\"line\">  add = c(<span class=\"string\">&quot;mean_sd&quot;</span>, <span class=\"string\">&quot;jitter&quot;</span>), facet = c(<span class=\"string\">&quot;group&quot;</span>, <span class=\"string\">&quot;supp&quot;</span>)</span><br><span class=\"line\">  ) +</span><br><span class=\"line\">  stat_pvalue_manual(stat.test, hide.ns = <span class=\"literal\">TRUE</span>) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.05</span>, <span class=\"number\">0.15</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-22-1.png\" alt=\"plot of chunk unnamed-chunk-22\"></p>\n<h3 id=\"使用group变量进行分面\"><a href=\"#使用group变量进行分面\" class=\"headerlink\" title=\"使用group变量进行分面\"></a>使用group变量进行分面</h3><p>简单的plot</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Box plots</span></span><br><span class=\"line\">bxp &lt;- ggboxplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;supp&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, color = <span class=\"string\">&quot;dose&quot;</span>, </span><br><span class=\"line\">   palette = <span class=\"string\">&quot;jco&quot;</span>, facet.by = <span class=\"string\">&quot;group&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">bxp </span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-23-1.png\" alt=\"plot of chunk unnamed-chunk-23\"></p>\n<p>Bar plots</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">bp &lt;- ggbarplot(</span><br><span class=\"line\">  df, x = <span class=\"string\">&quot;supp&quot;</span>, y = <span class=\"string\">&quot;len&quot;</span>, color = <span class=\"string\">&quot;dose&quot;</span>,</span><br><span class=\"line\">  palette = <span class=\"string\">&quot;jco&quot;</span>, add = <span class=\"string\">&quot;mean_sd&quot;</span>,</span><br><span class=\"line\">  position = position_dodge(<span class=\"number\">0.8</span>),</span><br><span class=\"line\">  facet.by = <span class=\"string\">&quot;group&quot;</span></span><br><span class=\"line\">  )</span><br><span class=\"line\">bp</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-24-1.png\" alt=\"plot of chunk unnamed-chunk-24\"></p>\n<h4 id=\"执行所有两两比较-1\"><a href=\"#执行所有两两比较-1\" class=\"headerlink\" title=\"执行所有两两比较\"></a>执行所有两两比较</h4><p>Statistical test:</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- df %&gt;%</span><br><span class=\"line\">  group_by(supp, group) %&gt;%</span><br><span class=\"line\">  t_test(len ~ dose) </span><br><span class=\"line\">stat.test</span><br></pre></td></tr></table></figure>\n<p>在图上添加p值:</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># Box plots with p-values</span></span><br><span class=\"line\"><span class=\"comment\"># Hide ns (non-significant)</span></span><br><span class=\"line\">stat.test &lt;- stat.test %&gt;%</span><br><span class=\"line\">  add_xy_position(x = <span class=\"string\">&quot;supp&quot;</span>, dodge = <span class=\"number\">0.8</span>)</span><br><span class=\"line\">bxp + </span><br><span class=\"line\">  stat_pvalue_manual(</span><br><span class=\"line\">    stat.test, label = <span class=\"string\">&quot;p.adj.signif&quot;</span>, tip.length = <span class=\"number\">0.01</span>,</span><br><span class=\"line\">    hide.ns = <span class=\"literal\">TRUE</span></span><br><span class=\"line\">    ) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.01</span>, <span class=\"number\">0.1</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-26-1.png\" alt=\"plot of chunk unnamed-chunk-26\"></p>\n<p>Bar plots </p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- stat.test %&gt;%</span><br><span class=\"line\">  add_xy_position(x = <span class=\"string\">&quot;supp&quot;</span>, fun = <span class=\"string\">&quot;mean_sd&quot;</span>, dodge = <span class=\"number\">0.8</span>)</span><br><span class=\"line\">bp + </span><br><span class=\"line\">  stat_pvalue_manual(</span><br><span class=\"line\">    stat.test, label = <span class=\"string\">&quot;p.adj.signif&quot;</span>, tip.length = <span class=\"number\">0.01</span>,</span><br><span class=\"line\">    hide.ns = <span class=\"literal\">TRUE</span></span><br><span class=\"line\">    ) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.01</span>, <span class=\"number\">0.1</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-27-1.png\" alt=\"plot of chunk unnamed-chunk-27\"></p>\n<h4 id=\"与参照组进行两两比较-1\"><a href=\"#与参照组进行两两比较-1\" class=\"headerlink\" title=\"与参照组进行两两比较\"></a>与参照组进行两两比较</h4><p>Statistical test:</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- df %&gt;%</span><br><span class=\"line\">  group_by(supp, group) %&gt;%</span><br><span class=\"line\">  t_test(len ~ dose, ref.group = <span class=\"string\">&quot;0.5&quot;</span>)</span><br><span class=\"line\">stat.test</span><br></pre></td></tr></table></figure>\n<p>Box plots with p-values</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- stat.test %&gt;%</span><br><span class=\"line\">  add_xy_position(x = <span class=\"string\">&quot;supp&quot;</span>, dodge = <span class=\"number\">0.8</span>)</span><br><span class=\"line\">bxp + </span><br><span class=\"line\">  stat_pvalue_manual(</span><br><span class=\"line\">    stat.test, label = <span class=\"string\">&quot;p.adj.signif&quot;</span>, tip.length = <span class=\"number\">0.01</span></span><br><span class=\"line\">    ) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.01</span>, <span class=\"number\">0.1</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-29-1.png\" alt=\"plot of chunk unnamed-chunk-29\"></p>\n<p>Bar plots with p-values</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">stat.test &lt;- stat.test %&gt;%</span><br><span class=\"line\">  add_xy_position(x = <span class=\"string\">&quot;supp&quot;</span>, fun = <span class=\"string\">&quot;mean_sd&quot;</span>, dodge = <span class=\"number\">0.8</span>)</span><br><span class=\"line\">bp + </span><br><span class=\"line\">  stat_pvalue_manual(</span><br><span class=\"line\">    stat.test, label = <span class=\"string\">&quot;p.adj.signif&quot;</span>, tip.length = <span class=\"number\">0.01</span></span><br><span class=\"line\">    ) +</span><br><span class=\"line\">  scale_y_continuous(expand = expansion(mult = c(<span class=\"number\">0.01</span>, <span class=\"number\">0.1</span>)))</span><br></pre></td></tr></table></figure>\n<p><img src=\"/images/2020-11-26-boxplot/unnamed-chunk-30-1.png\" alt=\"plot of chunk unnamed-chunk-30\"></p>\n<h2 id=\"version\"><a href=\"#version\" class=\"headerlink\" title=\"version\"></a>version</h2><figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">sessionInfo()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## R version 4.0.2 (2020-06-22)</span><br><span class=\"line\">## Platform: x86_64-w64-mingw32&#x2F;x64 (64-bit)</span><br><span class=\"line\">## Running under: Windows 10 x64 (build 18363)</span><br><span class=\"line\">## </span><br><span class=\"line\">## Matrix products: default</span><br><span class=\"line\">## </span><br><span class=\"line\">## locale:</span><br><span class=\"line\">## [1] LC_COLLATE&#x3D;Chinese (Simplified)_China.936  LC_CTYPE&#x3D;Chinese (Simplified)_China.936   </span><br><span class=\"line\">## [3] LC_MONETARY&#x3D;Chinese (Simplified)_China.936 LC_NUMERIC&#x3D;C                              </span><br><span class=\"line\">## [5] LC_TIME&#x3D;Chinese (Simplified)_China.936    </span><br><span class=\"line\">## </span><br><span class=\"line\">## attached base packages:</span><br><span class=\"line\">## [1] stats     graphics  grDevices utils     datasets  methods   base     </span><br><span class=\"line\">## </span><br><span class=\"line\">## other attached packages:</span><br><span class=\"line\">## [1] rstatix_0.6.0 ggpubr_0.4.0  ggplot2_3.3.2</span><br><span class=\"line\">## </span><br><span class=\"line\">## loaded via a namespace (and not attached):</span><br><span class=\"line\">##  [1] tidyselect_1.1.0  xfun_0.19         purrr_0.3.4       haven_2.3.1       carData_3.0-4    </span><br><span class=\"line\">##  [6] colorspace_1.4-1  vctrs_0.3.4       generics_0.1.0    htmltools_0.5.0   yaml_2.2.1       </span><br><span class=\"line\">## [11] rlang_0.4.8       pillar_1.4.6      foreign_0.8-80    glue_1.4.2        withr_2.3.0      </span><br><span class=\"line\">## [16] readxl_1.3.1      lifecycle_0.2.0   stringr_1.4.0     munsell_0.5.0     ggsignif_0.6.0   </span><br><span class=\"line\">## [21] gtable_0.3.0      cellranger_1.1.0  ggsci_2.9         zip_2.1.1         evaluate_0.14    </span><br><span class=\"line\">## [26] labeling_0.4.2    knitr_1.30        rio_0.5.16        forcats_0.5.0     curl_4.3         </span><br><span class=\"line\">## [31] highr_0.8         broom_0.7.2       Rcpp_1.0.5        backports_1.2.0   scales_1.1.1     </span><br><span class=\"line\">## [36] jsonlite_1.7.1    abind_1.4-5       farver_2.0.3      hms_0.5.3         digest_0.6.27    </span><br><span class=\"line\">## [41] stringi_1.5.3     openxlsx_4.2.3    dplyr_1.0.2       grid_4.0.2        tools_4.0.2      </span><br><span class=\"line\">## [46] magrittr_1.5      tibble_3.0.4      crayon_1.3.4      tidyr_1.1.2       car_3.0-10       </span><br><span class=\"line\">## [51] pkgconfig_2.0.3   ellipsis_0.3.1    data.table_1.13.2 rmarkdown_2.5     R6_2.5.0         </span><br><span class=\"line\">## [56] compiler_4.0.2</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">getwd()</span><br></pre></td></tr></table></figure>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">## [1] &quot;E:&#x2F;02GDL&#x2F;Blog&#x2F;ShuilinLiao.github.io&#x2F;source&#x2F;_posts&quot;</span><br></pre></td></tr></table></figure>\n<p>更多相关问题，请参考 <a href=\"https://www.datanovia.com/en/blog/tag/ggpubr/\">ggpubr FAQ</a></p>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://www.datanovia.com/en/blog/how-to-add-p-values-to-ggplot-facets/\">HOW TO ADD P-VALUES TO GGPLOT FACETS</a></p>\n<p>参考文章如引起任何侵权问题，可以与我<a href=\"mailto:liaoshuilin@outlook.com\">联系</a>，谢谢。</p>\n","categories":["R","Visualization"],"tags":["R","ggplot","p-value"]},{"title":"Metabolism in heart","url":"/2020/11/26/2020-11-26-heart_metabolism/","content":"<p>关于心脏当中的代谢介绍。<br><a id=\"more\"></a></p>\n<h2 id=\"能量代谢概述\"><a href=\"#能量代谢概述\" class=\"headerlink\" title=\"能量代谢概述\"></a>能量代谢概述</h2><p>1.在第一阶段，<strong>食物中的大分子断裂成较小的分子</strong>。这个过程叫消化。蛋白质被降解成20种氨基酸，多糖被降解成简单的糖（如葡萄糖），脂肪被分解成甘油和脂肪酸。这个阶段属于能量抽取的准备阶段，没有捕获有用的能量。</p>\n<p>2.在第二阶段，第一阶段产生的各种小分子物质进一步降解成少数几种在代谢中起中心作用的简单单元（simple units)。实际上，<strong>糖、脂肪酸、和一些氨基酸被转化成乙酰辅酶A</strong>。在这个过程中能合成一些ATP，但合成量比后续的第三阶段少得多。</p>\n<p>3.第三阶段，<strong>乙酰辅酶A完全氧化产生ATP</strong>。第三阶段有柠檬酸循环和氧化磷酸化。此处是燃料分子氧化过程中最后的共有的代谢途径。<strong>乙酰辅酶A将乙酰基带入三羧酸循环（或称TCA循环/Krebs循环/柠檬酸循环）</strong>，并在此被完全氧化成CO2。每个乙酰基氧化过程中有四对电子发生转移，三对转移给NAD+，一对转移给FAD。随着这些还原型载体将电子传递给O2就形成了质子梯度，后者可以用来合成ATP。</p>\n<p><img src=\"/images/2020-11-26-heart_metabolism/pic1.png\" alt=\"pic1\"></p>\n<h2 id=\"糖酵解\"><a href=\"#糖酵解\" class=\"headerlink\" title=\"糖酵解\"></a>糖酵解</h2><p>1.糖酵解在<strong>细胞质</strong>中进行。</p>\n<p>2.<strong>糖酵解途径是将一个葡萄糖分子代谢成两个丙酮酸</strong>，同时产生两个ATP的代谢途径。糖酵解不需要氧气。因此糖酵解途径在地球出现足量氧气之前，生物建立了这种代谢途径。</p>\n<p>3.糖酵解分三个阶段：第一阶段，葡萄糖转化成果糖1,6-二磷酸，有三个反应步骤（磷酸化，异构化，第二次磷酸化）。糖酵解起始反应的策略是将葡萄糖分子限定在细胞内，形成一种能够被转化成磷酸化三碳单位的化合物。第二阶段是将果糖1,6-二磷酸裂解成两个三碳组分，这两种三碳组分可以相互转化。在第三阶段，三碳组分氧化成丙酮酸，产生ATP。有3种关键酶控制着不可逆反应，分别为 <strong>hexokinase (HK)</strong>, <strong>phosphofructokinase (PFK)</strong>, 和<strong>pyruvate kinase (PK)</strong> 。</p>\n<p>4.丙酮酸能进一步加工，无氧条件下产生乳酸（乳酸发酵）或乙醇（乙醇发酵）。有氧条件下被彻底氧化成CO2 。</p>\n<p><img src=\"/images/2020-11-26-heart_metabolism/pic2.png\" alt=\"pic2\"></p>\n<p><img src=\"/images/2020-11-26-heart_metabolism/pic3.png\" alt=\"pic3\"></p>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"*https://rgd.mcw.edu/rgdweb/pathway/pathwayRecord.html?processType=view&amp;species=Human&amp;acc_id=PW:0000640#annot*\">GLYCOLYSIS PATHWAY (PW:0000640)</a></p>\n<p>参考文章如引起任何侵权问题，可以与我<a href=\"mailto:liaoshuilin@outlook.com\">联系</a>，谢谢。</p>\n","categories":["Biological  wisdom","Metabolism"]},{"title":"如何用Hexo+Github搭建个人博客1","url":"/2020/10/15/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A21/","content":"<p>如何用Hexo+Github搭建个人博客（上）。主要涉及如何构建环境和搭建博客。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"Git与GiHub的配置\"><a href=\"#Git与GiHub的配置\" class=\"headerlink\" title=\"Git与GiHub的配置\"></a>Git与GiHub的配置</h2><hr>\n<p><strong><u>这一步主要目的为执行Git的安装，并将GitHub远程仓库克隆到本地，以方便后续更新的博客内容同步到GitHub远程仓库</u></strong></p>\n<h3 id=\"GitHub创建个人仓库\"><a href=\"#GitHub创建个人仓库\" class=\"headerlink\" title=\"GitHub创建个人仓库\"></a><strong>GitHub创建个人仓库</strong></h3><p>登录到GitHub,如果没有GitHub帐号，使用你的邮箱注册GitHub帐号：<a href=\"https://link.zhihu.com/?target=https://github.com/\">Build software better, together</a> 点击GitHub中的New repository创建新仓库，仓库名应该为：<code>用户名.github.io</code> 这个<strong>用户名</strong>使用你的GitHub帐号名称代替。</p>\n<h3 id=\"安装GitHub\"><a href=\"#安装GitHub\" class=\"headerlink\" title=\"安装GitHub\"></a><strong>安装GitHub</strong></h3><p>什么是Git ?简单来说Git是开源的分布式版本控制系统，用于敏捷高效地处理项目。我们网站在本地搭建好了，需要使用Git同步到GitHub上。如果想要了解Git的细节，参看<a href=\"https://link.zhihu.com/?target=http://weibo.com/liaoxuefeng\">廖雪峰</a>老师的Git教程：<a href=\"https://link.zhihu.com/?target=http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000\">Git教程</a> 。安装成功后，将你的Git与GitHub帐号绑定，鼠标右击打开Git Bash</p>\n<p>创建名为“Blog”的目录，以下命令可以在git bash界面处理</p>\n<p>设置user.name和user.email配置信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git config --global user.name &quot;你的GitHub用户名&quot;</span><br><span class=\"line\">git config --global user.email &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<p>生成ssh密钥文件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen -t rsa -C &quot;你的GitHub注册邮箱&quot;</span><br></pre></td></tr></table></figure>\n\n<p>然后直接三个回车即可，默认不需要设置密码<br>然后找到生成的.ssh的文件夹中的id_rsa.pub密钥，将内容全部复制</p>\n<p>打开<a href=\"https://link.zhihu.com/?target=https://github.com/settings/keys\">GitHub_Settings_keys</a> 页面，新建new SSH Key</p>\n<p>Title为标题，任意填即可，将刚刚复制的id_rsa.pub内容粘贴进去，最后点击Add SSH key。<br>在Git Bash中检测GitHub公钥设置是否成功，输入 ssh <a href=\"mailto:&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;\">&#103;&#105;&#116;&#x40;&#x67;&#x69;&#x74;&#x68;&#x75;&#x62;&#46;&#x63;&#x6f;&#x6d;</a> ：</p>\n<p>如上则说明成功。这里之所以设置GitHub密钥原因是，通过非对称加密的公钥与私钥来完成加密，公钥放置在GitHub上，私钥放置在自己的电脑里。GitHub要求每次推送代码都是合法用户，所以每次推送都需要输入账号密码验证推送用户是否是合法用户，为了省去每次输入密码的步骤，采用了ssh，当你推送的时候，git就会匹配你的私钥跟GitHub上面的公钥是否是配对的，若是匹配就认为你是合法用户，则允许推送。这样可以保证每次的推送都是正确合法的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:theme-next&#x2F;theme-next.org.git</span><br></pre></td></tr></table></figure>\n\n<p>主题文件（在Blog目录下执行）：</p>\n<p>克隆博客仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone git@github.com:ShuilinLiao&#x2F;ShuilinLiao.github.io.git</span><br><span class=\"line\">git branch # 显示当前在main分支</span><br><span class=\"line\">git checkout -b source # 创建并切换到source分支 因调整source为默认主支，因此克隆后直接是源代码仓库</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"hexo搭建博客\"><a href=\"#hexo搭建博客\" class=\"headerlink\" title=\"hexo搭建博客\"></a>hexo搭建博客</h2><h3 id=\"安装Node-js\"><a href=\"#安装Node-js\" class=\"headerlink\" title=\"安装Node.js\"></a><strong>安装Node.js</strong></h3><p>Hexo基于Node.js，Node.js下载地址：<a href=\"https://link.zhihu.com/?target=https://nodejs.org/en/download/\">Download | Node.js</a> 下载安装包，注意安装Node.js会包含环境变量及npm的安装，安装后，检测Node.js是否安装成功，在命令行中输入 <code>node -v</code> 。检测npm是否安装成功，在命令行中输入<code>npm -v</code> 。</p>\n<h3 id=\"安装Hexo\"><a href=\"#安装Hexo\" class=\"headerlink\" title=\"安装Hexo\"></a><strong>安装Hexo</strong></h3><p>Hexo就是我们的个人博客网站的框架， 这里需要自己在电脑常里创建一个文件夹，可以命名为Blog，Hexo框架与以后你自己发布的网页都在这个文件夹中。</p>\n<ul>\n<li>从Git bash里面进入我们Blog目录，使用npm命令安装Hexo，输入：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install -g hexo-cli </span><br></pre></td></tr></table></figure>\n\n<p>如果碰到卡住问题，可以通过在安装前执行以下命令，改变镜像使安装加快</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br></pre></td></tr></table></figure>\n\n<p>ubuntu下安装</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sudo apt-get update</span><br><span class=\"line\">sudo apt-get install nodejs</span><br><span class=\"line\">sudo apt-get install npm</span><br><span class=\"line\">nodejs -v</span><br><span class=\"line\">npm -v</span><br><span class=\"line\">sudo npm config set registry https:&#x2F;&#x2F;registry.npm.taobao.org</span><br><span class=\"line\">sudo npm install -g hexo-cli</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>安装完成后，初始化我们的博客（在Blog目录下），输入：</li>\n</ul>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo init <span class=\"string\">&quot;xx&#x27;s blog&quot;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li><p>复制/剪切 xx’s blog **<code>内容</code>**至博客仓库 username.github.io</p>\n</li>\n<li><p>更换主题：如果你不喜欢Hexo默认的主题，可以更换不同的主题，主题传送门：<a href=\"https://link.zhihu.com/?target=https://hexo.io/themes/\">Themes</a>。 如：我自己使用的是Next主题，可以在blog目录中的themes文件夹中查看你自己主题是什么。现在把默认主题更改成Next主题，在blog目录中（就是命令行的位置处于blog目录），打开命令行输入以下，将Next主题下载到blog目录的themes主题下的next文件夹中：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;iissnan&#x2F;hexo-theme-next themes&#x2F;next</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>删除theme里的hexo-theme-next（而不是github.io内的.git）内置的.git目录和.github目录，防止同步到Github远程仓库的时候出现冲突；</p>\n</li>\n<li><p>打开<strong>站点</strong>的_config.yml配置文件，修改主题为next；</p>\n</li>\n<li><p>打开<strong>主题</strong>的_config.yml配置文件，不是站点主题文件，找到Scheme Settings。next主题有三个样式，选择你自己喜欢的样式（只需要把行首的#去除，#是注释），选择好后，再次部署网站，hexo g、hexo d，查看效果。</p>\n</li>\n</ul>\n<h3 id=\"本地预览\"><a href=\"#本地预览\" class=\"headerlink\" title=\"本地预览\"></a>本地预览</h3><ul>\n<li>为了检测我们的网站雏形，分别按顺序输入以下三条命令：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new my_test # 新建文章</span><br><span class=\"line\">hexo g # 生成</span><br><span class=\"line\">hexo s # 本地部署</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>完成后，打开浏览器输入地址：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">http:&#x2F;&#x2F;localhost:40000</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>安装<strong>Typora</strong>软件，为了编辑md文件。</li>\n</ul>\n<h3 id=\"发布网站\"><a href=\"#发布网站\" class=\"headerlink\" title=\"发布网站\"></a>发布网站</h3><p>上面只是在本地预览，接下来要做的就是就是推送网站，也就是发布网站，让我们的网站可以被更多的人访问。在设置之前，需要解释一个概念，在ShuilinLiao.github.io根目录（即之前初始化的Shuilin’s blog的根目录）里的_config.yml文件称为<strong>站点</strong>配置文件。</p>\n<p>关联Hexo与GitHub，修改根目录下面（我的为ShuilinLiao.github.io）的站点配置文件_config.yml，并保存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">deploy:</span><br><span class=\"line\">    type: git</span><br><span class=\"line\">    repo: https:&#x2F;&#x2F;github.com&#x2F;ShuilinLiao&#x2F;username.github.io.git</span><br><span class=\"line\">    branch: master</span><br></pre></td></tr></table></figure>\n\n<p>其实就是给hexo d 这个命令做相应的配置，让hexo知道你要把blog部署在哪个位置，很显然，我们部署在我们GitHub的仓库里。最后安装Git部署插件，输入命令：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-deployer-git --save</span><br></pre></td></tr></table></figure>\n\n<p>这时，我们分别输入三条命令：</p>\n<figure class=\"highlight bash\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo clean </span><br><span class=\"line\">hexo g </span><br><span class=\"line\">hexo d <span class=\"comment\"># 部署到网站上</span></span><br></pre></td></tr></table></figure>\n\n<p>其实第三条的 hexo d 就是部署网站命令，d是deploy的缩写。完成后，打开浏览器，在地址栏输入你的放置个人网站的仓库路径，即 <a href=\"https://link.zhihu.com/?target=http://xxxx.github.io\">http://xxxx.github.io</a> </p>\n<p>你就会发现你的博客已经上线了，可以在网络上被访问了。</p>\n<p>我们开始正式发布上线博客文章，在命令行中输入：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo n &quot;博客文章名字&quot;</span><br></pre></td></tr></table></figure>\n\n<p>我们会发现在blog根目录下的source文件夹中的_post文件夹中多了一个 <strong>博客文章名字.md</strong> 文件，使用<strong>Typora</strong>软件打开编辑，就可以开始你的个人博客之旅了。</p>\n<p>编辑好之后生成和部署。<code>hexo g</code> 和 <code>hexo d</code></p>\n<p>在hexo d推送网站后，可以将源代码上传至GitHub的博客仓库source分支。</p>\n<p>git bash处跳转到当前博客目录，根目录下输入博客所在目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd username.github.io</span><br></pre></td></tr></table></figure>\n\n<p>一定是在source分支查看文件是否存在修改</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git status</span><br></pre></td></tr></table></figure>\n\n<p>提交修改文件至远程仓库</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git add 博客文章名字.md # git add -A</span><br><span class=\"line\">git commit -m &quot;update files&quot;</span><br><span class=\"line\">git push origin source</span><br><span class=\"line\"># git push origin</span><br></pre></td></tr></table></figure>\n\n<p>随后可以在浏览器中输入域名浏览。</p>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><ol>\n<li><a href=\"https://zouhua.top/archives/ec7d7221.html#more\">Hexo搭建个人博客</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/26625249\">GitHub+Hexo 搭建个人网站详细教程</a></li>\n</ol>\n","categories":["Tools","Blog"],"tags":["Hexo","Github","Blog"]},{"title":"如何安装R包","url":"/2020/11/24/R%E5%AE%89%E8%A3%85%E5%8C%85/","content":"<p>如何安装R并且下载安装R包。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"R安装\"><a href=\"#R安装\" class=\"headerlink\" title=\"R安装\"></a>R安装</h1><p>首先<a href=\"https://cran.r-project.org/\">安装R环境</a>，上官网选择适当的版本</p>\n<h1 id=\"Rtools\"><a href=\"#Rtools\" class=\"headerlink\" title=\"Rtools\"></a>Rtools</h1><p><a href=\"https://cran.r-project.org/bin/windows/Rtools/\">Rtools的下载安装</a>，为了方便之后下载R包</p>\n<ol>\n<li>下载</li>\n<li>安装，记得选择 默认路径 + 勾选设置环境变量 <code>Add rtools to system PATH</code></li>\n<li>在R中输入 <code>writeLines(&#39;PATH=&quot;C:\\\\rtools40\\\\usr\\\\bin;$&#123;PATH&#125;&quot;&#39;,     con = &quot;~/.Renviron&quot;)</code></li>\n<li>重启测试是否成功 在R中输入 Sys.which(“make”) 若出现  <code>## &quot;C:\\\\rtools40\\\\usr\\\\bin\\\\make.exe&quot;</code> 则表示配置成功</li>\n<li>Rstudio</li>\n</ol>\n<h1 id=\"Rstudio\"><a href=\"#Rstudio\" class=\"headerlink\" title=\"Rstudio\"></a>Rstudio</h1><p><a href=\"https://rstudio.com/products/rstudio/download/\">Rstudio的下载安装</a>，Rstudio是个IDE，代码编写的集成环境</p>\n<h1 id=\"R包的下载安装\"><a href=\"#R包的下载安装\" class=\"headerlink\" title=\"R包的下载安装\"></a>R包的下载安装</h1><p>有两种方式：</p>\n<ol>\n<li>尝试用install.packages下载安装R包，eg：<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">install.packages(<span class=\"string\">&quot;jsonlite&quot;</span>, type = <span class=\"string\">&quot;source&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li>利用Bioconductor安装，首先需要安装<a href=\"https://bioconductor.org/install/\">Bioconductor包</a>，<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> (!requireNamespace(<span class=\"string\">&quot;BiocManager&quot;</span>, quietly = <span class=\"literal\">TRUE</span>))</span><br><span class=\"line\">  install.packages(<span class=\"string\">&quot;BiocManager&quot;</span>)</span><br></pre></td></tr></table></figure>\n再用<code>BiocManager::install</code>函数安装其他所需包，如：<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">BiocManager::install(&quot;DESeq2&quot;)</span><br></pre></td></tr></table></figure>\n\n</li>\n</ol>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><p><a href=\"https://www.cnblogs.com/liugh/p/9937489.html\">Windows下使用Rtools编译R语言包</a></p>\n","categories":["R","Packages"],"tags":["R"]},{"title":"Vim中如何对Snakemake代码进行高亮","url":"/2020/10/21/Vim%E4%B8%AD%E5%A6%82%E4%BD%95%E5%AF%B9Snakemake%E4%BB%A3%E7%A0%81%E8%BF%9B%E8%A1%8C%E9%AB%98%E4%BA%AE/","content":"<p>以配置文件的形式在vim中对Snakemake代码进行高亮。</p>\n<a id=\"more\"></a>\n\n<p>Snakemake的官方vim高亮配置<a href=\"https://raw.githubusercontent.com/snakemake/snakemake/master/misc/vim/syntax/snakemake.vim\">文件</a>下载，将其内容复制到名为<code>snakemake.vim</code>的文件中，将其文件复制到<code>$HOME/.vim/syntax</code>目录中（如果没有该目录，则用<code>mkdir</code>创建）。接着在<code>$HOME/.vimrc</code>添加以下命令，使得每次打开*.snk, *.smk和Snakefile文件都以特定方式高亮：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">autocmd BufNewFile,BufRead Snakefile set syntax&#x3D;snakemake</span><br><span class=\"line\">autocmd BufNewFile,BufRead *.smk set syntax&#x3D;snakemake</span><br><span class=\"line\">autocmd BufNewFile,BufRead *.snk set syntax&#x3D;snakemake</span><br></pre></td></tr></table></figure>\n\n<p>在vim中也可以强制显示高亮 ：<code>:set syntax=snakemake</code></p>\n<p>注：<code>vimrc</code>不需要source，每次添加新的内容保存后退出则自动更新。</p>\n<h3 id=\"参考链接：\"><a href=\"#参考链接：\" class=\"headerlink\" title=\"参考链接：\"></a>参考链接：</h3><ol>\n<li><a href=\"https://snakemake.readthedocs.io/en/stable/project_info/faq.html#how-do-i-enable-syntax-highlighting-in-vim-for-snakefiles\">How do I enable syntax highlighting in Vim for Snakefiles? </a></li>\n<li><a href=\"https://blog.csdn.net/nankai0912678/article/details/108671782?utm_medium=distribute.pc_relevant.none-task-blog-title-3&spm=1001.2101.3001.4242\"> 对于一个自定义的文件类型, 如何使用C, python等语言的关键字高亮方案 </a></li>\n</ol>\n","categories":["Tools","Systems"],"tags":["Tools","Vim","Snakemake"]},{"title":"Visual Studio Code连接集群配置","url":"/2020/10/21/Visual-Studio-Code%E8%BF%9E%E6%8E%A5%E9%9B%86%E7%BE%A4%E9%85%8D%E7%BD%AE/","content":"<p>在Windows上使用Visual Studio Code免密码登录集群/服务器。</p>\n<a id=\"more\"></a>\n\n<h1 id=\"安装插件\"><a href=\"#安装插件\" class=\"headerlink\" title=\"安装插件\"></a>安装插件</h1><p>配置远程开发首先需要安装一个名为<strong>Remote - SSH</strong>的插件，具体操作步骤如下，</p>\n<ul>\n<li>点击扩展按钮</li>\n<li>搜索<strong>Remote - SSH</strong> 、Remote -WSL 和 vscode-icons</li>\n<li>安装</li>\n</ul>\n<h1 id=\"配置VSCode\"><a href=\"#配置VSCode\" class=\"headerlink\" title=\"配置VSCode\"></a>配置VSCode</h1><p>step1: 点击VS code边栏的远程连接图标。<img src=\"/images/vscode/0.png\"></p>\n<p>step2: 点击SSH TARGETS右边的齿轮状⚙️按钮。</p>\n<p>step3: 在弹出来的<code>C:\\Users\\XXX\\.ssh\\config</code>文件中添加下面内容（即本地的<code>C:\\Users\\user_name\\.ssh\\config</code>），根据自己的用户名填写好各个字段，<code>Ctrl + s</code>保存。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Read more about SSH config files: https:&#x2F;&#x2F;linux.die.net&#x2F;man&#x2F;5&#x2F;ssh_config</span><br><span class=\"line\">Host gdl</span><br><span class=\"line\">\tHostName 192.168.106.31</span><br><span class=\"line\">\tUser liaoshuilin</span><br><span class=\"line\"> \tPort 22</span><br></pre></td></tr></table></figure>\n\n<p>step3: 参数设置 </p>\n<figure class=\"highlight json\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\">// Setting - Features - Terminal - Integrated &gt; Automation Shell:Linux</span></span><br><span class=\"line\">&#123;</span><br><span class=\"line\">  <span class=\"attr\">&quot;python.languageServer&quot;</span>: <span class=\"string\">&quot;Microsoft&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;terminal.integrated.shell.windows&quot;</span>: <span class=\"string\">&quot;C:\\\\Windows\\\\System32\\\\WindowsPowerShell\\\\v1.0\\\\powershell.exe&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;remote.SSH.remotePlatform&quot;</span>: &#123;</span><br><span class=\"line\">      <span class=\"attr\">&quot;gdl&quot;</span>: <span class=\"string\">&quot;linux&quot;</span></span><br><span class=\"line\">   &#125;,</span><br><span class=\"line\">   <span class=\"attr\">&quot;python.showStartPage&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;explorer.confirmDelete&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">   <span class=\"attr\">&quot;window.zoomLevel&quot;</span>: <span class=\"number\">0</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;terminal.integrated.automationShell.windows&quot;</span>: <span class=\"string\">&quot;&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;workbench.iconTheme&quot;</span>: <span class=\"string\">&quot;vscode-icons&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;workbench.colorTheme&quot;</span>: <span class=\"string\">&quot;Default Dark+&quot;</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;workbench.editor.enablePreview&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;workbench.editor.enablePreviewFromQuickOpen&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;terminal.integrated.inheritEnv&quot;</span>: <span class=\"literal\">false</span>,</span><br><span class=\"line\">  <span class=\"attr\">&quot;terminal.integrated.automationShell.linux&quot;</span>: <span class=\"string\">&quot;&quot;</span></span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p>// Setting - Extension- Terminal - Remote - SSH，勾选✔ 以下项 </p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">Remote.SSH: Allow Local Server Download</span><br><span class=\"line\">Remote.SSH: Enable Agent Forwarding</span><br><span class=\"line\">Remote.SSH: Enable Dynamic Forwarding</span><br><span class=\"line\">Remote.SSH: Use Flock</span><br><span class=\"line\">Remote.SSH: Use Local Server</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"配置远程服务器免密码登录\"><a href=\"#配置远程服务器免密码登录\" class=\"headerlink\" title=\"配置远程服务器免密码登录\"></a>配置远程服务器免密码登录</h1><p>这个需要windows配置有ssh工具，可以通过安装git、openssh实现。在本地打开cmd，</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ssh-keygen # 获得本地客户端的公钥</span><br></pre></td></tr></table></figure>\n\n<p>然后一直点击Enter键，不用输入任何内容，最后会在<code>C:\\Users\\user_name\\.ssh</code>路径下生成公钥文件，可以看到有一个<code>id_rsa.pub</code>文件，然后通过FTP等方式把这个文件上传到远程服务器。进入集群SSH配置目录，<code>cd ~/.ssh</code>，查看一下是否有一个名为<code>authorized_keys</code>的文件，如果没有就创建一个，然后把刚上传的<code>id_rsa.pub</code>中的内容附到<code>authorized_keys</code>文件中，并更改文件权限</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">touch authorized_keys</span><br><span class=\"line\">cat ~&#x2F;id_rsa.pub &gt;&gt; authorized_keys</span><br><span class=\"line\">chmod -R 600 authorized_keys</span><br></pre></td></tr></table></figure>\n\n<p>删除 服务器中home目录下的 .vscode-server/目录后进行链接</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -r  ~&#x2F;.vscode-server&#x2F;</span><br></pre></td></tr></table></figure>\n\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/93239107\"><strong>VS Code远程开发</strong></a></li>\n<li><a href=\"https://blog.csdn.net/yamengxi/article/details/108156610\">Windows10系统下使用VS code远程连接集群（在有跳板机的情况下）</a></li>\n</ol>\n","categories":["Tools","Systems"],"tags":["VScode","cluster"]},{"title":"Ubuntu中安装Anaconda","url":"/2020/10/15/ubuntu%E5%AE%89%E8%A3%85anaconda/","content":"<p>介绍如何在Ubuntu上下载Anaconda。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"什么是Anaconda\"><a href=\"#什么是Anaconda\" class=\"headerlink\" title=\"什么是Anaconda\"></a>什么是Anaconda</h2><p>Anaconda 是一个流行的 Python/R 数据科学和机器学习平台，大数据处理，预测分析，和科学计算。</p>\n<p>Anaconda 发行版附带了250个开源数据软件包，并且超过 7500 个软件包可以从 Anaconda 软件源中安装。它同时还包含了一个命令行工具和一个被称为”Anaconda Navigator”的图形用户界面。</p>\n<p>这个指南将会跟你解释在 Ubuntu 20.04 上的 Anaconda Python 发行版安装过程。</p>\n<h2 id=\"安装Anaconda\"><a href=\"#安装Anaconda\" class=\"headerlink\" title=\"安装Anaconda\"></a>安装Anaconda</h2><p>在写这篇文章的时候，Anaconda 最新绑定版本是 2020.02。在下载安装脚本之前，浏览<a href=\"https://www.anaconda.com/products/individual\">下载页面</a>，并且检查是否有更新的Anaconda 可用。</p>\n<ul>\n<li>在 Ubuntu 20.04 上完成下面的步骤，安装 Anaconda。使用你的浏览器或者<code>wget</code>去下载 Anaconda 安装脚本：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">wget -P /tmp https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>这一步可选的，但是我们推荐你去验证脚本的数据完整性。</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">sha256sum /tmp/Anaconda3-2020.02-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>输出类似于：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">2b9f088b2022edb474915d9f69a803d6449d5fdb4c303041f60ac4aefcc208bb  /tmp/Anaconda3-2020.02-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>确保上面的命令打印出来的哈希值和<a href=\"https://docs.anaconda.com/anaconda/install/hashes/lin-3-64/\">Anaconda with Python 3 on 64-bit Linux page</a>页面对应版本的 Anaconda 哈希值一样。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">https://docs.anaconda.com/anaconda/install/hashes/Anaconda3-2020.02-Linux-x86_64.sh-hash/</span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>运行脚本启动安装进程：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">bash /tmp/Anaconda3-2020.02-Linux-x86_64.sh</span><br></pre></td></tr></table></figure>\n\n<p>看到以下输出：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Welcome to Anaconda3 2020.02</span><br><span class=\"line\">In order to continue the installation process, please review the license</span><br><span class=\"line\">agreement.</span><br><span class=\"line\">Please, press ENTER to continue</span><br><span class=\"line\"><span class=\"meta\">&gt;</span><span class=\"bash\">&gt;&gt;</span></span><br></pre></td></tr></table></figure>\n\n<ul>\n<li>按<code>ENTER</code>继续。往下滑动阅读协议，使用<code>ENTER</code>按键。一旦你看完协议，你将会被询问是否接受协议条款：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Do you approve the license terms? [yes|no]</span><br></pre></td></tr></table></figure>\n\n<p>输入<code>yes</code>接受协议，并且你会被提示选择安装路径：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Anaconda3 will now be installed into this location:</span><br><span class=\"line\">/home/linuxize/anaconda3</span><br><span class=\"line\"></span><br><span class=\"line\">    - Press ENTER to confirm the location</span><br><span class=\"line\">    - Press CTRL-C to abort the installation</span><br><span class=\"line\">    - Or specify a different location below</span><br></pre></td></tr></table></figure>\n\n<p>安装过程将会花费一些时间，并且一旦完成，脚本将会问你是否想要运行<code>conda init</code>。输入<code>yes</code>。</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Installation finished.</span><br><span class=\"line\">Do you wish the installer to initialize Anaconda3</span><br><span class=\"line\">by running conda init? [yes|no]</span><br></pre></td></tr></table></figure>\n\n<p>这将会将命令行工具<code>conda</code>添加到系统的<code>PATH</code>环境变量中。</p>\n<ul>\n<li>想要激活 Anaconda，你可以关闭并且重新打开你的 shell 或者在当前 shell 会话中输入下面的命令，来重新加载<code>PATH</code>环境变量：</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">source ~/.bashrc</span><br></pre></td></tr></table></figure>\n\n<p>想要验证安装过程，在你的终端输入<code>conda</code>。</p>\n<p>就这些。你已经成功地在你的 Ubuntu 机器上安装好了 Anaconda， 你可以开始使用它了。</p>\n<h2 id=\"更新Anaconda\"><a href=\"#更新Anaconda\" class=\"headerlink\" title=\"更新Anaconda\"></a>更新Anaconda</h2><p>打开你的终端，并且输入：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda update --all</span><br></pre></td></tr></table></figure>\n\n<p>如果有更新，<code>conda</code>将会显示一个列表，并且提示你确认是否更新：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">The following packages will be UPDATED:</span><br><span class=\"line\"></span><br><span class=\"line\">  anaconda-navigator                          1.9.12-py37_0 --&gt; 1.9.12-py37_1</span><br><span class=\"line\">  conda                                        4.8.2-py37_0 --&gt; 4.8.3-py37_0</span><br><span class=\"line\">  conda-package-han~                   1.6.0-py37h7b6447c_0 --&gt; 1.6.1-py37h7b6447c_0</span><br><span class=\"line\"></span><br><span class=\"line\"></span><br><span class=\"line\">Proceed ([y]/n)? </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"卸载-Anaconda\"><a href=\"#卸载-Anaconda\" class=\"headerlink\" title=\"卸载 Anaconda\"></a>卸载 Anaconda</h2><p>如果你想从你的 Ubuntu 系统中卸载 Anaconda，移除 Anaconda 安装目录以及其他在安装过程中创建的文件：</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">rm -rf ~/anaconda3 ~/.condarc ~/.conda ~/.continuum</span><br></pre></td></tr></table></figure>\n\n<p>打开<code>~/.bashrc</code>，并且从环境变量中移除 Anaconda</p>\n<h2 id=\"Windows系统安装Anaconda\"><a href=\"#Windows系统安装Anaconda\" class=\"headerlink\" title=\"Windows系统安装Anaconda\"></a>Windows系统安装Anaconda</h2><ol>\n<li><p>前往<a href=\"https://docs.anaconda.com/anaconda/install/windows/\">官方下载页面</a>下载。有两个版本可供选择：Python 3.6 和 Python 2.7，选择版之后根据自己操作系统的情况点击“64-Bit Graphical Installer”或“32-Bit Graphical Installer”进行下载。</p>\n</li>\n<li><p>完成下载之后，双击下载文件，启动安装程序。</p>\n<p>① 如果在安装过程中遇到任何问题，那么暂时地关闭杀毒软件，并在安装程序完成之后再打开。</p>\n<p>② 如果在安装时选择了“为所有用户安装”，则卸载Anaconda然后重新安装，只为“我这个用户”安装。</p>\n</li>\n<li><p>选择“Next”。</p>\n</li>\n<li><p>阅读许可证协议条款，然后勾选“I Agree”并进行下一步。</p>\n</li>\n<li><p>除非是以管理员身份为所有用户安装，否则仅勾选“Just Me”并点击“Next”。</p>\n</li>\n<li><p>在“Choose Install Location”界面中选择安装Anaconda的目标路径，然后点击“Next”。</p>\n<p>① 目标路径中不能含有空格，同时不能是“unicode”编码。</p>\n<p>② 除非被要求以管理员权限安装，否则不要以管理员身份安装。</p>\n</li>\n<li><p>在“Advanced Installation Options”中不要勾选“Add Anaconda to my PATH environment variable.”（“添加Anaconda至我的环境变量。”）。因为如果勾选，则将会影响其他程序的使用。如果使用Anaconda，则通过打开Anaconda Navigator或者在开始菜单中的“Anaconda Prompt”（类似macOS中的“终端”）中进行使用。</p>\n<p>除非你打算使用多个版本的Anaconda或者多个版本的Python，否则便勾选“Register Anaconda as my default Python 3.6”。</p>\n<p>然后点击“Install”开始安装。如果想要查看安装细节，则可以点击“Show Details”。</p>\n</li>\n<li><p>点击“Next”。</p>\n</li>\n<li><p>进入“Thanks for installing Anaconda!”界面则意味着安装成功，点击“Finish”完成安装。</p>\n<p>如果你不想了解“Anaconda云”和“Anaconda支持”，则可以不勾选“Learn more about Anaconda Cloud”和“Learn more about Anaconda Support”。</p>\n</li>\n<li><p>验证安装结果。可选以下任意方法：</p>\n<p>① “开始 → Anaconda3（64-bit）→ Anaconda Navigator”，若可以成功启动Anaconda Navigator则说明安装成功。</p>\n<p>② “开始 → Anaconda3（64-bit）→ 右键点击Anaconda Prompt → 以管理员身份运行”，在Anaconda Prompt中输入 conda list ，可以查看已经安装的包名和版本号。若结果可以正常显示，则说明安装成功。</p>\n</li>\n</ol>\n<h2 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h2><p><a href=\"https://cloud.tencent.com/developer/article/1649008\">如何在 Ubuntu 20.04 上安装 Anaconda</a><br><a href=\"https://zhuanlan.zhihu.com/p/32925500\">Anaconda介绍、安装及使用教程</a></p>\n","categories":["Tools","Systems"],"tags":["Ubuntu","Anaconda"]},{"title":"Windows上使用Linux虚拟系统","url":"/2020/10/30/windows%E4%B8%8A%E4%BD%BF%E7%94%A8linux%E8%99%9A%E6%8B%9F%E7%B3%BB%E7%BB%9F/","content":"<p>在Windows store上下载Ubuntu虚拟系统，并且安装window terminal进行登录。</p>\n<a id=\"more\"></a>\n\n<h2 id=\"1-配置window-terminal\"><a href=\"#1-配置window-terminal\" class=\"headerlink\" title=\"1 配置window terminal\"></a>1 配置window terminal</h2><p>建议使用window terminal登陆集群，可通过Microsoft store下载<strong>window terminal</strong>以及<strong>Ubuntu 20</strong>，提供登陆界面，借用后者的ssh等命令，直接使用ssh登陆集群。  </p>\n<ul>\n<li><p>进入电脑安全模式开启cpu开关（个别电脑需要）；</p>\n</li>\n<li><p>开启window的WSL功能：前往 “启用或关闭 Windows 功能” ，然后滚动至底部，如截图所示，勾选 “适用于 Linux 的 Windows 子系统”，点击确定。它将会下载安装需要的包。安装完成之后，系统将会询问是否重启。重启设备。</p>\n</li>\n<li><p>进入Microsoft store下载Ubuntu 20和window terminal；</p>\n</li>\n<li><p>下载window terminal后，启动并选择Ubuntu。配置window terminal界面，参考 <a href=\"https://github.com/ShuilinLiao/ShuilinLiao.github.io/blob/main/source/documents/ubuntu_settings.json.txt\">配置文件</a>。<br>  想要使用鼠标选中单击即复制功能（以空格为分隔符），需要对setting文件进行设置：</p>\n  <figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&quot;copyOnSelect&quot;: true,</span><br><span class=\"line\">&quot;wordDelimiters&quot; : &quot;  &quot;,</span><br></pre></td></tr></table></figure>\n\n<p>  并且需要把改配置代码放在<code>&quot;profiles&quot;</code>外</p>\n</li>\n<li><p>此时Linux虚拟系统已经初步建立，进入d盘：<code>cd /mnt/d</code></p>\n</li>\n<li><p>在运行(<code>win+R</code>)或<code>cmd</code>里直接输入<code>\\\\wsl$</code>进入Ubuntu的目录，从而查看ubuntu在windows上home的目录 <code>\\\\wsl$\\Ubuntu-20.04\\home</code><br>以个人系统为例，WSL的root目录对应windows的：<code>C:\\Users\\liaos\\AppData\\Local\\Packages\\CanonicalGroupLimited.Ubuntu20.04onWindows_79rhkp1fndgsc\\LocalState\\rootfs</code>   其中AppData文件夹默认是隐藏的</p>\n</li>\n</ul>\n<h2 id=\"2-免密码登录服务器以及与服务器传输文件\"><a href=\"#2-免密码登录服务器以及与服务器传输文件\" class=\"headerlink\" title=\"2 免密码登录服务器以及与服务器传输文件\"></a>2 免密码登录服务器以及与服务器传输文件</h2><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 本地进入home目录，并生成rsa密码</span></span><br><span class=\"line\">cd </span><br><span class=\"line\">ssh-keygen -t rsa</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 登录服务器</span></span><br><span class=\"line\">ssh liaoshuilin@192.168.106.31</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 将公钥复制粘贴到大型机的.ssh目录下authorized_keys（若没有，则创建）</span></span><br><span class=\"line\">cat ~/.ssh/id_rsa.pub</span><br><span class=\"line\">vi ~/.ssh/authorized_keys  </span><br></pre></td></tr></table></figure>\n\n<h2 id=\"3-本地与集群传输文件\"><a href=\"#3-本地与集群传输文件\" class=\"headerlink\" title=\"3 本地与集群传输文件\"></a>3 本地与集群传输文件</h2><p>使用 <a href=\"https://www.cnblogs.com/likui360/p/6011769.html\">scp</a> 命令，在使用期先设置集群的别名信息，方便使用scp命令</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">echo -e &quot;Host  alias1 \\n HostName 192.114.23.43 \\n User username&quot; &gt; ~/.ssh/config </span><br></pre></td></tr></table></figure>\n<p>alias1为设置的别名，username为在集群上的用户名，最后呈现格式为</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">Host  gdl</span><br><span class=\"line\">HostName 192.114.23.43</span><br><span class=\"line\">User xxx</span><br></pre></td></tr></table></figure>\n<p>传输文件一般在本地进行command</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">scp -r alias1:/hwfssz1/filedir/  ./  # 集群传输到本地</span><br><span class=\"line\">scp file.txt  alias2:/hwfssz1/filedir/  # 本地传输到集群</span><br></pre></td></tr></table></figure>\n\n<h2 id=\"4-参考链接\"><a href=\"#4-参考链接\" class=\"headerlink\" title=\"4 参考链接\"></a>4 参考链接</h2><p><a href=\"https://zouhua.top/archives/16954f4d.html\">Cygwin：Linux模拟软件</a><br><a href=\"https://www.cnblogs.com/lepeCoder/p/wsl_dir.html\">windows10 ubuntu子系统 WSL文件位置</a><br><a href=\"https://stackoverflow.com/questions/60441221/double-click-to-select-text-in-windows-terminal-selects-only-one-word\"><a href=\"https://stackoverflow.com/questions/60441221/double-click-to-select-text-in-windows-terminal-selects-only-one-word\">Double-click to select text in Windows Terminal selects only one word</a></a></p>\n","categories":["Tools","Systems"],"tags":["Ubuntu","Windows","Linux","Virtual systems"]},{"title":"关于澳科大联培的一些问题","url":"/2020/11/15/%E5%85%B3%E4%BA%8E%E6%BE%B3%E7%A7%91%E5%A4%A7%E8%81%94%E5%9F%B9%E7%9A%84%E4%B8%80%E4%BA%9B%E9%97%AE%E9%A2%98/","content":"<div id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" id=\"hbePass\" placeholder=\"\" />\n    <label for=\"hbePass\">您好, 这里需要密码.</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"d53403c112d2bf54d2055e64c577e6cac65558d3186c313e8ec4d5396305715e\">23592b36a29a8ed352de28374547362b67d7d39267b0d2501ae1b761af08aac0127076fa7a89d02cc3f099eed96ad7922db78aaefe35d776d7d5779683afdeece4b7e31ad700c8b53f9636a7b7f600749fca44ed31d744f9ed77a4e83bc4df5f5a54372411bf95fa47b679e9a560ac9e95f496a2941fbb6789c566d909132c55a3def3737e46a5fafe960241cfa5f0afb632b669f672c04b9079ce679f9726a58cc1fcbed469048d92cb18c33c46edaae4ff29953d81c5928ff2cb1580ae392b2c037228b4ff0e7d5dc4aa67daa22ec53ac0d7028959493764f2eb65ee51154e37f732e0a431e60454bb32332698ee0ea13a9ee8451802fcfae7962c0988c277e872ee040836d054a14f371a8ec3b6bc4383e1943b71d576b949d54808c725ca929eb91878a3c82766c8fa105aad584cf9ac6c452b8c9479b318e65ed58f8998aae8cdabc1430ecd2306bda6d99ed56ce010e4d4dd44c175a5dbe31e3e3d21ad6111d9c490ebbfebfdf5c54465e5c9bbcbc43879b7dc4f6ef25f5d98a7c02f06837b6e53d6fd86936dfcad3e15627514752f2aa7cefccfaf07f56dbb3b4192df5e110a43ae7f07193b76a484769a5c68d258a318742efee3a3f84c81958ab9331f1fdf060c773c22b7b29c655ed63c1b316125eaa44566b348236a3fa9aae5dcd9f52fa228a3a9d44aa86015a1fdf85ceafddb87b88d228436cff9c7b06d0c0a9516440342097296750b6b514518424382a9c2691a2c53f77bbc7db829fb88961b5b881947e5c8266db70a710ade50a697dcfb628ff9537f2a098b1b8573ce6625deda9caee71919bbc64e56f4e4556cfd4b653c9f75af1f0bf73a5bc64ee91bb2c4724df80fc557399e8ef5aaa853e2d860f5b1c81d444861f941181bad4d4995e2a3e641474ff4b98462bccff8e67322c9a624e032232bdb58e9cdb595e492013fd94048c2496f7e1d71436ef89dac9cafefdd4ac2c0889cd2fc25d52be244cf105eb54f487676511838632125144de636f0bc9ad9fe025965f0f2279747b37fd771574e65faf51c0ae1b9ee2667299a02dc9adf15acffb7bd32d1a45fdcaae3c5b1f609175b26fe3f32275b38a80e3a6677357e1dcee4cfc582ea492c939b644de04c6eae475294fc27cdf5f9db0602304abc304a2b334c3bcb0f69415c14335bf9a50f06cb4987cb310145e86f825e666e82ef1bc4591fcd17189baebd808fcebeb900ac91760ed8b02747499d55441b221736056b57b1ae2360e78f9cc3b14204450a337c61b90f5df68c6eed7eb0e88d82b979ed6a65249e57c02ea24b025ffa5670165cf0a4a5237b09e63a9fbae0ce2d1092caba2e8fa31e74969fa3e934b9d88c48cac23429b1c9de04f14def2dfdf7059a89651d1f082358599a7bb26424a8d3f06b3d37e067e3be47b4254d56c49426887e3be0f30711de216ed42f27b9526c159570d7a4083af745db712acd8b3c9a561cc34cc8d29580f745faf092617047a070b5ef7f73ced87d4d6361be4fe7e7092b3e77cc594d28abb41fad0dff4bb5236bb763d993de2b437c38295d1ac9b769b03584c0a0022f3295b5c6d7a47f3e31efc07dd765ed97d4cdcec1dc48c12c8260e6af3ea6a71d6ef1761e209b2ba47ebc5c49bfb1d97e93f6b11df491567f08ac6880bb86c31d965d94c10b358b3a77d50bb7d1f3c04fcf4e2b0494d20f7752995b43f4780fde4a1a1c4dccbfd6d651413780a7d4a30245e30222e3874076548c53e70795640dc13dedbbd0b08a7f86cc0a2813eec5f9f3f5b0bddf5678098ab08ff8b096fe51239a0b57e1850c6879f303825114e39a0f261a93f5be3750e8b94dc894670b23cb3fd4f58e8aa217196ca634d0f51c9bcb5f0a5d5e700259b6100a06e4e489f45ab3c845ef8985d4a44df28aec2435ad7ddb7d31b945d1f2a08d1cecc5df4c4779b4a92be5900df7fcf0785cfa9e5294634cd0ba63dd4084404b6720bcc01b2784d3ea682ee5f3ab5230204be5433cd4e9df581c3c7e0f4118f6bedfc0d56bfcfd1fa4392ded1c93d4b20a452130d24b3d86144e3abd504fff3d48317b003712e07a4436d088bdbd7e9130a556f67aa1eefef60f7f3abb0ee08f6f1c751b4116de40c6a40f023d186e85d5e14ff32f960663f57f9e117e8b9d5d474e211edcf233af94e8b780434d1e0e9c21f1352829b75308e8ebccf6a5ab0a16884286dd451460d4b3d7ab9ce13a200b1d6cd80f0e1b591ad229edac944c77442511b0b9045c6848223de935f1e9440363109a5eca906b249ca31c7540e71a4a4b6f07aafbaf728a187197211a3f99234b6a54270aef32582e53d45994f83efe9ce0357fccbbb8315af959c14de81cfd06d60917f09ce96ddd801b46e0624f6b67a6780f4bcc643c6f82ff73444c850c5d0682fb98e8154300c8a904ad46d3fa20969727f8a1ad05dddef1fa8062e9bd74528baab4a4fe4850c0842224010841cdbcea8c9d6a8f4c5a7b27bcb130838d25dc8dc1de3648c191564630ae2c131b6103de54a00f5adf4e8a2a556ba5bc5d2f8fd0711f8caa65ca327f3c9434cf330ccc401c90f82ad934c95ab3664cd1ad5faae078e1e154e8d36173aaad8c1694e4c9703f6faccc83d9b8b071138405dbd8fa759302cc44446f9c4ae98acb795891b126ed729d9eeff6bf29b18a81acc10fcf57abb445050d72e9fc39bca09186791acc5dc031a860d903a78b3442ab4db6a1066e3a73e510efd555aba120ffcc6014b995ff038fa19bacdad34aab7917aeb1cb1b92707e4d279e9dc6fd7a3feccc11d439287ae522562af69e4bf298eaea65c35c7fd9139e0d13848d7ccafc644b703e17b55cde4ee6cfe25cd8b393954cac597cc9d27ebd</script>\n</div>\n<script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["Private"],"tags":["MUST","PHD"]},{"title":"学习数学、python和单细胞测序分析计划","url":"/2020/12/01/%E5%AD%A6%E4%B9%A0%E8%AE%A1%E5%88%92/","content":"<div id=\"hexo-blog-encrypt\" data-wpm=\"抱歉, 这个密码看着不太对, 请再试试.\" data-whm=\"抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容\">\n  <div class=\"hbe-input-container\">\n  <input type=\"password\" id=\"hbePass\" placeholder=\"\" />\n    <label for=\"hbePass\">您好, 这里需要密码.</label>\n    <div class=\"bottom-line\"></div>\n  </div>\n  <script id=\"hbeData\" type=\"hbeData\" data-hmacdigest=\"93f757b20c0bb75e6649fb5e0a7294cdacdf235874da447f9b54fdceb6315e04\">8345408e92e0f78304ecb1463714cdd8690d8aac7de3a24515a3076e5345d2ac0f6bf90bda28942bdc9b3be379007b0d34104edb6c60a85c47d83a59131ad5df3bb59fd8f22a0b83601728f394bc5a7c65b380fb4376aaf2ba7389e732193b4ef8a7f9b66d9b3bcb1c716f0d5677d46364a7878406dc3a28048248ff2331e5688e7b98d274a9135f8da68af7d632c46f2091872f26f5f4bd386969d501d1588709fd2fc685a5573e3ab3735c884a48f37ebdab2f86f2a0ba35ef2730dd1fa32fa41e82ee9e94e88b880a57b2d5ef49bc6775c3c759fe113081b272a01109cde1dc51764f837673ca02ed51a3a3f71b30a1caa52b177649d90866431f69b3ba076402b5e2d88088f14c6cd84d91e2ce2304e1f62a7155d909c1a13f86b74aa99089138d24e319e1640786769c7f93939018169f606573122287573ffd2b7570813b07efbe7abfd8823fb17378c1f791457ae0e0632076582a3336292d728b9ddaffa4c95731d317509de42723f61c6954c0658a841d7df9ce172dcde80555fa018a6150462171d1c41e09944ba549c9c5f5158cc1f1f5ad6f4abf664b5172af2cae6d5006a9bcafcbffa4592aa24c2e4e589b503942c5e98a69795ad3803b766e018284de52fa41a1ae75e1e7d57fb00c0639cb64c0fb0877fb4236f4021e8a70edb86977823f8f0eb1f7671186529671e7ae24582eb7dd9f7b7521639b5b94f57d0d3b828751347049517dce48dc833dbac78b722333c16fc0e81c1ac36d811b67c72b207831accb6ac2ec131cd7a749e56cc9d7300ebedd50b40e6519be5f1c9d7ea688086a7a46b6aa2f27c2038cf533925d8365fca1c75b800fe622f00992b5682d803278720f9615977fd59d0e86eafd2c1c9da27b2c479030f0b7e66b997a25cfc6f67189da3adcbe77614dc0c39c8934c4f94f6f2c2f2808d672320e6fa91bcd913ea3f01cd1d4356782cb66cafc99955b1ec20bb484de82153218b4e671ff1ac9067b9293f3ebbb42e281d6ea505e8332bfb625e5b067fc77add39ded6dc30704eb4343309fbda2ced23034ecd1667c0894d44747fb7beea4040ef6daeb19377c690f955c637d7fbe7c54a606bd03f8ed459859ea2bc86057d05c7ff2d91290e01ec8d4ec7bc47e2d97e5547a58ffb42eeed178f533299220347b0374912494f4a403d5e9f262c4b269fe256bb2eccaf00a91575f9268e08ee1fcea1594b59f972a8493726bacc3b9899644405f25c5ee4c705e182dc4e37e3747e0642050a0081769fcd3e60dada63413dd810999072422447e9b09d292eb39fc96c86c3671acd333adf6c071a78e4a7a88677ca2e13c8ba013fe5551bd24c16a267aed01a1fbb462f34ce9b9968cbd4773bae51d87bed2ee72713874301ac8e8cda78f83c332883b2c38f1e839264c6dcdc25f329fab84075e920dbf22a569bdedb14629635771c7453c4bb3cefb91103a4d0e954859e37acb718e8360b02f5deeb831c0823d8fe79eeff1b4379c581ef4b6918676c166e50d2e9cf060c83715cb2c2a51b005477a7945fbc940d113ecefc95c7544778db7dbcc67055179ddbc74fa1478775d3fa9fbf39de541f655c909ac147277024b28e7868cc6de03dc855316ba0b12a110e26e33c65cb217540ae69d6cb7203b52ca995892a5c4b7407bd85ad963a2fa59363af64bacc240edfd2b0ea3761011b20f6e07bf8c071e0f06a13ab6413e795d50fd5501ba7aea8b166d428ea512f2a85eed0d6ea828ddaca7b39c71f083fd2b96b42f6ccaab07b38b2b6aa84320c8f60ec97375a1322a87e0be725695b2289c2faf56bbfe430229dd359ab73143b7dc6221369838d17009dd517622c216bb06976f4a549dbde22ea3b567a5efa048229c470e26cf1701cf4f2e0809e66fdf19bbefcaaa60237ba23f7288a2faec058b449ccb69365410ed0d68641e95d55575d9eb25bf4c9b50275f273db89b8291f936bbad32d3a0cb5b5eaa139398cae3d32db657c0c51952dfcb4d6b060dacb6aa235b1c666592503021bbed864b9534d82cf008ac55944876abac87005973938992eb7b2aff67e3da53532a2e2be953824116d87b0a24e56646954bec16b355bc30855d17ee30ee3c49e75f05b69f7bbdd71b690e830fa1759a5051ce597b2c1a44e6c0f2ecce17961b00129a2ad20ef877ad5daf96c2881dabd6fd79e3dd8dbb02628fd5cf459bf4315e2002c76b4d4c56a60bddd59257f5e97f23bdf408ad783bfe9841e1a227b80c6ec6a51d9522a8681f6f880c2259092a7565ef7d02818602635474e06617c6cc1e5d71517978d70438b102ce6c068cb4bafc40d517757484571630e77d0b01275d0b631ad5e25f64dacbca91fe5630cdb2f2d1724df89056db5295ab120d94fd6f117c815628174498f776a9f0b494604aa63812d2592fd53c2646bfc069e411c76efb61163d68ca85395429b434f7c353593478acb118e65357be9cb9b56874a3505b77ac4ea1c58543abbeb3946ea84f07b73f192b3a14a766dc7f14388a200dc27ecbbae0032e7927ec321fed97ae45a8fe0ce7adf3366b4513707a7dd6141250c9da5562f6e3c6b28d3b8ee2cb09ebb7e7a49ea148dbe1b8c4751a50cae76e81fad39af53a633e298392220b6de8024399d699088647c94bb40ef0c79ee7cea81342d282999fed0063f43a5b09ce5d95e2daf02fa1a5d34cc122db8107f5fea8efd8521243ea0952d9c41423cc5ffc5cd3b4fa1eb9884cd4b16484d32eb80a5ada34e2f9b24fd312a64ae8cc0243d335693400c2204d82bc93725e45e0fc8a6cf70e5418aeb8da95019f8e25baf2e01fb0009d6782a63e5c331c58e382adf6d913ffff8f38f902478464677d3cf0f36cc77eb13520bda9eae3cfae943206bb61379ad0a960ffaa6cb9a232b66b1c7c269d08cf521f959fb7c1963746024b643db59fe3a534122906df9bbd948adaf4d4f5f988281bd19c29adf33f3a5b25f5f540aa0f4cb1bff4512babe0db4625661354cae6d358e88316868e1e28238d64bc37925f516b48883539f5449853c35725c9c57d33ec30835e91367a19b1b777d48c39742411883a7cc75d32e7c099712741d8fd130e5f1126dad9a139ea6a46d017e56dd48c08c0378c35cfbed1a44ea85d4f448c126a4dc5f8b178eb099727739a390901ba3dc52c6714a9336a19c2c65604a04ae65fefe27ac9d9e0c929f4d06c0d84f0b1741db31897a6e25c2042ced38febfde6b3a83efdaea6e8c8c60d3754d14a108b681035494b533e6eb7cad701b9ea77e0132476968cb18203334a8fa7fd23001040bcdbe33f57b3c5559b460d0d6a8fc3ed9ca2f1165e92a56de1598ee12bf7e1c9e84885af98c8b2c463a705619d5c0e4d01d2e739a49a49c240d17d2a18506052b7d9cf0fb9ae36dd0befbbda2e4364ce84c71e2a5683a13fdba8814f91c142f8a8b18fee7b4172cffdf2ba7dedc6603a7696453055ce0c45a151d5d983bdaea7234c6f242c46ec648030766d4a6cc41887266081cb2b50aeba499464008b39f12aad4cb07929ded5b1b17997669f5acf1a0e5f6c30120388977d2301c3155a86fca7b548ef13bb8a64a388bc2e7d40372012824d362c4d1033ed9e0593042e4e2ea6ec042d6ad32bab3ac84d0e1701a0713bf8cf8df59f2e3d774ec03222f18303a3358b19b702d200fea00138ae65b6c04fcf26a672208ccac73985e35be162d1a3ff23118873f6c13cb9a35f369a46281a6a7e252e988d8daac5d3a36e71fdf17dd6664c9140693e02cc4b5a496a11bb3463d51598adcc35ffae4abfebfa30bfe5ac04199ff6bf7e0a4f271e8d857ed988d4d810da14e3e393d39263d74f7825396cb53f0d00bf22f7f3bf0a592c111733399d7fcc6197f02c3f48d2f9b42f4efa1024a359392b6cb7dd1ac1883490c283fe42c982248136331598359b59ee31127e1e1ee94d7189a7874b942bdf6cb14c9fded8fdf0d38716895d1d3695814315bb0994376d9fa54d7513f428ec33597a7e76a5389c10866e806dce83a6ded7d857cdfee088944548fb9bbdb74d06c2c5e1213a3ba965c262ecad9576222aaa99d5d9bdea8043a17e8150f392b7c8567435a7192d5fe501b93c74217dacc7d3cbac7483c68d0c296f23482aa8f110e040d53bdf9f7ab27000525feb42e8a3413900a0f8e117e0d38bc7af1960d254ca5dc6ea2c1e1f9405dccd445c9f821cb1e4e7d719c71e7956480272937108286908c4c97610289b633f840abadc86f24be5e9f05be9212bef0ce083e7b61303748be2486bee6da347b8cc8d8727542bdd88429343cdb8884f1ff22f0ac65fc63e2010f2b1a271d7e90d4034d4fd58ecb24a9bc58bb56468983d3e321f0d4bd086ea61a2bac3585094825790f52322cee88c080445303e4dccf4106d2f3a412a9ec81c7551689d1eaee0f90a910f1fe39579bd5b2bbdf13cb8099ac9fb1b72a70d32d832b4646f9063bfc8e5a83876de43b131e55266b2b5cdf4087c2c61d5997f5c2410ae247cb49d5c90cfd491fd932c43789e4fd09d8539824888c6a6d1f774f02057e97f47ba0c79faf22c971e714651fbf32130acc3ba59689c39bc3816b7ef4e5f4a494adf04423c6c25f63efb8efc594d40e3444880b7df3bc7ae69890b287320fb3499e25e3871409c219591154ea63b6343c3e118407c0a925dafdc580ec3df6f84770af854365036dd023d2c03ea9b8f07d6852122719a0f93926af4b98b15d72627d284b5641a5249033414c93b918d6054e390a9c00c474d9887777bb3b668da6defa57687314d8262cbdd475636f23ed49029ea8658a2af2f00fe0c81b1b915a416db2ee3d448932e46157ea6d763ca50599fb679913fd3395bdca1a26d2e9cb8ab4fc15e41af68b1d93da380615ce634951c43</script>\n</div>\n<script src=\"/lib/blog-encrypt.js\"></script><link href=\"/css/blog-encrypt.css\" rel=\"stylesheet\" type=\"text/css\">","categories":["Private"],"tags":["Plan"]},{"title":"用Rmarkdown生成简历","url":"/2020/11/17/%E7%94%A8Rmarkdown%E7%94%9F%E6%88%90%E7%AE%80%E5%8E%86/","content":"<p>参考他人的模板傻瓜式用Rmarkdown生成简历</p>\n<a id=\"more\"></a>\n\n<h3 id=\"用Rmarkdown生成简历\"><a href=\"#用Rmarkdown生成简历\" class=\"headerlink\" title=\"用Rmarkdown生成简历\"></a>用Rmarkdown生成简历</h3><ul>\n<li>将Y叔发表在GitHub上的代码用git clone下来<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">git clone https:&#x2F;&#x2F;github.com&#x2F;GuangchuangYu&#x2F;cv.git</span><br></pre></td></tr></table></figure></li>\n<li>为避免出现函数的冲突，建议将index.Rmd中select和rename函数前<strong>声明所属包</strong>，即有关部分将改成以下代码：<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">xx[[i]] &lt;- dplyr::select(y, -c(start, end)) %&gt;%</span><br><span class=\"line\">      dplyr::rename(start=start2, end=end2)</span><br></pre></td></tr></table></figure></li>\n<li>教育经历，工作经历，发表的文章等都是一个一个的block，而简历正由这些block组成。这些信息全都存在<code>position.csv</code>中。<code>index.Rmd</code>也有部分个人信息。因此把<code>position.csv</code>和<code>index.Rmd</code>内的有关信息照着格式更改成自己的，不需要填写的用NA替代。不需要的block可直接删除（和相关代码一并删除）。</li>\n<li>在按照模板在csv修改内容的时候，不需要的行/列<strong>不要</strong>用清除内容方式，而<strong>直接进行行/列的删除</strong>，以免在后续代码的运行中空白行/列产生干扰</li>\n<li>在R命令行或者Rstudio中的脚本中输入以下命令：<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">rmarkdown::render(<span class=\"string\">&quot;index.Rmd&quot;</span>)</span><br></pre></td></tr></table></figure></li>\n<li>随即会生成<code>.html</code>格式的简历，另存为pdf即可。</li>\n<li>在csv中把<code>position.csv</code>信息更改好之后，再用文本编辑器（此处为Notepad++）将编码方式换成UTF-8编码（此时再用csv打开会出现乱码），并将代码中关于读取positions_CN.csv的部分改成以下内容：<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">position_data &lt;- read.csv(<span class=\"string\">&#x27;positions_CN.csv&#x27;</span>,encoding = <span class=\"string\">&#x27;UTF-8&#x27;</span>) %&gt;% </span><br><span class=\"line\">  mutate_all(fill_nas) %&gt;% </span><br><span class=\"line\">  arrange(order, desc(end)) %&gt;% </span><br><span class=\"line\">  mutate(id = <span class=\"number\">1</span>:n()) %&gt;% </span><br><span class=\"line\">  nest(data = c(-id, -section)) <span class=\"comment\"># read.csv打开，并增加encoding = &#x27;UTF-8&#x27;参数</span></span><br></pre></td></tr></table></figure>\n\n</li>\n</ul>\n<h3 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h3><p><a href=\"https://mp.weixin.qq.com/s/Dz2fa83O_P5QPD8VLR7DRQ\">Y叔笔记</a></p>\n","categories":["R","Undef"],"tags":["Rmarkdown","resume"]},{"title":"如何用Hexo+Github搭建个人博客2","url":"/2020/10/04/Hexo-Github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A22/","content":"<p>如何用Hexo+Github搭建个人博客（下）。主要涉及分类和标签的添加、文章加密和主题的配置等。<br><a id=\"more\"></a></p>\n<h1 id=\"添加分类和标签\"><a href=\"#添加分类和标签\" class=\"headerlink\" title=\"添加分类和标签\"></a>添加分类和标签</h1><h2 id=\"创建“分类”选项\"><a href=\"#创建“分类”选项\" class=\"headerlink\" title=\"创建“分类”选项\"></a>创建“分类”选项</h2><h3 id=\"生成“分类”页并添加tpye属性\"><a href=\"#生成“分类”页并添加tpye属性\" class=\"headerlink\" title=\"生成“分类”页并添加tpye属性\"></a>生成“分类”页并添加tpye属性</h3><p>打开命令行，进入博客所在文件夹。执行命令<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">hexo new page categories</span><br></pre></td></tr></table></figure><br>成功后会提示：<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/categories/index.md</span><br></pre></td></tr></table></figure><br>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2018-10-31 13:47:40</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure><br>添加<code>type: &quot;categories&quot;</code>到内容中，添加后是这样的：<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2018-10-31 13:47:40</span><br><span class=\"line\">type: &quot;categories&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure><br>保存并关闭文件。</p>\n<h3 id=\"给文章添加“categories”属性\"><a href=\"#给文章添加“categories”属性\" class=\"headerlink\" title=\"给文章添加“categories”属性\"></a>给文章添加“categories”属性</h3><p>打开需要添加分类的文章，为其添加categories属性。下方的<code>categories: web前端</code>表示添加这篇文章到“web前端”这个分类。注意：hexo一篇文章只能属于一个分类，也就是说如果在“- web前端”下方添加“-xxx”，hexo不会产生两个分类，而是把分类嵌套（即该文章属于 “- web前端”下的 “-xxx ”分类）。<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo博客+Github博客教程：03添加分类，标签</span><br><span class=\"line\">date: 2018-11-01 14:17:46</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- hexo</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure><br>至此，成功给文章添加分类，点击首页的“分类”可以看到该分类下的所有文章。当然，只有添加了<code>categories: xxx</code>的文章才会被收录到首页的“分类”中。</p>\n<h2 id=\"创建“标签”选项\"><a href=\"#创建“标签”选项\" class=\"headerlink\" title=\"创建“标签”选项\"></a>创建“标签”选项</h2><h3 id=\"生成“标签”页并添加tpye属性\"><a href=\"#生成“标签”页并添加tpye属性\" class=\"headerlink\" title=\"生成“标签”页并添加tpye属性\"></a>生成“标签”页并添加tpye属性</h3><p>打开命令行，进入博客所在文件夹。执行命令<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new page tags</span><br></pre></td></tr></table></figure><br>成功后会提示：<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">INFO  Created: ~/Documents/blog/source/tags/index.md</span><br></pre></td></tr></table></figure><br>根据上面的路径，找到<code>index.md</code>这个文件，打开后默认内容是这样的：<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 标签</span><br><span class=\"line\">date: 2018-10-31 13:47:40</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure><br>添加<code>type: &quot;tags&quot;</code>到内容中，添加后是这样的：<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 文章分类</span><br><span class=\"line\">date: 2018-10-31 13:47:40</span><br><span class=\"line\">type: &quot;tags&quot;</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure><br>保存并关闭文件。</p>\n<h3 id=\"给文章添加“tags”属性\"><a href=\"#给文章添加“tags”属性\" class=\"headerlink\" title=\"给文章添加“tags”属性\"></a>给文章添加“tags”属性</h3><p>打开需要添加标签的文章，为其添加tags属性。下方的<code>tags:</code>下方的<code>- jQuery</code> <code>- 表格</code> <code>- 表单验证</code>就是这篇文章的标签了<br><figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: Hexo博客+Github博客教程：03添加分类，标签</span><br><span class=\"line\">date: 2018-11-01 14:17:46</span><br><span class=\"line\">categories: </span><br><span class=\"line\">- 基础知识</span><br><span class=\"line\">- hexo</span><br><span class=\"line\">tags:</span><br><span class=\"line\">- hexo</span><br><span class=\"line\">- github</span><br><span class=\"line\">- 博客</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure><br>至此，成功给文章添加分类，点击首页的“标签”可以看到该标签下的所有文章。当然，只有添加了<code>tags: xxx</code>的文章才会被收录到首页的“标签”中。</p>\n<h1 id=\"文章加密\"><a href=\"#文章加密\" class=\"headerlink\" title=\"文章加密\"></a>文章加密</h1><ol>\n<li>安装 <code>Hexo-blog-encrypt</code> 插件</li>\n</ol>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install --save hexo-blog-encrypt</span><br></pre></td></tr></table></figure>\n<ol>\n<li>修改 _config.yml</li>\n</ol>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"section\"># Security</span></span><br><span class=\"line\">encrypt:</span><br><span class=\"line\">  enable: true # 开启为true，关闭为false</span><br></pre></td></tr></table></figure>\n<p><code>default_template</code> ，这个是指在文章详情页，我们看到的输入密码阅读的模板，同理，这个也是针对所有文章的。<br> 最后的 <code>content</code> 显示 <code>div</code> 的 <code>id</code> 必须 是 <code>encrypt-blog</code>同时为了好看，也希望进行隐藏。<br> 必须要有一个 <code>input</code> 输入框，<code>id</code> 必须是<code>&quot;pass&quot;</code>，用来供用户输入密码。<br> 输入密码之后，务必要有一个触发器，用来调用<code>decryptAES</code> 函数。样例中以 <code>button</code> 来触发。</p>\n<ol>\n<li><p>文章开头设置</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: hello world</span><br><span class=\"line\">date: </span><br><span class=\"line\">categories: </span><br><span class=\"line\"><span class=\"bullet\">-</span> cate1</span><br><span class=\"line\">   tags:</span><br><span class=\"line\"><span class=\"bullet\">    -</span> tag1</span><br><span class=\"line\"><span class=\"bullet\">    -</span> tag2</span><br><span class=\"line\">   password: xxx</span><br><span class=\"line\">   abstract: &#x27;有东西被加密了, 请输入密码查看.&#x27;</span><br><span class=\"line\">   message: &#x27;您好, 这里需要密码.&#x27;</span><br><span class=\"line\">   wrong<span class=\"emphasis\">_pass_</span>message: &#x27;抱歉, 这个密码看着不太对, 请再试试.&#x27;</span><br><span class=\"line\">   wrong<span class=\"emphasis\">_hash_</span>message: &#x27;抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容&#x27;</span><br></pre></td></tr></table></figure>\n</li>\n</ol>\n<h1 id=\"主题优化\"><a href=\"#主题优化\" class=\"headerlink\" title=\"主题优化\"></a>主题优化</h1><h2 id=\"设置site基本信息\"><a href=\"#设置site基本信息\" class=\"headerlink\" title=\"设置site基本信息\"></a>设置site基本信息</h2><p>打开站点文件 blog/_config.yml，设置博客的基础信息。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Site</span><br><span class=\"line\">title: &quot;滴水穿石&quot;</span><br><span class=\"line\">subtitle: &quot;action like a dog&quot;</span><br><span class=\"line\">author: ShuilinL</span><br><span class=\"line\">description: &quot;种一棵树最好的时间是十年前，其次是现在&quot;</span><br><span class=\"line\">keywords: &#39;Bioinformatics&#39;</span><br><span class=\"line\">language: zh-CN</span><br><span class=\"line\">timezone:</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置主题风格\"><a href=\"#设置主题风格\" class=\"headerlink\" title=\"设置主题风格\"></a>设置主题风格</h2><p>下载自己喜欢的主题文件，可以到<a href=\"https://link.zhihu.com/?target=https%3A//link.jianshu.com/%3Ft%3Dhttps%3A//github.com/hexojs/hexo/wiki/Themes\">这里</a>找。放到Hexo目录下的themes文件夹下，然后在config.yml文件中找到。</p>\n<p>打开主题配置文件 <code>thems/next/config.yml</code>，修改<code>scheme</code>主题风格</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"># Scheme Settings</span><br><span class=\"line\"># ---------------------------------------------------------------</span><br><span class=\"line\"></span><br><span class=\"line\"># Schemes</span><br><span class=\"line\">#scheme: Muse</span><br><span class=\"line\">#scheme: Mist</span><br><span class=\"line\">#scheme: Pisces</span><br><span class=\"line\">scheme: Gemini</span><br><span class=\"line\"></span><br><span class=\"line\"># Dark Mode</span><br><span class=\"line\">darkmode: true</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置菜单项显示文本和图标\"><a href=\"#设置菜单项显示文本和图标\" class=\"headerlink\" title=\"设置菜单项显示文本和图标\"></a>设置菜单项显示文本和图标</h2><p>设置菜单项文件目录和对应图标：打开 themes/next/_config.yml 文件，搜索 menu 关键字，修改对应图标名称或者新增对应 menu 的图标。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  home: &#x2F; || fa fa-home</span><br><span class=\"line\">  about: &#x2F;about&#x2F; || fa fa-user</span><br><span class=\"line\">  tags: &#x2F;tags&#x2F; || fa fa-tags</span><br><span class=\"line\">  categories: &#x2F;categories&#x2F; || fa fa-th</span><br><span class=\"line\">  archives: &#x2F;archives&#x2F; || fa fa-archive</span><br><span class=\"line\">  message: &#x2F;message&#x2F; || fa fa-comment</span><br><span class=\"line\">  #schedule: &#x2F;schedule&#x2F; || fa fa-calendar</span><br><span class=\"line\">  #sitemap: &#x2F;sitemap.xml || fa fa-sitemap</span><br><span class=\"line\">  #commonweal: &#x2F;404&#x2F; || fa fa-heartbeat</span><br><span class=\"line\"></span><br><span class=\"line\"># Enable &#x2F; Disable menu icons &#x2F; item badges.</span><br><span class=\"line\">menu_settings:</span><br><span class=\"line\">  icons: true</span><br><span class=\"line\">  badges: true</span><br></pre></td></tr></table></figure>\n<p>设置菜单项对应的中文： 打开 <code>themes/next/languages/zh-CN.yml</code> 文件,搜索 <code>menu</code> 关键字，修改对应中文或者新增。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">name: 简体中文</span><br><span class=\"line\">title:</span><br><span class=\"line\">  archive: 归档</span><br><span class=\"line\">  category: 分类</span><br><span class=\"line\">  tag: 标签</span><br><span class=\"line\">  schedule: 日程表</span><br><span class=\"line\">menu:</span><br><span class=\"line\">  home: 首页</span><br><span class=\"line\">  archives: 归档</span><br><span class=\"line\">  categories: 分类</span><br><span class=\"line\">  tags: 标签</span><br><span class=\"line\">  about: 关于</span><br><span class=\"line\">  search: 搜索</span><br><span class=\"line\">  message: 留言</span><br><span class=\"line\">  schedule: 日程表</span><br><span class=\"line\">  sitemap: 站点地图</span><br><span class=\"line\">  commonweal: 公益 404</span><br></pre></td></tr></table></figure>\n<p>创建菜单项对应文件目录：在终端窗口下，cd到博客目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">cd your-hexo-site</span><br><span class=\"line\">hexo new page about</span><br></pre></td></tr></table></figure>\n<p>编辑菜单项的新建页面 <code>blog/source/about/index.md</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 关于</span><br><span class=\"line\">date: 2020-04-02 09:14:53</span><br><span class=\"line\">layout: page</span><br><span class=\"line\">type: about</span><br><span class=\"line\">comments: false</span><br><span class=\"line\">---</span><br></pre></td></tr></table></figure>\n<h2 id=\"头像设置\"><a href=\"#头像设置\" class=\"headerlink\" title=\"头像设置\"></a>头像设置</h2><p>添加头像： 打开 <code>themes/next/_config.yml</code> 文件，搜索 <code>Sidebar Avatar</code> 关键字，在<code>url</code>后添加头像图片地址，图片需要存放在<code>themes/next/source/images</code>,若没有则新建该目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Sidebar Avatar</span><br><span class=\"line\">avatar: </span><br><span class=\"line\">  # Replace the default image and set the url here.</span><br><span class=\"line\">  url: &#x2F;images&#x2F;avatar.png </span><br><span class=\"line\">  # If true, the avatar will be dispalyed in circle.</span><br><span class=\"line\">  rounded: true</span><br><span class=\"line\">  # If true, the avatar will be rotated with the cursor.</span><br><span class=\"line\">  rotated: true</span><br><span class=\"line\">  opacity: 1  # 透明度</span><br></pre></td></tr></table></figure>\n<h2 id=\"返回网页头尾和显示浏览进度\"><a href=\"#返回网页头尾和显示浏览进度\" class=\"headerlink\" title=\"返回网页头尾和显示浏览进度\"></a>返回网页头尾和显示浏览进度</h2><p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>scrollpercent</code> ,把 <code>false</code> 改为 <code>true</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">back2top:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Back to top in sidebar.</span><br><span class=\"line\">  sidebar: true</span><br><span class=\"line\">  # Scroll percent label in b2t button.</span><br><span class=\"line\">  scrollpercent: true</span><br></pre></td></tr></table></figure>\n<h2 id=\"首页只显示摘要\"><a href=\"#首页只显示摘要\" class=\"headerlink\" title=\"首页只显示摘要\"></a>首页只显示摘要</h2><p>有时文章比较长，或者想首页更简洁一些，希望在首页只显示摘要而不是全文。Hexo是支持摘要的功能的，只要在文章中插入代码：</p>\n<figure class=\"highlight markdown\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: Hexo示例文档</span><br><span class=\"line\">---</span><br><span class=\"line\"></span><br><span class=\"line\">本篇为Hexo示例文档.  # 这里是摘要部分,写1~2句话,就实现不全显示博文了..</span><br><span class=\"line\"><span class=\"xml\"><span class=\"comment\">&lt;!-- more --&gt;</span></span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"section\">### 下面是正常的 markdown 博客,就可以了.......</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"侧栏设置\"><a href=\"#侧栏设置\" class=\"headerlink\" title=\"侧栏设置\"></a>侧栏设置</h2><h3 id=\"侧边栏设置和社交图片设计\"><a href=\"#侧边栏设置和社交图片设计\" class=\"headerlink\" title=\"侧边栏设置和社交图片设计\"></a>侧边栏设置和社交图片设计</h3><p>打开 <code>themes/next/_config.yml</code> 文件,搜索关键字 <code>social</code> ,然后添加社交站点名称与地址即可。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">social:</span><br><span class=\"line\">  GitHub: https:&#x2F;&#x2F;github.com&#x2F;ShuilinLiao || fab fa-github</span><br><span class=\"line\">  E-Mail: mailto:liaoshuilin@outlook.com || fa fa-envelope</span><br><span class=\"line\">  #Weibo: https:&#x2F;&#x2F;weibo.com&#x2F;yourname || fab fa-weibo</span><br><span class=\"line\">  #Google: https:&#x2F;&#x2F;plus.google.com&#x2F;yourname || fab fa-google</span><br><span class=\"line\">  #Twitter: https:&#x2F;&#x2F;twitter.com&#x2F;yourname || fab fa-twitter</span><br><span class=\"line\">  #FB Page: https:&#x2F;&#x2F;www.facebook.com&#x2F;yourname || fab fa-facebook</span><br><span class=\"line\">  #StackOverflow: https:&#x2F;&#x2F;stackoverflow.com&#x2F;yourname || fab fa-stack-overflow</span><br><span class=\"line\">  #YouTube: https:&#x2F;&#x2F;youtube.com&#x2F;yourname || fab fa-youtube</span><br><span class=\"line\">  #Instagram: https:&#x2F;&#x2F;instagram.com&#x2F;yourname || fab fa-instagram</span><br><span class=\"line\">  #Skype: skype:yourname?call|chat || fab fa-skype</span><br><span class=\"line\">  </span><br><span class=\"line\">social_icons:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  icons_only: false</span><br><span class=\"line\">  transition: false</span><br></pre></td></tr></table></figure>\n<h3 id=\"定阅RSS\"><a href=\"#定阅RSS\" class=\"headerlink\" title=\"定阅RSS\"></a>定阅RSS</h3><p><code>RSS</code>定阅某个网址后，该网址更新所有新内容将以标题或者摘要形式推送给你，你只需要点击<code>RSS</code>链接即可以跳转到该文章网址，从而避免搜索网址后大规模查询该文章。首先需要加载插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-feed --save</span><br></pre></td></tr></table></figure>\n<p>站点配置文件<code>_config.yml</code>，添加如下配置：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># feed</span><br><span class=\"line\"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;hexojs&#x2F;hexo-generator-feed</span><br><span class=\"line\">feed:</span><br><span class=\"line\">  type: atom</span><br><span class=\"line\">  path: atom.xml</span><br><span class=\"line\">  limit: 20</span><br><span class=\"line\">  hub:</span><br><span class=\"line\">  content:</span><br></pre></td></tr></table></figure>\n<h2 id=\"开启版权声明\"><a href=\"#开启版权声明\" class=\"headerlink\" title=\"开启版权声明\"></a>开启版权声明</h2><p>在<code>themes/next/_config.yml</code>文件内搜索关键词 <code>creative_commons</code>, 设置<code>license</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">creative_commons:</span><br><span class=\"line\">  license: by-nc-sa</span><br><span class=\"line\">  sidebar: false</span><br><span class=\"line\">  post: true</span><br><span class=\"line\">  language:</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改文章底部的那个带-号的标签\"><a href=\"#修改文章底部的那个带-号的标签\" class=\"headerlink\" title=\"修改文章底部的那个带#号的标签\"></a>修改文章底部的那个带#号的标签</h2><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;post-tags&quot;&gt;</span><br><span class=\"line\">    &#123;% for tag in post.tags %&#125;</span><br><span class=\"line\">-       &lt;a href&#x3D;&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel&#x3D;&quot;tag&quot;&gt;#&lt;&#x2F;i&gt; &#123;&#123; tag.name &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class=\"line\">+\t   &lt;a href&#x3D;&quot;&#123;&#123; url_for(tag.path) &#125;&#125;&quot; rel&#x3D;&quot;tag&quot;&gt;&lt;i class&#x3D;&quot;fa fa-tag&quot;&gt;&lt;&#x2F;i&gt; &#123;&#123; tag.name &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class=\"line\">    &#123;% endfor %&#125;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"本地搜索\"><a href=\"#本地搜索\" class=\"headerlink\" title=\"本地搜索\"></a>本地搜索</h2><p>安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure>\n<p>打开 <code>Hexo</code> 站点的 <code>_config.yml</code>,添加配置</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># local search</span><br><span class=\"line\">search:</span><br><span class=\"line\">  path: search.json</span><br><span class=\"line\">  field: post</span><br><span class=\"line\">  limit: 100</span><br></pre></td></tr></table></figure>\n<p>打开 <code>themes/next/_config.yml</code> ,搜索关键字 <code>local_search</code> ,设置为 <code>true</code>：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Local Search</span><br><span class=\"line\"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-generator-searchdb</span><br><span class=\"line\">local_search:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # If auto, trigger search by changing input.</span><br><span class=\"line\">  # If manual, trigger search by pressing enter key or search button.</span><br><span class=\"line\">  trigger: auto</span><br><span class=\"line\">  # Show top n results per article, show all results by setting to -1</span><br><span class=\"line\">  top_n_per_article: 1</span><br><span class=\"line\">  # Unescape html strings to the readable one.</span><br><span class=\"line\">  unescape: false</span><br><span class=\"line\">  # Preload the search data when the page loads.</span><br><span class=\"line\">  preload: false</span><br></pre></td></tr></table></figure>\n<h2 id=\"博文置顶\"><a href=\"#博文置顶\" class=\"headerlink\" title=\"博文置顶\"></a>博文置顶</h2><p>安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-generator-index --save</span><br><span class=\"line\">npm install hexo-generator-index-pin-top --save</span><br></pre></td></tr></table></figure>\n<p>然后在需要置顶的文章的<code>Front-matter</code>中对<code>top:</code>增加数字即可，数字大小反应热度：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">title: 如何用Hexo+Github搭建个人博客</span><br><span class=\"line\">declare: true</span><br><span class=\"line\">toc: true</span><br><span class=\"line\">categories: </span><br><span class=\"line\">\t- 工具</span><br><span class=\"line\">\t- blog</span><br><span class=\"line\">tags: </span><br><span class=\"line\">\t- Hexo</span><br><span class=\"line\">top: 100  #(数字可以调节)</span><br></pre></td></tr></table></figure>\n<h2 id=\"统计功能，统计功能-显示文章字数统计-阅读时长-总字数\"><a href=\"#统计功能，统计功能-显示文章字数统计-阅读时长-总字数\" class=\"headerlink\" title=\"统计功能，统计功能,显示文章字数统计,阅读时长,总字数\"></a>统计功能，统计功能,显示文章字数统计,阅读时长,总字数</h2><p>安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-wordcount --save</span><br></pre></td></tr></table></figure>\n<p>打开 <code>themes/next/_config.yml</code> ，添加如下信息：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Post wordcount display settings</span><br><span class=\"line\"># Dependencies: https:&#x2F;&#x2F;github.com&#x2F;theme-next&#x2F;hexo-symbols-count-time</span><br><span class=\"line\">symbols_count_time:</span><br><span class=\"line\">  separated_meta: true  # false会显示一行</span><br><span class=\"line\">  item_text_post: true  # 显示属性名称,设为false后只显示图标和统计数字,不显示属性的文字</span><br><span class=\"line\">  item_text_total: true # 底部footer是否显示字数统计属性文字</span><br><span class=\"line\">  awl: 4                # 计算字数的一个设置,没设置过</span><br><span class=\"line\">  wpm: 275              # 一分钟阅读的字数</span><br></pre></td></tr></table></figure>\n<h2 id=\"每篇文章末尾统一添加“本文结束”标记\"><a href=\"#每篇文章末尾统一添加“本文结束”标记\" class=\"headerlink\" title=\"每篇文章末尾统一添加“本文结束”标记\"></a>每篇文章末尾统一添加“本文结束”标记</h2><p>在路径 /themes/next/layout/_macro 中新建 post-end-tag.swig 文件,并添加以下内容：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div&gt;</span><br><span class=\"line\">  &#123;% if not is_index %&#125;</span><br><span class=\"line\">    &lt;div style&#x3D;&quot;text-align:center;color:#bfbfbf;font-size:16px;&quot;&gt;</span><br><span class=\"line\">      &lt;span&gt;-------- 本文结束 &lt;&#x2F;span&gt;</span><br><span class=\"line\">      &lt;i class&#x3D;&quot;fa fa-&#123;&#123; config.post_end_tag.icon &#125;&#125;&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class=\"line\">      &lt;span&gt; 感谢阅读 --------&lt;&#x2F;span&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">  &#123;% endif %&#125;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br></pre></td></tr></table></figure>\n<p>打开 <code>themes/next/layout/_macro/post.swig</code> 文件,添加:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;#####################&#125;</span><br><span class=\"line\">    &#123;### END POST BODY ###&#125;</span><br><span class=\"line\">    &#123;#####################&#125;</span><br><span class=\"line\">\t&#123;% if config.post_end_tag.enabled and not is_index %&#125;</span><br><span class=\"line\">\t  &lt;div&gt;</span><br><span class=\"line\">\t    &#123;% include &#39;post-end-tag.swig&#39; %&#125;  # 添加内容</span><br><span class=\"line\">\t  &lt;&#x2F;div&gt;</span><br><span class=\"line\">\t&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>打开<code>blog/_config.yml</code>文件，添加：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">post_end_tag:</span><br><span class=\"line\">  enabled: true  # 是否开启文末的本文结束标记</span><br><span class=\"line\">  icon: paw # 结束标记之间的图标</span><br></pre></td></tr></table></figure>\n<h2 id=\"文章顶部显示更新时间\"><a href=\"#文章顶部显示更新时间\" class=\"headerlink\" title=\"文章顶部显示更新时间\"></a>文章顶部显示更新时间</h2><p>打开<code>blog/_config.yml</code> ,搜索关键字 <code>updated_at</code> 设置为 <code>true</code> ：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># Post meta display settings</span><br><span class=\"line\">post_meta:</span><br><span class=\"line\">  item_text: true</span><br><span class=\"line\">  created_at: true</span><br><span class=\"line\">  updated_at:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    another_day: true</span><br><span class=\"line\">  categories: true</span><br></pre></td></tr></table></figure>\n<h2 id=\"给代码块添加复制功能\"><a href=\"#给代码块添加复制功能\" class=\"headerlink\" title=\"给代码块添加复制功能\"></a>给代码块添加复制功能</h2><p>打开themes/next/_config.yml，搜索关键词copy_buttom:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">codeblock:</span><br><span class=\"line\">  # Code Highlight theme</span><br><span class=\"line\">  # Available values: normal | night | night eighties | night blue | night bright | solarized | solarized dark | galactic</span><br><span class=\"line\">  # See: https:&#x2F;&#x2F;github.com&#x2F;chriskempson&#x2F;tomorrow-theme</span><br><span class=\"line\">  highlight_theme: night bright # 代码内置颜色背景</span><br><span class=\"line\">  # Add copy button on codeblock</span><br><span class=\"line\">  copy_button:</span><br><span class=\"line\">    enable: true # 设置为true，开启复制</span><br><span class=\"line\">    # Show text copy result.</span><br><span class=\"line\">    show_result: true</span><br><span class=\"line\">    # Available values: default | flat | mac</span><br><span class=\"line\">    style:</span><br></pre></td></tr></table></figure>\n<h2 id=\"网站标题栏背景颜色\"><a href=\"#网站标题栏背景颜色\" class=\"headerlink\" title=\"网站标题栏背景颜色\"></a>网站标题栏背景颜色</h2><p>在 <code>next/source/css/_custom/custom.styl</code> 添加如下内容，如果没有则新建：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#x2F;&#x2F; Custom styles.</span><br><span class=\"line\">.site-meta &#123;</span><br><span class=\"line\">  background: $blue; &#x2F;&#x2F;修改为自己喜欢的颜色</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"修改Logo字体\"><a href=\"#修改Logo字体\" class=\"headerlink\" title=\"修改Logo字体\"></a>修改Logo字体</h2><p>在 themes/next/source/css/_custom/custom.styl 中添加如下代码：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">@font-face &#123;</span><br><span class=\"line\">    font-family: Zitiming;</span><br><span class=\"line\">    src: url(&#39;&#x2F;fonts&#x2F;Zitiming.ttf&#39;);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\">.site-title &#123;</span><br><span class=\"line\">    font-size: 40px !important;</span><br><span class=\"line\">    font-family: &#39;Zitiming&#39; !important;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"设置博客背景\"><a href=\"#设置博客背景\" class=\"headerlink\" title=\"设置博客背景\"></a>设置博客背景</h2><p>将想要的背景图片放入 themes/next/source/images。打开 themes/next/source/css/ _custom/custom.styl 文件，这个是 Next 故意留给用户自己个性化定制一些样式的文件，添加以下代码即可：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">body &#123;</span><br><span class=\"line\">    background:url(&#x2F;images&#x2F;yourbackground.jpg);</span><br><span class=\"line\">    background-repeat: no-repeat;</span><br><span class=\"line\">    background-attachment:fixed; &#x2F;&#x2F;不重复</span><br><span class=\"line\">    background-size: cover;      &#x2F;&#x2F;填充</span><br><span class=\"line\">    background-position:50% 50%;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;博客内容透明化</span><br><span class=\"line\">&#x2F;&#x2F;文章内容的透明度设置</span><br><span class=\"line\">.content-wrap &#123;</span><br><span class=\"line\">  opacity: 0.9;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;侧边框的透明度设置</span><br><span class=\"line\">.sidebar &#123;</span><br><span class=\"line\">  opacity: 0.9;</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;菜单栏的透明度设置</span><br><span class=\"line\">.header-inner &#123;</span><br><span class=\"line\">  background: rgba(255,255,255,0.9);</span><br><span class=\"line\">&#125;</span><br><span class=\"line\"></span><br><span class=\"line\">&#x2F;&#x2F;搜索框（local-search）的透明度设置</span><br><span class=\"line\">.popup &#123;</span><br><span class=\"line\">  opacity: 0.9;</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n<ul>\n<li><code>background:url</code> 为图片路径，也可以直接使用链接。</li>\n<li><code>background-repeat</code>：若果背景图片不能全屏，那么是否平铺显示，充满屏幕。</li>\n<li><code>background-attachment</code>：背景是否随着网页上下滚动而滚动，fixed 为固定。</li>\n<li><code>background-size</code>：图片展示大小，这里设置 100%，100% 的意义为：如果背景图片不能全屏，那么是否通过拉伸的方式将背景强制拉伸至全屏显示。</li>\n</ul>\n<p>PS : 其中 <code>header-inner</code> 不能使用 opacity 进行配置。因为 <code>header-inner</code> 包含 <code>header.swig</code> 中的所有内容。若使用 opacity 进行配置，子结点会出很多问题</p>\n<h2 id=\"添加音乐\"><a href=\"#添加音乐\" class=\"headerlink\" title=\"添加音乐\"></a>添加音乐</h2><ul>\n<li><p>选择网易云音乐没有版权的歌曲生成外链播放器；</p>\n</li>\n<li><p>将代码放到<code>./themes/next/layout/_macro/sidebar.swig</code>；</p>\n</li>\n<li><p>修改侧边栏宽度，打开主题配置文件<code>../themes/next/_config.yml</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">sidebar:</span><br><span class=\"line\">  # Sidebar Position.</span><br><span class=\"line\">  position: left</span><br><span class=\"line\">  #position: right</span><br><span class=\"line\"></span><br><span class=\"line\">  # Manual define the sidebar width. If commented, will be default for:</span><br><span class=\"line\">  # Muse | Mist: 320</span><br><span class=\"line\">  # Pisces | Gemini: 240</span><br><span class=\"line\">  width: 300</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"添加近期文章\"><a href=\"#添加近期文章\" class=\"headerlink\" title=\"添加近期文章\"></a>添加近期文章</h2><p>打开<code>next/layout/_macro/sidebar.swig</code> 文件，并在其<code>if theme.links</code> 对应的 <code>endif</code> 后面：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&#123;% if theme.recent_posts %&#125;</span><br><span class=\"line\">    &lt;div class&#x3D;&quot;links-of-blogroll motion-element &#123;&#123; &quot;links-of-blogroll-&quot; + theme.recent_posts_layout  &#125;&#125;&quot;&gt;</span><br><span class=\"line\">      &lt;div class&#x3D;&quot;links-of-blogroll-title&quot;&gt;</span><br><span class=\"line\">        &lt;!-- modify icon to fire by szw --&gt;</span><br><span class=\"line\">        &lt;i class&#x3D;&quot;fa fa-history fa-&#123;&#123; theme.recent_posts_icon | lower &#125;&#125;&quot; aria-hidden&#x3D;&quot;true&quot;&gt;&lt;&#x2F;i&gt;</span><br><span class=\"line\">        &#123;&#123; theme.recent_posts_title &#125;&#125;</span><br><span class=\"line\">      &lt;&#x2F;div&gt;</span><br><span class=\"line\">      &lt;ul class&#x3D;&quot;links-of-blogroll-list&quot;&gt;</span><br><span class=\"line\">-        &#123;% set posts &#x3D; site.posts.sort(&#39;-date&#39;) %&#125;</span><br><span class=\"line\">+        &#123;% set posts &#x3D; site.posts.sort(&#39;-date&#39;).toArray() %&#125;   # 后面修改很重要</span><br><span class=\"line\">        &#123;% for post in posts.slice(&#39;0&#39;, &#39;5&#39;) %&#125;</span><br><span class=\"line\">          &lt;li&gt;</span><br><span class=\"line\">            &lt;a href&#x3D;&quot;&#123;&#123; url_for(post.path) &#125;&#125;&quot; title&#x3D;&quot;&#123;&#123; post.title &#125;&#125;&quot; target&#x3D;&quot;_blank&quot;&gt;&#123;&#123; post.title &#125;&#125;&lt;&#x2F;a&gt;</span><br><span class=\"line\">          &lt;&#x2F;li&gt;</span><br><span class=\"line\">        &#123;% endfor %&#125;</span><br><span class=\"line\">      &lt;&#x2F;ul&gt;</span><br><span class=\"line\">    &lt;&#x2F;div&gt;</span><br><span class=\"line\">&#123;% endif %&#125;</span><br></pre></td></tr></table></figure>\n<p>为了配置方便，在主题的<code>_config.yml</code> 中添加了几个变量，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">recent_posts_title: 近期文章</span><br><span class=\"line\">recent_posts_layout: block</span><br><span class=\"line\">recent_posts: true</span><br></pre></td></tr></table></figure>\n<h2 id=\"back2top-标签\"><a href=\"#back2top-标签\" class=\"headerlink\" title=\"back2top 标签\"></a>back2top 标签</h2><p>安装插件：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-cake-moon-menu --save</span><br></pre></td></tr></table></figure>\n<p>然后在站点配置文件<code>_config.yml</code> 中添加以下代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">moon_menu:</span><br><span class=\"line\">  back2top:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    icon: fa fa-chevron-up</span><br><span class=\"line\">    func: back2top</span><br><span class=\"line\">    order: -1</span><br><span class=\"line\">  back2bottom:</span><br><span class=\"line\">    enable: true</span><br><span class=\"line\">    icon: fa fa-chevron-down</span><br><span class=\"line\">    func: back2bottom</span><br><span class=\"line\">    order: -2</span><br></pre></td></tr></table></figure>\n<h2 id=\"简体繁体一键切换\"><a href=\"#简体繁体一键切换\" class=\"headerlink\" title=\"简体繁体一键切换\"></a>简体繁体一键切换</h2><ul>\n<li>首先，我们可以在<a href=\"https://tding.top/js/tw_cn.js\">这里</a>右键另存下载简繁字体切换所需的 <code>tw_cn.js</code> 文件，我们把这个文件放到 <code>~/themes/next/source/js</code> 文件夹下。</li>\n<li><strong>修改模板</strong>，在我们想要显示简繁转换按钮的地方添加如下代码。例如，我在 NexT 主题的布局文件 <code>~/themes/next/layout/_partials/footer.swig</code> 里添加了如下代码：</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">&lt;div class&#x3D;&quot;translate-style&quot;&gt;</span><br><span class=\"line\">繁&#x2F;简：&lt;a id&#x3D;&quot;translateLink&quot; href&#x3D;&quot;javascript:translatePage();&quot;&gt;繁体</span><br><span class=\"line\">&lt;&#x2F;a&gt;</span><br><span class=\"line\">&lt;&#x2F;div&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot; src&#x3D;&quot;&#x2F;js&#x2F;tw_cn.js&quot;&gt;&lt;&#x2F;script&gt;</span><br><span class=\"line\">&lt;script type&#x3D;&quot;text&#x2F;javascript&quot;&gt;</span><br><span class=\"line\">var defaultEncoding &#x3D; 2; &#x2F;&#x2F;网站编写字体是否繁体，1-繁体，2-简体</span><br><span class=\"line\">var translateDelay &#x3D; 0; &#x2F;&#x2F;延迟时间,若不在前, 要设定延迟翻译时间, 如100表示100ms,默认为0</span><br><span class=\"line\">var cookieDomain &#x3D; &quot;https:&#x2F;&#x2F;tding.top&#x2F;&quot;; &#x2F;&#x2F;Cookie地址, 一定要设定, 通常为你的网址</span><br><span class=\"line\">var msgToTraditionalChinese &#x3D; &quot;繁体&quot;; &#x2F;&#x2F;此处可以更改为你想要显示的文字</span><br><span class=\"line\">var msgToSimplifiedChinese &#x3D; &quot;简体&quot;; &#x2F;&#x2F;同上，但两处均不建议更改</span><br><span class=\"line\">var translateButtonId &#x3D; &quot;translateLink&quot;; &#x2F;&#x2F;默认互换id</span><br><span class=\"line\">translateInitilization();</span><br><span class=\"line\">&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加pdf文件在文章内部\"><a href=\"#添加pdf文件在文章内部\" class=\"headerlink\" title=\"添加pdf文件在文章内部\"></a>添加pdf文件在文章内部</h2><p>安装插件：</p>\n<p>npm install —save hexo-pdf</p>\n<p>修改主题配置文件:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">pdf:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  # Default height</span><br><span class=\"line\">  height: 500px</span><br><span class=\"line\">  pdfobject:</span><br><span class=\"line\">    # Use 2.1.1 as default, jsdelivr as default CDN, works everywhere even in China</span><br><span class=\"line\">    cdn: &#x2F;&#x2F;cdn.jsdelivr.net&#x2F;npm&#x2F;pdfobject@2.1.1&#x2F;pdfobject.min.js</span><br><span class=\"line\">    # CDNJS, provided by cloudflare, maybe the best CDN, but not works in China</span><br><span class=\"line\">    #cdn: &#x2F;&#x2F;cdnjs.cloudflare.com&#x2F;ajax&#x2F;libs&#x2F;pdfobject&#x2F;2.1.1&#x2F;pdfobject.min.js</span><br></pre></td></tr></table></figure>\n<p>文章内部添加代码:</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">外部链接：</span><br><span class=\"line\">&#123;% pdf http:&#x2F;&#x2F;7xov2f.com1.z0.glb.clouddn.com&#x2F;bash_freshman.pdf %&#125;</span><br><span class=\"line\">本地连接：把pdf放置到source文件夹下pdf文件夹下</span><br><span class=\"line\">&#123;% pdf &#x2F;pdf&#x2F;文件名.pdf %&#125;</span><br></pre></td></tr></table></figure>\n<h2 id=\"添加打赏功能\"><a href=\"#添加打赏功能\" class=\"headerlink\" title=\"添加打赏功能\"></a>添加打赏功能</h2><p>打开<strong>theme/next/_config.yml</strong>文件，对其内容做如下修改。图片保存在 <strong>next/source/images</strong> 目录</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">reward_settings:</span><br><span class=\"line\">  # If true, reward will be displayed in every article by default.</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  animation: false</span><br><span class=\"line\">  #comment: 赞赏一瓶优酸乳</span><br><span class=\"line\"></span><br><span class=\"line\">reward:</span><br><span class=\"line\">  wechatpay: &#x2F;images&#x2F;wechatpay.png</span><br><span class=\"line\">  alipay: &#x2F;images&#x2F;alipay.png</span><br></pre></td></tr></table></figure>\n<h1 id=\"发布文章\"><a href=\"#发布文章\" class=\"headerlink\" title=\"发布文章\"></a>发布文章</h1><h2 id=\"使用Rmarkdown写文章\"><a href=\"#使用Rmarkdown写文章\" class=\"headerlink\" title=\"使用Rmarkdown写文章\"></a>使用Rmarkdown写文章</h2><p>直接使用kinr包的knit函数将Rmd转化成md格式，但是尤其注意一定要把图片放在同目录下的figure文件夹中。<br>在Hexo系统下的source/_posts创建一个test.Rmd文件。在R里面运行下面两行命令：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">setwd(<span class=\"string\">&quot;E:/02GDL/Blog/ShuilinLiao.github.io/source/_posts&quot;</span>) <span class=\"comment\">#这里写上你自己_posts所在的路径  </span></span><br><span class=\"line\">knitr::knit(input = <span class=\"string\">&quot;boxplot.Rmd&quot;</span>) <span class=\"comment\">#没有安装包的请加载knitr包</span></span><br><span class=\"line\"><span class=\"comment\"># rmarkdown::render(&#x27;boxplot.Rmd&#x27;, output_file=&#x27;boxplot.md&#x27;, output_dir=&#x27;boxplot&#x27;)</span></span><br></pre></td></tr></table></figure>\n<p>hexo所在目录，<code>hexo g</code>, <code>hexo s</code> 预览一下效果</p>\n<h2 id=\"插入图片\"><a href=\"#插入图片\" class=\"headerlink\" title=\"插入图片\"></a>插入图片</h2><p>默认情况下，在 hexo 中新建一篇<code>markdown博文</code>，在文章中插入本地图片，再部署到 github 上面，是无法显示这些图片的。<br>首先找到博客根目录下面的<code>_config.yml</code>文件，修改<code>post_assrt_folder</code>的值为<code>true</code>.<br>接着 git bash 切换到博客根目录下面，安装第三方插件<code>hexo-assrt-image</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n<p>接着<code>hexo new &quot;文章名&quot;</code> 新建一篇文章，会发现<code>source/_posts/</code>目录下面会生成一个和 markdown 文件同名的文件夹。再将当前这篇文章中需要插入的图片放到这个文件夹中，再到 markdown 中引用该文件夹中的图片，最后<code>hexo g</code> -&gt; <code>hexo d</code>，就可以正常的查看这些图片了。</p>\n<h3 id=\"本地引用\"><a href=\"#本地引用\" class=\"headerlink\" title=\"本地引用\"></a>本地引用</h3><h4 id=\"绝对路径\"><a href=\"#绝对路径\" class=\"headerlink\" title=\"绝对路径\"></a>绝对路径</h4><p>当Hexo项目中只用到少量图片时，可以将图片统一放在source/images文件夹中，通过markdown语法访问它们。<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># source&#x2F;images&#x2F;image.jpg</span><br><span class=\"line\">![](&#x2F;images&#x2F;image.jpg)</span><br></pre></td></tr></table></figure><br>图片既可以在首页内容中访问到，也可以在文章正文中访问到。</p>\n<h4 id=\"相对路径\"><a href=\"#相对路径\" class=\"headerlink\" title=\"相对路径\"></a>相对路径</h4><ul>\n<li>图片除了可以放在统一的<code>images</code>文件夹中，还可以放在文章自己的目录中。文章的目录可以通过配置<code>_config.yml</code>来生成。</li>\n</ul>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># _config.yml</span><br><span class=\"line\">post_asset_folder: true</span><br></pre></td></tr></table></figure>\n<p>将<code>_config.yml</code>文件中的配置项<code>post_asset_folder</code>设为<code>true</code>后，执行命令<code>$ hexo new post_name</code>，在<code>source/_posts</code>中会生成文章<code>post_name.md</code>和同名文件夹<code>post_name</code>。将图片资源放在<code>post_name</code>中，文章就可以使用相对路径引用图片资源了。</p>\n<ul>\n<li><p>git bash安装插件</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm install https:&#x2F;&#x2F;github.com&#x2F;7ym0n&#x2F;hexo-asset-image --save</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>使用标签插件语法。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\"># _posts&#x2F;post_name&#x2F;image.jpg</span><br><span class=\"line\">&#123;% asset_img image.jpg This is an image %&#125;</span><br></pre></td></tr></table></figure>\n<p>其中test.jpg就是你要引用的图片，我这里就是image.jpg，后面的This is an test image是图片描述，可以自己修改。</p>\n</li>\n</ul>\n<h2 id=\"渲染公式\"><a href=\"#渲染公式\" class=\"headerlink\" title=\"渲染公式\"></a>渲染公式</h2><p>安装渲染器<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">npm uninstall hexo-renderer-marked --save </span><br><span class=\"line\">npm install hexo-renderer-kramed --save</span><br></pre></td></tr></table></figure></p>\n<p>修改配置文件<br>到主题配置文件中<code>_config.yml</code>，找到<code>mathjax</code>，将其修改为<code>true</code>即可</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">mathjax:</span></span><br><span class=\"line\">  <span class=\"attr\">enable:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<p>文章渲染标签<br>为加快渲染速度，渲染器只会在标签中有mathjax: true的文章中使用利用mathjax渲染。</p>\n<figure class=\"highlight yaml\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"attr\">title:</span> <span class=\"string\">燃料消耗问题</span></span><br><span class=\"line\"><span class=\"attr\">date:</span> <span class=\"number\">2020-01-21 17:55:00</span></span><br><span class=\"line\"><span class=\"attr\">categories:</span> <span class=\"string\">算法</span></span><br><span class=\"line\"><span class=\"attr\">comments:</span> <span class=\"literal\">true</span></span><br><span class=\"line\"><span class=\"attr\">mathjax:</span> <span class=\"literal\">true</span></span><br></pre></td></tr></table></figure>\n<h1 id=\"添加评论和留言板功能\"><a href=\"#添加评论和留言板功能\" class=\"headerlink\" title=\"添加评论和留言板功能\"></a>添加评论和留言板功能</h1><h2 id=\"注册-Leancloud-账号\"><a href=\"#注册-Leancloud-账号\" class=\"headerlink\" title=\"注册 Leancloud 账号\"></a>注册 Leancloud 账号</h2><p>在leancloud官网注册一个账号</p>\n<p>注册完成后进入app <code>控制面板-&gt;创建应用-&gt;创建开发版应用</code>。</p>\n<p>接下来我们配置一下我们的leancloud。点击 <code>设置-&gt;安全中心-&gt;Web 安全域名</code>，输入你的域名来保证其他人就算获取了你的appid也没办法操作你的数据库。例如，输入 <a href=\"https://shuilinliao.github.io/\">https://shuilinliao.github.io/</a></p>\n<p>接下来点击应用keys获取你的appid和appkey。</p>\n<h2 id=\"在next主题中配置valine\"><a href=\"#在next主题中配置valine\" class=\"headerlink\" title=\"在next主题中配置valine\"></a>在next主题中配置valine</h2><p>打开 _config.next.yml，找到comments栏目并开启valine。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">comments:</span><br><span class=\"line\">  active: valine</span><br></pre></td></tr></table></figure>\n<p>往下滑动进入valine设置栏，开启valine并填入你的appid和appkey。</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">valine:</span><br><span class=\"line\">  enable: true</span><br><span class=\"line\">  appId:  # Your leancloud application appid</span><br><span class=\"line\">  appKey:  # Your leancloud application appkey</span><br><span class=\"line\">  placeholder: &quot;输入你的评论\\n昵称为必填项目，输入QQ号可以直接获取用户名和头像，并且省去了填写邮箱的麻烦！\\n虽然email不是必选，但是填写了email可以收到推送通知哦！&quot; # Comment box placeholder</span><br><span class=\"line\">  avatar: &quot;&quot; # Gravatar style</span><br><span class=\"line\">  meta: [nick, mail] # Custom comment header</span><br><span class=\"line\">  pageSize: 10 # Pagination size</span><br><span class=\"line\">  lang: # Language, available values: en, zh-cn</span><br><span class=\"line\">  visitor: true # Article reading statistic</span><br><span class=\"line\">  comment_count: true # If false, comment count will only be displayed in post page, not in home page</span><br><span class=\"line\">  recordIP: true # Whether to record the commenter IP</span><br><span class=\"line\">  serverURLs: # When the custom domain name is enabled, fill it in here (it will be detected automatically by default, no need to fill in)</span><br><span class=\"line\">  enableQQ: true # Whether to enable the Nickname box to automatically get QQ Nickname and QQ Avatar</span><br><span class=\"line\">  requiredFields: [nick] # Set required fields: [nick] | [nick, mail]</span><br></pre></td></tr></table></figure>\n<p>这里稍微解释一下各个参数的用途。<br>placeholder是在用户未输入任何参数时默认显示的值；<br>avatar是默认用户头像，参考<strong><a href=\"https://link.zhihu.com/?target=https%3A//valine.js.org/avatar.html\">link</a></strong>；<br>meta是可以选择的用户信息栏；<br>enableQQ可以自动匹配用户在nick栏目的输入，若是QQ，直接拉取用户的QQ头像和昵称作为评论使用，推荐开启（目前有个bug，若用户QQ昵称小于三个字符，可能出现拉取失败，等待大佬更新）；<br>其他的配置可以参考<strong><a href=\"https://link.zhihu.com/?target=https%3A//valine.js.org/configuration.html\">link</a></strong>。</p>\n<h2 id=\"在菜单栏添加留言板\"><a href=\"#在菜单栏添加留言板\" class=\"headerlink\" title=\"在菜单栏添加留言板\"></a>在菜单栏添加留言板</h2><p>添加一个新的page</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo new page guestbook</span><br></pre></td></tr></table></figure>\n<p>进入 source/guestbook/index.md。加入你想显示的内容，如：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">---</span><br><span class=\"line\">title: 留言板</span><br><span class=\"line\">date: 2020-09-13 13:34:29</span><br><span class=\"line\">---</span><br><span class=\"line\"># 欢迎来到我的博客！</span><br><span class=\"line\"></span><br><span class=\"line\">&gt; 欢迎在这里留言！任何问题都可以在这里留言，我会及时回复的，添加email可以获得更快的回复速度，在nickname栏目输入QQ号可以直接获取你的QQ头像。</span><br></pre></td></tr></table></figure>\n<p>进入 _config.next.yml， 找到menu栏目，添加留言板功能：</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  guestbook: /guestbook/ || fa fa-book</span><br></pre></td></tr></table></figure>\n<p>图标支持font awesome，可以按自己喜好修改。</p>\n<p>如果有多语言支持需求，可以更改 themes/next/languages 下对应语言的翻译。</p>\n<p>en.yml:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  guestbook: guestbook</span><br></pre></td></tr></table></figure>\n<p>zh-CN.yml:</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">menu:</span><br><span class=\"line\">  guestbook: 留言板</span><br></pre></td></tr></table></figure>\n<p>重新生成页面即可</p>\n<figure class=\"highlight text\"><table><tr><td class=\"code\"><pre><span class=\"line\">$ hexo clean</span><br><span class=\"line\">$ hexo g -d</span><br></pre></td></tr></table></figure>\n<p>注意：在跟着上面的流程配置的时候，已经在首页配置过message功能，所以需要在站点的config文件和next主题的config文件中，把menu中关于原来的message功能删除。</p>\n<h1 id=\"参考链接\"><a href=\"#参考链接\" class=\"headerlink\" title=\"参考链接\"></a>参考链接</h1><ol>\n<li><a href=\"https://zhuanlan.zhihu.com/p/50787870\">Hexo+Github博客教程3</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/50787832\">Hexo+Github博客教程2</a></li>\n<li><a href=\"https://ohlia.github.io/Wiki-site/wiki/Hexo/encrypt-hexo-post/\">hexo文章加密</a></li>\n<li><a href=\"https://zouhua.top/archives/e635378a.html\">Hexo-Next主题美化 - hua</a></li>\n<li><a href=\"https://www.dazhuanlan.com/2019/12/24/5e020032e3304/\">hexo下部署Rmd文档</a></li>\n<li><a href=\"https://tanjuntao.github.io/2019/04/28/%E8%A7%A3%E5%86%B3hexo%E4%B8%AD%E5%8F%91%E5%B8%83%E6%96%87%E7%AB%A0%E5%90%8E%E5%9B%BE%E7%89%87%E6%97%A0%E6%B3%95%E6%98%BE%E7%A4%BA%E7%9A%84%E9%97%AE%E9%A2%98/\">解决hexo中发布文章后图片无法显示的问题</a></li>\n<li><a href=\"https://yanyinhong.github.io/2017/05/02/How-to-insert-image-in-hexo-post/\">Hexo博客搭建之在文章中插入图片</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/257707609\">hexo + next8.0开启Valine评论系统及添加留言板功能</a></li>\n</ol>\n","categories":["Tools","Blog"],"tags":["Hexo","Github","Blog"]},{"title":"P值校正","url":"/2020/12/04/2020-12-04-p_adjust/","content":"<p>多重比较校正方法，并在R中实现。<br><a id=\"more\"></a></p>\n<h1 id=\"为什么要进行多重比较校正\"><a href=\"#为什么要进行多重比较校正\" class=\"headerlink\" title=\"为什么要进行多重比较校正\"></a>为什么要进行多重比较校正</h1><p><strong>当在同一个数据集上进行多次统计检验时，就需要进行多重比较校正。</strong>举个简单的例子，A、B两组被试，我们从每个被试身上得出10个指标。如果我们要研究A、B两组被试的某一个指标是否存在显著差异，那么此时我们只做一次统计分析就行；假设这个指标的p值小于0.05，我们会认为这个指标在A、B两组之间存在显著差异，此时，我们犯错的概率（或者称为假阳性率）是5%。<strong>假设我们把这10个指标都进行了统计分析，即使每个独立的指标的p值都小于0.05，此时我们犯错的概率不再是5%，至少有一个false positive的概率是1－（0.95）^10=0.4013，也就是说此时我们犯错的概率达到40%多，这在统计学上是不可接受的</strong>。因此，需要进行多重比较校正。</p>\n<p>因为假设检验是对<strong>原假设有利</strong>。（对，因为它本质上是一个反证法）。思想：</p>\n<ol>\n<li><strong>先预设原假设是成立的</strong></li>\n<li>那么看看当前的情况在原假设的条件下是不是极小概率事件，比如发生概率&lt;5%</li>\n<li>如果是的话。那原假设就很可疑，迫不得已认为它不成立</li>\n<li>不是的话。那原假设就凑活着用吧</li>\n<li>如果你多次使用假设检验，还好死不死全都通过了的话！<br>你的逻辑链条里将出现大量“就凑活着用吧”的命题，当然不靠谱啦！</li>\n</ol>\n<h1 id=\"矫正方法\"><a href=\"#矫正方法\" class=\"headerlink\" title=\"矫正方法\"></a>矫正方法</h1><p>在多重假设检验中，有不同的控制指标，包括：</p>\n<ul>\n<li>Per comparison error rate (PCER, 比较误差率): Type I Error的期望数目比总假设数</li>\n<li>Family-wise error rate (FWER): 至少出现1次Type I Error </li>\n<li>False discovery rate (FDR, 错误发现率): Type I Error在总拒绝数量中的比率（错误拒绝率）</li>\n<li>Positive false discovery rate (pFDR, 阳性错误发现率): 错误发现的比率<br>在实际应用中，我们一般希望减少Type I Error出现（错误拒绝H0）的可能，因此主要考虑FWER和FDR这两个数据。FWER指标有<strong>Bonferroni 校正</strong>和<strong>Holm’s方法</strong>；FDR指标有Benjamin and Hochberg (BH)方法。</li>\n</ul>\n<h2 id=\"基于Bonferroni-法的校正过程\"><a href=\"#基于Bonferroni-法的校正过程\" class=\"headerlink\" title=\"基于Bonferroni 法的校正过程\"></a>基于<strong>Bonferroni 法</strong>的校正过程</h2><h3 id=\"算法\"><a href=\"#算法\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>Family-wise error rate ：</p>\n<script type=\"math/tex; mode=display\">\n\\alpha_{FW} = 1-(1-\\alpha_{PC})^c</script><p>c为总检验次数（即P值的个数）; α<sub>PC</sub>为每次比较中的错误率（通常为0.05）。所以在3次比较中，α<sub>FW</sub>的值为 1-(1-0.05)^3 = 0.143。<br>有两种方法进行矫正（如下图）：</p>\n<ol>\n<li>Approach 1： 将原始的p-value和 α<sub>PC</sub> /3 = 0.05/3 = 0.017 比较，原始P value小于 矫正后的p-value（如0.017）即可认为是显著差异的p-value；</li>\n<li>Approach 2：将原始的p-value和总检验次数（如3）相乘，得到矫正后的p-value，如果矫正后的p-value可认为是显著差异的p-value；<img src=\"/2020/12/04/2020-12-04-p_adjust/1607063160.jpg\" class title=\"This is an test image\">\n</li>\n</ol>\n<p>如果原始的P值为0.05，检验次数为10000次，那么在Bonferroni 校正中，校正的阈值就等于5%/ 10000 = 0.000005，所有P值超过0.00005的结果都被认为是不可靠的。这样的话假阳性结果在10000次检验中出现的次数为 10000 * 0.000005 =0.5，还不到1次。</p>\n<h3 id=\"优缺点\"><a href=\"#优缺点\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p>Bonferroni 校正法可以称作是“最简单粗暴有效”的校正方法，它拒绝了所有的假阳性结果发生的可能性，通过对p值的阈值进行校正来实现消除假阳性结果。但是这也存在问题：Bonferroni 委实太过严格，被校正后的阈值拒绝的不只有假阳性结果，很多阳性结果也会被它拒绝。</p>\n<h3 id=\"R实现\"><a href=\"#R实现\" class=\"headerlink\" title=\"R实现\"></a>R实现</h3><figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">p=c(<span class=\"number\">0.053</span>,<span class=\"number\">0.001</span>,<span class=\"number\">0.045</span>,<span class=\"number\">0.03</span>,<span class=\"number\">0.02</span>,<span class=\"number\">0.01</span>)</span><br><span class=\"line\">p.adjust(p,<span class=\"string\">&quot;bonferroni&quot;</span>)</span><br><span class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">0.318</span> <span class=\"number\">0.006</span> <span class=\"number\">0.270</span> <span class=\"number\">0.180</span> <span class=\"number\">0.120</span> <span class=\"number\">0.060</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"基于BH法的FDR校正过程\"><a href=\"#基于BH法的FDR校正过程\" class=\"headerlink\" title=\"基于BH法的FDR校正过程\"></a>基于<strong>BH法</strong>的FDR校正过程</h2><h3 id=\"算法-1\"><a href=\"#算法-1\" class=\"headerlink\" title=\"算法\"></a>算法</h3><p>举个例子，我们最开始设定的情况中进行了10000次检验，这次我们设定FDR在一定的范围，如FDR&lt;0.05，如果我们的检验对象为差异表达的基因，那么在10000次检验中假如得到了500个基因，那么这500个基因中的假阳性结果小于 500*5% = 25 个。比较常用的BH发算法如下：</p>\n<ol>\n<li>BH 法需要将总计m次检验的结果按由小到大进行排序，k为其中一次检验结果的P值所对应的排名。</li>\n<li>找到符合原始阈值α的最大的k值，满足P(k)&lt;=α*k/m，认为排名从1到k的所有检验存在显著差异，并计算对应的q值公式为q = p*(m/k)。</li>\n<li><p>举个例子，如果我们有总共六个结果进行FDR校正：</p>\n<img src=\"/2020/12/04/2020-12-04-p_adjust/1607066685.jpg\" class title=\"This is an test image\">\n</li>\n<li><p>按α=0.05进行计算：<br>排名第四的 P (4) = 0.03 &lt; 0.05*4/6 = 0.033，符合要求<br>排名第五的 P (5)= 0.045 &gt; 0.05*5/6 = 0.041，不满足P(k)&lt;=α*k/m，因此在这个列表里排名前四的G2,G6,G5,G4 为具有显著差异的基因。</p>\n</li>\n</ol>\n<p>我们也可以用q值进行FDR校正：</p>\n<ol>\n<li><p>q-value = P * (k/m)</p>\n<img src=\"/2020/12/04/2020-12-04-p_adjust/1607066775.jpg\" class title=\"This is an test image\">\n</li>\n<li><p>排名第五的G3，其q值大于0.05，故G2,G6,G5,G4 为具有显著差异的基因。</p>\n</li>\n</ol>\n<h3 id=\"优缺点-1\"><a href=\"#优缺点-1\" class=\"headerlink\" title=\"优缺点\"></a>优缺点</h3><p>相对Bonferroni 来说，FDR温和得多，这种校正方法不追求完全没有假阳性结果，而是将假阳性结果和真阳性的比例控制在一定范围内。</p>\n<h3 id=\"R实现-1\"><a href=\"#R实现-1\" class=\"headerlink\" title=\"R实现\"></a>R实现</h3><figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">p=c(<span class=\"number\">0.053</span>,<span class=\"number\">0.001</span>,<span class=\"number\">0.045</span>,<span class=\"number\">0.03</span>,<span class=\"number\">0.02</span>,<span class=\"number\">0.01</span>)</span><br><span class=\"line\">p.adjust(p,<span class=\"string\">&quot;BH&quot;</span>)</span><br><span class=\"line\">[<span class=\"number\">1</span>] <span class=\"number\">0.053</span> <span class=\"number\">0.006</span> <span class=\"number\">0.053</span> <span class=\"number\">0.045</span> <span class=\"number\">0.040</span> <span class=\"number\">0.030</span></span><br></pre></td></tr></table></figure>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://www.jianshu.com/p/77f9c858a072\">谈一谈两种常用的多重比较校正方法</a><br><a href=\"https://zhuanlan.zhihu.com/p/95530040\">多重检验，P值校正</a><br><a href=\"https://zhuanlan.zhihu.com/p/31027746\">多重假设检验及其生物学应用</a><br><a href=\"https://zhuanlan.zhihu.com/p/51546651\">多重假设检验：Bonferroni 和 FDR</a><br><a href=\"https://www.youtube.com/watch?v=rMuNniCTsOw\">how2stats - What is the Bonferroni Correction?</a><br><a href=\"https://www.youtube.com/watch?v=K8LQSvtjcEo\">StatQuest - False Discovery Rates, FDR, clearly explained</a></p>\n<p>参考文章如引起任何侵权问题，可以与我<a href=\"mailto:liaoshuilin@outlook.com\">联系</a>，谢谢。</p>\n","categories":["Math","Comparison"],"tags":["p-value","Multiple comparisons"]},{"title":"miRNA-seq生信分析（转生信菜鸟团）","url":"/2020/12/11/2020-12-11-miRNA-seq/","content":"<p>以下内容均为复制生信菜鸟团的内容，为miRNA-seq的分析教程。<br><a id=\"more\"></a> </p>\n<h1 id=\"构建miRNA-seq数据分析环境\"><a href=\"#构建miRNA-seq数据分析环境\" class=\"headerlink\" title=\"构建miRNA-seq数据分析环境\"></a>构建miRNA-seq数据分析环境</h1><p>最近在生信技能树分享了几个miRNA的靶向基因的查询工具，分别是：</p>\n<ul>\n<li><a href=\"https://mp.weixin.qq.com/s/n_UncYeGIQFLneTMK2rTXQ\">microRNAs靶基因数据库哪家强</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/dkVBcls3f0acXtPnFSXeWw\">使用miRNAtap数据源提取miRNA的预测靶基因结果</a></li>\n<li><a href=\"https://mp.weixin.qq.com/s/13m_XmSuFgiLvt3EQhJVOQ\">对miRNA进行go和kegg等功能数据库数据库注释</a></li>\n</ul>\n<p><strong>很多粉丝留言想听miRNA-seq数据分析流程</strong>，主要是上游分析流程，因为下游其实就是表达矩阵分析。跟RNA-seq拿到的counts矩阵是类似的分析策略，只不过是miRNA-seq热度已经过去了，我也仅仅是五年前接触过一次。</p>\n<p>其实miRNA-seq数据上游分析有两个方案，一个是仅仅针对已知的miRNA进行定量，这样的话无需比对到物种参考基因组，仅仅是比对到miRNA序列合集即可。另外一个挖掘新的miRNA，主要是考虑到人类对miRNA的认知的不停的进步。当然，如果你想系统性学习，可以参考<strong>我五年前</strong>在生信菜鸟团<strong>自学miRNA-seq分析系列笔记</strong>：</p>\n<ul>\n<li>自学miRNA-seq分析第八讲~miRNA-mRNA表达相关下游分析 | 生信菜鸟团</li>\n<li>自学miRNA-seq分析第七讲~miRNA样本配对mRNA表达量获取 | 生信菜鸟团</li>\n<li>自学miRNA-seq分析第六讲~miRNA表达量差异分析 | 生信菜鸟团</li>\n<li>自学miRNA-seq分析第五讲~miRNA表达量获取 | 生信菜鸟团</li>\n<li>自学miRNA-seq分析第四讲~测序数据比对 | 生信菜鸟团</li>\n<li>自学miRNA-seq分析第三讲~公共测序数据下载 | 生信菜鸟团</li>\n<li>自学miRNA-seq分析第二讲~学习资料的搜集 | 生信菜鸟团</li>\n<li>自学miRNA-seq分析第一讲~文献选择与解读 | 生信菜鸟团</li>\n</ul>\n<p>当然了，如果你是微信阅读，也可以点击：<a href=\"https://mp.weixin.qq.com/s/USc_aUA_loFLLljXzbmpFg\">一篇文章学会miRNA-seq分析</a></p>\n<h3 id=\"首先下载MIRBASE的MIRNA参考序列文件\"><a href=\"#首先下载MIRBASE的MIRNA参考序列文件\" class=\"headerlink\" title=\"首先下载MIRBASE的MIRNA参考序列文件\"></a>首先下载MIRBASE的MIRNA参考序列文件</h3><p>miRBase是miRNA研究领域最权威的数据库，提供miRNAs序列以及注释查询、定位、发卡序列查询，以及提供命名服务。截止到现在（2020-04-28 ），miRBase 22.1 共收录了271个物种的总共38589 条miRNA信息。其中人类的共收录了1917条pre-miRNA（前体），以及2656条成熟的miRNAs。见：<a href=\"http://www.mirbase.org/\">http://www.mirbase.org/</a></p>\n<p>前体miRNA和成熟的miRNA的区别，前体miRNA长度一般是<strong>70–120 碱基，一般是茎环结果，也就是发夹结构，所以叫做hairpin。成熟之后，一般</strong>22 个碱基。</p>\n<p>在 <a href=\"http://www.mirbase.org/\">http://www.mirbase.org/</a> 对应的ftp网站下载如下所示文件：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/reference/miRNA</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/reference/miRNA</span><br><span class=\"line\">wget ftp://mirbase.org/pub/mirbase/CURRENT/hairpin.fa.gz <span class=\"comment\">##　38589　reads</span></span><br><span class=\"line\">wget ftp://mirbase.org/pub/mirbase/CURRENT/mature.fa.zip <span class=\"comment\">## 48885 reads </span></span><br><span class=\"line\">wget ftp://mirbase.org/pub/mirbase/CURRENT/hairpin.fa.zip</span><br><span class=\"line\">wget ftp://mirbase.org/pub/mirbase/CURRENT/genomes/hsa.gff3</span><br><span class=\"line\">unzip hairpin.fa.zip</span><br><span class=\"line\">unzip mature.fa.zip</span><br><span class=\"line\">grep sapiens mature.fa |wc -l 　<span class=\"comment\"># 2656 </span></span><br><span class=\"line\">grep sapiens hairpin.fa |wc <span class=\"comment\"># 1917</span></span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\">## Homo sapiens</span></span><br><span class=\"line\">perl -alne <span class=\"string\">&#x27;&#123;if(/^&gt;/)&#123;if(/Homo/)&#123;$tmp=1&#125;else&#123;$tmp=0&#125;&#125;;next if $tmp!=1;s/U/T/g if !/&gt;/;print &#125;&#x27;</span> hairpin.fa &gt; hairpin.human.fa</span><br><span class=\"line\">perl -alne <span class=\"string\">&#x27;&#123;if(/^&gt;/)&#123;if(/Homo/)&#123;$tmp=1&#125;else&#123;$tmp=0&#125;&#125;;next if $tmp!=1;s/U/T/g if !/&gt;/;print &#125;&#x27;</span> mature.fa &gt; mature.human.fa</span><br><span class=\"line\"><span class=\"comment\"># 这里值得一提的是miRBase数据库下载的序列，居然都是用U表示的，也就是说就是miRNA序列，而不是转录成该miRNA的基因序列，而我们测序的都是基因序列。</span></span><br></pre></td></tr></table></figure>\n<p>最后得到的文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">5.9M Mar 12 2018 hairpin.fa</span><br><span class=\"line\">1.5M Apr 29 15:09 hairpin.fa.gz</span><br><span class=\"line\">1.5M Apr 29 15:11 hairpin.fa.zip</span><br><span class=\"line\">263K Apr 29 15:13 hairpin.human.fa</span><br><span class=\"line\">523K Apr 29 15:11 hsa.gff3</span><br><span class=\"line\">3.7M Mar 12 2018 mature.fa</span><br><span class=\"line\">786K Apr 29 15:09 mature.fa.zip</span><br><span class=\"line\">196K Apr 29 15:13 mature.human.fa</span><br></pre></td></tr></table></figure>\n<p>构建miRNA-seq数据分析环境只需要使用上面的的文件即可。</p>\n<h3 id=\"然后使用CONDA配置好软件环境\"><a href=\"#然后使用CONDA配置好软件环境\" class=\"headerlink\" title=\"然后使用CONDA配置好软件环境\"></a>然后使用CONDA配置好软件环境</h3><p>仍然是参考我五年前整理的流程，使用bowtie软件和<strong>SHRiMP</strong>软件进行比对，然后<strong>fastx_toolkit 和fastqc</strong>进行质量控制。</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">conda create -n miRNA </span><br><span class=\"line\">conda activate miRNA </span><br><span class=\"line\">conda install -y -c bioconda hisat2 bowtie samtools fastp bowtie2 fastx_toolkit fastqc</span><br><span class=\"line\"><span class=\"comment\"># sra-toolkits,subreads 也可以一并下载 </span></span><br><span class=\"line\"><span class=\"comment\"># conda search fastx_toolkit</span></span><br><span class=\"line\"><span class=\"comment\"># 耗费约1.2G的磁盘空间</span></span><br></pre></td></tr></table></figure>\n<p>因为<strong>SHRiMP</strong>软件太多年没有更新，所以放弃它，反正比对这个过程，有bowtie就ok了。</p>\n<h3 id=\"针对MIRBASE数据库下载的序列构建BOWTIE索引\"><a href=\"#针对MIRBASE数据库下载的序列构建BOWTIE索引\" class=\"headerlink\" title=\"针对MIRBASE数据库下载的序列构建BOWTIE索引\"></a>针对MIRBASE数据库下载的序列构建BOWTIE索引</h3><p>需要注意的是<strong>bowtie和bowtie2</strong>不一样哦：</p>\n<ul>\n<li><a href=\"http://bowtie-bio.sourceforge.net/index.shtml\">http://bowtie-bio.sourceforge.net/index.shtml</a></li>\n<li><a href=\"http://bowtie-bio.sourceforge.net/bowtie2/index.shtml\">http://bowtie-bio.sourceforge.net/bowtie2/index.shtml</a></li>\n</ul>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">bowtie-build mature.human.fa hsa-mature-bowtie-index</span><br><span class=\"line\">bowtie-build hairpin.human.fa hsa-hairpin-bowtie-index</span><br></pre></td></tr></table></figure>\n<p>得到的文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">4.2M Apr 29 15:42 hsa-hairpin-bowtie-index.1.ebwt</span><br><span class=\"line\"> 20K Apr 29 15:42 hsa-hairpin-bowtie-index.2.ebwt</span><br><span class=\"line\"> 17K Apr 29 15:42 hsa-hairpin-bowtie-index.3.ebwt</span><br><span class=\"line\"> 39K Apr 29 15:42 hsa-hairpin-bowtie-index.4.ebwt</span><br><span class=\"line\">4.2M Apr 29 15:42 hsa-hairpin-bowtie-index.rev.1.ebwt</span><br><span class=\"line\"> 20K Apr 29 15:42 hsa-hairpin-bowtie-index.rev.2.ebwt</span><br><span class=\"line\">4.2M Apr 29 15:41 hsa-mature-bowtie-index.1.ebwt</span><br><span class=\"line\">7.1K Apr 29 15:41 hsa-mature-bowtie-index.2.ebwt</span><br><span class=\"line\"> 24K Apr 29 15:41 hsa-mature-bowtie-index.3.ebwt</span><br><span class=\"line\"> 15K Apr 29 15:41 hsa-mature-bowtie-index.4.ebwt</span><br><span class=\"line\">4.2M Apr 29 15:41 hsa-mature-bowtie-index.rev.1.ebwt</span><br><span class=\"line\">7.1K Apr 29 15:41 hsa-mature-bowtie-index.rev.2.ebwt</span><br></pre></td></tr></table></figure>\n<h3 id=\"下载测试数据\"><a href=\"#下载测试数据\" class=\"headerlink\" title=\"下载测试数据\"></a>下载测试数据</h3><p>这里我们仍然是使用 RNA expression profiling of human iPSC-derived cardiomyocytes in a cardiac hypertrophy model. <em>PLoS One</em> 2014;9(9):e108051. PMID: <a href=\"https://www.ncbi.nlm.nih.gov/pubmed/25255322\">25255322</a> 文章里面的 <a href=\"https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE60292\">https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE60292</a> 数据集，如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">GSM1470353 control-CM, experiment1</span><br><span class=\"line\">GSM1470354 ET1-CM, experiment1</span><br><span class=\"line\">GSM1470355 control-CM, experiment2</span><br><span class=\"line\">GSM1470356 ET1-CM, experiment2</span><br><span class=\"line\">GSM1470357 control-CM, experiment3</span><br><span class=\"line\">GSM1470358 ET1-CM, experiment3</span><br></pre></td></tr></table></figure>\n<p>对应的</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SRR1542714</span><br><span class=\"line\">SRR1542715</span><br><span class=\"line\">SRR1542716</span><br><span class=\"line\">SRR1542717</span><br><span class=\"line\">SRR1542718</span><br><span class=\"line\">SRR1542719</span><br></pre></td></tr></table></figure>\n<p>仍然是参考：<a href=\"https://mp.weixin.qq.com/s/USc_aUA_loFLLljXzbmpFg\">一篇文章学会miRNA-seq分析</a>，简单看看规律</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">ftp:&#x2F;&#x2F;ftp.sra.ebi.ac.uk&#x2F;vol1&#x2F;srr&#x2F;SRR154&#x2F;004&#x2F;SRR1542714； ftp:&#x2F;&#x2F;ftp.sra.ebi.ac.uk&#x2F;vol1&#x2F;fastq&#x2F;SRR154&#x2F;004&#x2F;SRR1542714&#x2F;SRR1542714.fastq.gz</span><br><span class=\"line\"># 从14到19</span><br><span class=\"line\"># 可以对这6个样本，分开prefetch</span><br><span class=\"line\">~&#x2F;biosoft&#x2F;sratoolkit&#x2F;sratoolkit.2.8.2-1-centos_linux64&#x2F;bin&#x2F;prefetch SRR1542714</span><br></pre></td></tr></table></figure>\n<p>脚本如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mkdir -p ~/reference/miRNA</span><br><span class=\"line\"><span class=\"built_in\">cd</span> ~/reference/miRNA </span><br><span class=\"line\"><span class=\"comment\"># step1 : download raw data</span></span><br><span class=\"line\">mkdir miRNA_test &amp;&amp; <span class=\"built_in\">cd</span> miRNA_test</span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;14..19&#125; |sed <span class=\"string\">&#x27;s/ /\\n/g&#x27;</span> |<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> id; \\</span><br><span class=\"line\"><span class=\"keyword\">do</span> (~/biosoft/sratoolkit/sratoolkit.2.8.2-1-centos_linux64/bin/prefetch SRR15427<span class=\"variable\">$&#123;id&#125;</span> ) ;\\</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\"># 下面是另外一个课题，可以参考比较</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;44..59&#125; |sed <span class=\"string\">&#x27;s/ /\\n/g&#x27;</span> |<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> id; \\</span><br><span class=\"line\"><span class=\"keyword\">do</span> (~/biosoft/sratoolkit/sratoolkit.2.8.2-1-centos_linux64/bin/prefetch SRR77077<span class=\"variable\">$&#123;id&#125;</span> ) ;\\</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\"># 另外，这样的下载方式，在中国大陆会非常慢！！！</span></span><br><span class=\"line\"><span class=\"comment\"># 建议换成aspera哈</span></span><br></pre></td></tr></table></figure>\n<p>得到的<strong>sra文件</strong>如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">33M Apr 29 16:07 SRR1542714.sra</span><br><span class=\"line\">31M Apr 29 16:07 SRR1542715.sra</span><br><span class=\"line\">50M Apr 29 16:07 SRR1542716.sra</span><br><span class=\"line\">24M Apr 29 16:07 SRR1542717.sra</span><br><span class=\"line\">52M Apr 29 16:07 SRR1542718.sra</span><br><span class=\"line\">34M Apr 29 16:07 SRR1542719.sra</span><br></pre></td></tr></table></figure>\n<p>然后批量<strong>转为fq文件</strong>， 代码如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">dump=/home/yb77613/biosoft/sratoolkit/sratoolkit.2.8.2-1-centos_linux64/bin/fastq-dump</span><br><span class=\"line\"><span class=\"built_in\">echo</span> &#123;14..19&#125; |sed <span class=\"string\">&#x27;s/ /\\n/g&#x27;</span> |<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> id; \\</span><br><span class=\"line\"><span class=\"keyword\">do</span> ( <span class=\"variable\">$dump</span> -O ./ --gzip --split-3 SRR15427<span class=\"variable\">$&#123;id&#125;</span> ) ;\\</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">50M Apr 29 16:14 SRR1542714.fastq.gz</span><br><span class=\"line\">47M Apr 29 16:15 SRR1542715.fastq.gz</span><br><span class=\"line\">75M Apr 29 16:15 SRR1542716.fastq.gz</span><br><span class=\"line\">35M Apr 29 16:15 SRR1542717.fastq.gz</span><br><span class=\"line\">81M Apr 29 16:16 SRR1542718.fastq.gz</span><br><span class=\"line\">50M Apr 29 16:16 SRR1542719.fastq.gz</span><br></pre></td></tr></table></figure>\n<h3 id=\"质控和清洗测序数据\"><a href=\"#质控和清洗测序数据\" class=\"headerlink\" title=\"质控和清洗测序数据\"></a>质控和清洗测序数据</h3><p>清洗前后，都走一下fastqc图表，清洗主要是fastx_toolkit修剪，代码如下：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls *gz |<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> id</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$id</span> </span><br><span class=\"line\"><span class=\"comment\"># fastqc $id </span></span><br><span class=\"line\">zcat <span class=\"variable\">$id</span>| fastq_quality_filter -v -q 20 -p 80 -Q33 -i - -o tmp ;</span><br><span class=\"line\">fastx_trimmer -v -f 1 -l 27 -m 15 -i tmp -Q33 -z -o <span class=\"variable\">$&#123;id%%.*&#125;</span>_clean.fq.gz ;</span><br><span class=\"line\"><span class=\"comment\"># fastqc $&#123;id%%.*&#125;_clean.fq.gz </span></span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>fastq_quality_filter和fastx_trimmer两个命令，都是来自于fastx_toolkit软件包：</p>\n<ul>\n<li>fastq_quality_filter 代表根据质量过滤序列</li>\n<li>fastx_trimmer 代表缩短FASTQ或FASTQ文件中的读数，根据质量修剪（剪切）序列。</li>\n</ul>\n<p>其参数详解如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">#运行一次查看是否可以成功运行</span><br><span class=\"line\">#fastq_quality_filter 代表根据质量过滤序列</span><br><span class=\"line\">#-v,即verbose,报告序列的数目</span><br><span class=\"line\">#-q,即quality,保留碱基所要求的最小质量评分，低于此值将会去除</span><br><span class=\"line\">#-p,即percent,即序列中超过最小质量评分的碱基数目的最小百分率，低于这个比率将删除</span><br><span class=\"line\">#-Q33,即phred33,默认是按照phred64作为参考的</span><br><span class=\"line\">#-i,即infile,代表输入文件，注意不能是压缩文件，可以是FASTA&#x2F;FASTQ都行。默认是STDIN，即标准输入</span><br><span class=\"line\">#-o,即outfile,代表输出文件（注意不是output dir即输出目录，此处输出是一个文件而不是文件夹），默认是STDOUT即标准输出，指定则输出到指定文件</span><br><span class=\"line\">fastq_quality_filter -v -q 20 -p 80 -Q33 -i SRR1542714.1.fastq -o tmp #生成第一步处理的临时文件</span><br><span class=\"line\"></span><br><span class=\"line\"># 中间文件是 tmp ，到时候可以删除掉。</span><br><span class=\"line\"></span><br><span class=\"line\">#fastx_trimmer 代表缩短FASTQ或FASTQ文件中的读数，根据质量修剪（剪切）序列。</span><br><span class=\"line\">#-v,即verbose,报告序列的数目</span><br><span class=\"line\">#-f,即first,代表保留第几个碱基，默认是保留第一个</span><br><span class=\"line\">#-l,即last,代表保留最后的碱基，默认是整个reads</span><br><span class=\"line\">#-i,即infile,代表输入文件，注意不能是压缩文件，可以是FASTA&#x2F;FASTQ都行。默认是STDIN，即标准输入</span><br><span class=\"line\">#-z,即compress,代表的是使用Gzip压缩输出</span><br><span class=\"line\">#-o,即outfile,代表输出文件（注意不是output dir即输出目录，此处输出是一个文件而不是文件夹），默认是STDOUT即标准输出，指定则输出到指定文件</span><br><span class=\"line\">fastx_trimmer -v -f 1 -l 27 -i tmp -Q33 -z -o SRR1542714.1_clean.fq.gz #生成最后的文件</span><br></pre></td></tr></table></figure>\n<p>所以 fastq_quality_filter 和 fastx_trimmer命令是有替代品的，就是需要去自行搜索，如果你是要建立好用的miRNA-seq数据分析环境，就需要自己耗费大量时间在里面哦。</p>\n<p>最后得到的干净的测序数据文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">39M Apr 29 16:28 SRR1542714_clean.fq.gz</span><br><span class=\"line\">37M Apr 29 16:28 SRR1542715_clean.fq.gz</span><br><span class=\"line\">49M Apr 29 16:29 SRR1542716_clean.fq.gz</span><br><span class=\"line\">18M Apr 29 16:29 SRR1542717_clean.fq.gz</span><br><span class=\"line\">68M Apr 29 16:30 SRR1542718_clean.fq.gz</span><br><span class=\"line\">30M Apr 29 16:30 SRR1542719_clean.fq.gz</span><br></pre></td></tr></table></figure>\n<p>前面的步骤，需要自行研究里面的细节哦。</p>\n<h3 id=\"比对-MIRBASE数据库下载的序列-定量\"><a href=\"#比对-MIRBASE数据库下载的序列-定量\" class=\"headerlink\" title=\"比对 MIRBASE数据库下载的序列 +定量\"></a>比对 MIRBASE数据库下载的序列 +定量</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">mature=/home/yb77613/reference/miRNA/hsa-mature-bowtie-index</span><br><span class=\"line\">hairpin=/home/yb77613/reference/miRNA/hsa-hairpin-bowtie-index</span><br><span class=\"line\">ls *_clean.fq.gz |<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> id</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$id</span> </span><br><span class=\"line\">bowtie -n 0 -m1 --best --strata <span class=\"variable\">$mature</span> <span class=\"variable\">$id</span> -S <span class=\"variable\">$&#123;id&#125;</span>_matrue.sam </span><br><span class=\"line\">bowtie -n 0 -m1 --best --strata <span class=\"variable\">$hairpin</span> <span class=\"variable\">$id</span> -S <span class=\"variable\">$&#123;id&#125;</span>_hairpin.sam </span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br><span class=\"line\"></span><br><span class=\"line\">ls *.sam|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> id ;<span class=\"keyword\">do</span> (samtools sort -O bam -@ 5 -o $(basename <span class=\"variable\">$&#123;id&#125;</span> <span class=\"string\">&quot;.sam&quot;</span>).bam <span class=\"variable\">$&#123;id&#125;</span>);<span class=\"keyword\">done</span></span><br><span class=\"line\">rm *.sam</span><br></pre></td></tr></table></figure>\n<p>使用miRNA序列比对的<strong>推荐参数</strong>： -n 0 -m1 —best —strata ，理由参考：</p>\n<p>对其中一个样本的比对的log日志如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SRR1542714_clean.fq.gz</span><br><span class=\"line\"># reads processed: 1520320</span><br><span class=\"line\"># reads with at least one reported alignment: 331645 (21.81%)</span><br><span class=\"line\"># reads that failed to align: 1145386 (75.34%)</span><br><span class=\"line\"># reads with alignments suppressed due to -m: 43289 (2.85%)</span><br><span class=\"line\">Reported 331645 alignments</span><br><span class=\"line\"># reads processed: 1520320</span><br><span class=\"line\"># reads with at least one reported alignment: 331482 (21.80%)</span><br><span class=\"line\"># reads that failed to align: 1008271 (66.32%)</span><br><span class=\"line\"># reads with alignments suppressed due to -m: 180567 (11.88%)</span><br><span class=\"line\">Reported 331482 alignments</span><br></pre></td></tr></table></figure>\n<p>可以看到，比对率还是蛮低的，但是可以调整参数（允许错配碱基）的数量。</p>\n<p>得到的bam文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">29M Apr 29 20:15 SRR1542714_clean.fq.gz_hairpin.bam</span><br><span class=\"line\">28M Apr 29 20:15 SRR1542714_clean.fq.gz_matrue.bam</span><br><span class=\"line\">27M Apr 29 20:15 SRR1542715_clean.fq.gz_hairpin.bam</span><br><span class=\"line\">26M Apr 29 20:15 SRR1542715_clean.fq.gz_matrue.bam</span><br><span class=\"line\">36M Apr 29 20:15 SRR1542716_clean.fq.gz_hairpin.bam</span><br><span class=\"line\">35M Apr 29 20:15 SRR1542716_clean.fq.gz_matrue.bam</span><br><span class=\"line\">13M Apr 29 20:15 SRR1542717_clean.fq.gz_hairpin.bam</span><br><span class=\"line\">13M Apr 29 20:15 SRR1542717_clean.fq.gz_matrue.bam</span><br><span class=\"line\">49M Apr 29 20:15 SRR1542718_clean.fq.gz_hairpin.bam</span><br><span class=\"line\">48M Apr 29 20:15 SRR1542718_clean.fq.gz_matrue.bam</span><br><span class=\"line\">22M Apr 29 20:15 SRR1542719_clean.fq.gz_hairpin.bam</span><br><span class=\"line\">22M Apr 29 20:15 SRR1542719_clean.fq.gz_matrue.bam</span><br></pre></td></tr></table></figure>\n<p>批量走 samtools idxstats 得到表达量矩阵：</p>\n<figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">ls *.bam |xargs -i samtools index &#123;&#125;</span><br><span class=\"line\">ls *.bam|<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> id ;<span class=\"keyword\">do</span> (samtools idxstats <span class=\"variable\">$&#123;id&#125;</span> &gt; <span class=\"variable\">$&#123;id&#125;</span>.txt );<span class=\"keyword\">done</span></span><br><span class=\"line\"><span class=\"comment\"># samtools view matrue.bam |cut -f 3 |sort |uniq -c</span></span><br></pre></td></tr></table></figure>\n<h3 id=\"比对参考基因组-定量\"><a href=\"#比对参考基因组-定量\" class=\"headerlink\" title=\"比对参考基因组+定量\"></a>比对参考基因组+定量</h3><figure class=\"highlight sh\"><table><tr><td class=\"code\"><pre><span class=\"line\">index=/home/yb77613/reference/index/bowtie/hg38 </span><br><span class=\"line\">ls *_clean.fq.gz |<span class=\"keyword\">while</span> <span class=\"built_in\">read</span> id</span><br><span class=\"line\"><span class=\"keyword\">do</span></span><br><span class=\"line\"><span class=\"built_in\">echo</span> <span class=\"variable\">$id</span> </span><br><span class=\"line\">bowtie2 -p 4 -x <span class=\"variable\">$index</span> -U <span class=\"variable\">$id</span> | samtools sort -@ 4 -o <span class=\"variable\">$&#123;id&#125;</span>_genome.bam -</span><br><span class=\"line\"><span class=\"keyword\">done</span></span><br></pre></td></tr></table></figure>\n<p>使用默认参数，对其中一个样本的比对的log日志如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SRR1542715_clean.fq.gz </span><br><span class=\"line\">1520320 reads; of these:</span><br><span class=\"line\"> 1520320 (100.00%) were unpaired; of these:</span><br><span class=\"line\"> 123178 (8.10%) aligned 0 times</span><br><span class=\"line\"> 333700 (21.95%) aligned exactly 1 time</span><br><span class=\"line\"> 1063442 (69.95%) aligned &gt;1 times</span><br><span class=\"line\">91.90% overall alignment rate</span><br></pre></td></tr></table></figure>\n<p>可以看到，这个时候的比对率不得了，得到的bam文件如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">34M Apr 29 20:30 SRR1542714_clean.fq.gz_genome.bam</span><br><span class=\"line\">31M Apr 29 20:30 SRR1542715_clean.fq.gz_genome.bam</span><br><span class=\"line\">42M Apr 29 20:31 SRR1542716_clean.fq.gz_genome.bam</span><br><span class=\"line\">15M Apr 29 20:31 SRR1542717_clean.fq.gz_genome.bam</span><br><span class=\"line\">57M Apr 29 20:32 SRR1542718_clean.fq.gz_genome.bam</span><br><span class=\"line\">25M Apr 29 20:32 SRR1542719_clean.fq.gz_genome.bam</span><br></pre></td></tr></table></figure>\n<p>然后定量，需要使用下面的命令和参数，都是需要看软件文档摸索的。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">gtf&#x3D;&#x2F;home&#x2F;yb77613&#x2F;reference&#x2F;miRNA&#x2F;hsa.gff3</span><br><span class=\"line\">bin_featureCounts&#x3D;&quot;&#x2F;home&#x2F;yb77613&#x2F;biosoft&#x2F;featureCounts&#x2F;subread-1.5.3-Linux-x86_64&#x2F;bin&#x2F;featureCounts&quot;;</span><br><span class=\"line\"></span><br><span class=\"line\">$bin_featureCounts -T 4 -F gff -M -t miRNA -g Name -a $gtf -o all.counts.mature.txt *genome* 1&gt;counts.mature.log 2&gt;&amp;1</span><br><span class=\"line\"></span><br><span class=\"line\">$bin_featureCounts -T 4 -F gff -M -t miRNA_primary_transcript -g Name -a $gtf -o all.counts.hairpin.txt *genome* 1&gt;counts.hairpin.log 2&gt;&amp;1</span><br></pre></td></tr></table></figure>\n<p>这样我们就有不同的定量流程拿到的不同的表达矩阵啦。</p>\n<h3 id=\"比较两个定量方式的表达矩阵差异\"><a href=\"#比较两个定量方式的表达矩阵差异\" class=\"headerlink\" title=\"比较两个定量方式的表达矩阵差异\"></a>比较两个定量方式的表达矩阵差异</h3><p>在featureCounts软件的结果文件 all.counts.id.txt 里面的信息如下：</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">hsa-miR-12136 chr1 632668 632685 - 18 26 21 50 6 78 19</span><br><span class=\"line\">hsa-miR-34a-5p chr1 9151735 9151756 - 22 3009 9494 3467 4136 5299 7097</span><br><span class=\"line\">hsa-miR-34a-3p chr1 9151693 9151714 - 22 88 153 100 86 126 132</span><br></pre></td></tr></table></figure>\n<p>查询其中一个，发现featureCounts软件定量少了80%，比如hsa-miR-12136在featureCounts流程，是 18 26 21 50 6 78 19，但是在miRBase数据库流程，都是五倍以上的表达量。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SRR1542714_clean.fq.gz_matrue.bam.txt:hsa-miR-12136 18 104 0</span><br><span class=\"line\">SRR1542715_clean.fq.gz_matrue.bam.txt:hsa-miR-12136 18 182 0</span><br><span class=\"line\">SRR1542716_clean.fq.gz_matrue.bam.txt:hsa-miR-12136 18 109 0</span><br><span class=\"line\">SRR1542717_clean.fq.gz_matrue.bam.txt:hsa-miR-12136 18 44 0</span><br><span class=\"line\">SRR1542718_clean.fq.gz_matrue.bam.txt:hsa-miR-12136 18 235 0</span><br><span class=\"line\">SRR1542719_clean.fq.gz_matrue.bam.txt:hsa-miR-12136 18 92 0</span><br></pre></td></tr></table></figure>\n<p>查询另外2个，有意思的是其中一个发现featureCounts软件定量多了1倍，另外一个多了2倍。</p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">SRR1542714_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-5p 22 1745 0</span><br><span class=\"line\">SRR1542715_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-5p 22 5825 0</span><br><span class=\"line\">SRR1542716_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-5p 22 2015 0</span><br><span class=\"line\">SRR1542717_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-5p 22 2605 0</span><br><span class=\"line\">SRR1542718_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-5p 22 3081 0</span><br><span class=\"line\">SRR1542719_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-5p 22 4413 0</span><br><span class=\"line\"></span><br><span class=\"line\">SRR1542714_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-3p 22 25 0</span><br><span class=\"line\">SRR1542715_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-3p 22 69 0</span><br><span class=\"line\">SRR1542716_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-3p 22 21 0</span><br><span class=\"line\">SRR1542717_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-3p 22 27 0</span><br><span class=\"line\">SRR1542718_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-3p 22 37 0</span><br><span class=\"line\">SRR1542719_clean.fq.gz_matrue.bam.txt:hsa-miR-34a-3p 22 57 0</span><br></pre></td></tr></table></figure>\n<p>比如，hsa-miR-34a-5p在featureCounts流程，是3009 9494 3467 4136 5299 7097，但是在miRBase数据库流程，都只有一半的表达量。<br>对hsa-miR-34a-3p来说，在featureCounts流程，是88 153 100 86 126 132，但是在miRBase数据库流程，都是两倍的表达量。<br>这样的定量差异，理论上是不会改变该miRNA的差异分析结果，因为是同样的<strong>膨胀系数</strong>。<br>但是，这样的不确定性，让我们的数据分析，蒙上了一层阴影。</p>\n<h1 id=\"文献选择与解读\"><a href=\"#文献选择与解读\" class=\"headerlink\" title=\"文献选择与解读\"></a>文献选择与解读</h1><p>前些天逛bioStar论坛的时候看到了一个问题，是关于miRNA分析，提问者从NCBI的SRA数据下载文献提供的原始数据，然后处理的时候有些不懂，我看到他列出的数据是iron torrent测序仪的，而且我以前还没玩过miRNA-seq的数据分析， 就抽空自学了一下。因为我有RNA-seq的基础，所以理解学习起来比较简单。特记录一下自己的学习过程，希望对后学者有帮助。</p>\n<p>这里选择的文章是2014年发表的，作者用ET-1刺激human iPSCs (hiPSC-CMs) 细胞前后，想看看 miRNA和mRNA表达量的变化，我并没有细看该文章的生物学意义，仅仅从数据分析的角度解读一下这篇文章，mRNA表达量用的是Affymetrix Human Genome U133 Plus 2.0 Array，分析起来特别容易，就是得到表达矩阵，然后用limma这个包找找差异表达基因即可。但是mRNA分析起来就有点麻烦了，作者用的是iron torrent测序仪，但是从SRA数据中心下载的是已经去掉接头的测序数据，fastq格式的，所以这里其实并不需要考虑测序仪的特异性。</p>\n<p>关于该文章的几个资料收集如下：</p>\n<blockquote>\n<p>## paper : <a href=\"http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0108051\">http://journals.plos.org/plosone/article?id=10.1371/journal.pone.0108051</a><br>## Aggarwal P, Turner A, Matter A, Kattman SJ et al. RNA expression profiling of human iPSC-derived cardiomyocytes in a cardiac hypertrophy model. PLoS One 2014;9(9):e108051. PMID: 25255322<br>## The accession numbers are 1. SuperSeries (mRNA+miRNA) - GSE60293<br>## 2. mRNA expression array - GSE60291  (Affymetrix Human Genome U133 Plus 2.0 Array)<br>## 3. miRNA-Seq - GSE60292  (Ion Torrent)<br>## GEO  : <a href=\"http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE60292\">http://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE60292</a><br>## FTP  : <a href=\"ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByStudy/sra/SRP/SRP045/SRP045420\">ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByStudy/sra/SRP/SRP045/SRP045420</a></p>\n</blockquote>\n<p>仔细看看该文章做了哪些分析，然后才能自己模仿，得到同样的数据分析结果。</p>\n<p>该文章处理数据的流程是：<br>Ion Torrent’s Torrent Suite version 3.6 was used for basecalling<br>Raw sequencing reads were aligned using the <strong>SHRiMP2 aligner</strong> and were aligned against the human reference genome <strong>(hg19)</strong> for novel miRNA prediction and then against a custom reference sequence file containing <strong>miRBase v.20 known human miRNA hairpins, tRNA, rRNA,</strong> adapter sequences and predicted novel miRNA sequences.(Genome_build: <strong>hg19, miRBase v.20 human miRNA hairpins</strong>)<br>The <strong>miRDeep2 package (default parameters)</strong> was used to predict novel (as yet undescribed) miRNAs<br>Alignments with less than 17 bp matches and a custom 3′ end phred q-score threshold of 17 were filtered out.<br>miRNA quanitification was done using <strong>HTSeq v0.5.3p3</strong> using the default union parameter.<br>Differential miRNA expression was analyzed using the <strong>DESeq (v.1.12.1) R/Bioconductor package</strong><br>In this study, differentially expressed genes that had a false discovery rate cutoff at 10% (FDR&lt; = 0.1), a log2 fold change greater than 1.5 and less than −1.5 were considered significant.<br>Target gene prediction was performed using the <strong>TargetScan (version 6.2)</strong> database<br>We also used <strong>miRTarBase (version 4.3),</strong> to identify targets that have been experimentally validated<br>## miR-Deep2 and miReap ## predict exact precursor sequence according from mature sequence </p>\n<p>文章提到了fastq数据质量控制标准，数据比对工具，比对的参考基因组（两条比对线路），miRNA表达量的得到，新的miRNA预测，miRNA靶基因预测，这也是我们学习miRNA-seq的数据分析的标准套路， 而且作者给出了所有的分析结果，我们完全可以通过自己的学习来重现他的分析过程。</p>\n<p>Supplementary_files_format_and_content: <strong>tab-delimited text files containing raw read counts for known mature human miRNAs.（表达矩阵）</strong><br>We detected <strong>836 known human mature miRNAs</strong> in the control-CMs and <strong>769 in the ET1-CMs</strong><br>Based on our miRNA-Seq data, we predicted <strong>506 sequences to be potentially novel, as yet undescribed miRNAs.</strong><br>In order to validate the expression profiles of the miRNAs detected, <strong>we performed RT-qPCR on a subset of five known human mature and five of our predicted novel miRNAs.</strong><br>we obtained a total of <strong>1,922 predicted miRNA-mRNA pairs</strong> represented by 309 genes and 174 known mature human miRNAs.  （）</p>\n<p>当然仅仅是套路分析无法发文章的，所以他结合了 miRNA和mRNA 进行网络分析，还做了少量湿实验来验证，最后还扯了一些生物学意义，当然这种纯粹理论分析肯定不好扯什么治病救人的伟大理想。</p>\n<h1 id=\"学习资料的搜集\"><a href=\"#学习资料的搜集\" class=\"headerlink\" title=\"学习资料的搜集\"></a>学习资料的搜集</h1><p>因为我也是完全从零开始入门miRNA-seq分析，所以收集的资料比较齐全，我首先看了部分中文资料，了解了miRNA测序是怎么回事，该分析什么，然后主要围绕着上一篇提到的文献里面的分析步骤来搜索资料。传送门：<a href=\"http://www.bio-info-trainee.com/1693.html\">自学miRNA-seq分析第一讲~文献选择与解</a></p>\n<p>我首先拿到了miRNA定义：<a href=\"http://nar.oxfordjournals.org/content/34/suppl_1/D135.full\">http://nar.oxfordjournals.org/content/34/suppl_1/D135.full </a>，当然基本上每个研究miRNA的文章都会在前言里面写到这个，我只是随意列出一个而已。</p>\n<p>MicroRNAs (miRNAs) are <strong>small RNA molecules</strong>, which are <strong>∼22 nt sequences</strong> that have an important role in the translational regulation and degradation of mRNA by the base’s pairing to the 3′-untranslated regions (3′-UTR) of the mRNAs. The miRNAs are derived from the <strong>precursor transcripts of ∼70–120 nt sequences</strong>, which fold to <strong>form as stem–loop structures</strong>, which are thought to be highly conserved in the evolution of genomes. Previous analyses have suggested that <strong>∼1% of all human genes are miRNA genes,</strong> which regulate the production of protein for 10% or more of all human coding genes。</p>\n<p>然后我比较纠结的问题是参考序列如何选择，因为miRNA序列很少，把它map到3G大小的人类基因组有点浪费计算资源，正好我的服务器又坏了，不想太麻烦，想用自己的个人电脑搞定这个学习过程。我看到很多帖子提到的都是比对到参考miRNA数据库(miRNA count: 28645 entries)，用bowtie ：  <a href=\"http://www.mirbase.org/\">http://www.mirbase.org/</a> ，从这个数据库，我明白了前体miRNA和成熟的miRNA的区别，前体miRNA长度一般是<strong>∼70–120</strong> 碱基，前体miRNA一般是茎环结果，也就是发夹结构，所以叫做hairpin。成熟之后，一般<strong>∼22 个碱基，</strong>在miRNA数据库很容易下载到这些数据，现在的miRNA版本来说，人类这个物种已知的成熟miRNA共有2588条序列，而前体miRNA共有1881条序列，我下载（下载时间2016年6月 ）的代码是：</p>\n<blockquote>\n<p> wget <a href=\"ftp://mirbase.org/pub/mirbase/CURRENT/hairpin.fa.gz\">ftp://mirbase.org/pub/mirbase/CURRENT/hairpin.fa.gz</a>  <strong>##　28645　reads</strong><br> wget <a href=\"ftp://mirbase.org/pub/mirbase/CURRENT/mature.fa.zip\">ftp://mirbase.org/pub/mirbase/CURRENT/mature.fa.zip</a>  <strong>##  35828 reads</strong><br> wget <a href=\"ftp://mirbase.org/pub/mirbase/CURRENT/hairpin.fa.zip\">ftp://mirbase.org/pub/mirbase/CURRENT/hairpin.fa.zip</a><br> wget <a href=\"ftp://mirbase.org/pub/mirbase/CURRENT/genomes/hsa.gff3\">ftp://mirbase.org/pub/mirbase/CURRENT/genomes/hsa.gff3</a> ##<br> wget <a href=\"ftp://mirbase.org/pub/mirbase/CURRENT/miFam.dat.zip\">ftp://mirbase.org/pub/mirbase/CURRENT/miFam.dat.zip</a></p>\n<p> grep sapiens mature.fa |wc  <strong># 2588</strong><br> grep sapiens hairpin.fa |wc    <strong># 1881</strong><br>## Homo sapiens<br>perl -alne ‘{if(/^&gt;/){if(/Homo/){$tmp=1}else{$tmp=0}};next if $tmp!=1;<strong>s/U/T/g</strong> if !/&gt;/;print }’ hairpin.fa &gt;hairpin.human.fa<br>perl -alne ‘{if(/^&gt;/){if(/Homo/){$tmp=1}else{$tmp=0}};next if $tmp!=1;<strong>s/U/T/g</strong> if !/&gt;/;print }’ mature.fa &gt;mature.human.fa<br>这里值得一提的是miRBase数据库下载的序列，居然都是用U表示的，也就是说就是miRNA序列，而不是转录成该miRNA的基因序列，而我们测序的都是基因序列。</p>\n</blockquote>\n<p>通过这个代码制作的 hairpin.human.fa 和 mature.human.fa 就是本次数据分析的参考基因组。<br>搜集资料的过程中，我看到了一篇文献讲挖掘1000genomes的数据找到位于miRNA的snp位点，<a href=\"https://genomemedicine.biomedcentral.com/articles/10.1186/gm363\">https://genomemedicine.biomedcentral.com/articles/10.1186/gm363</a> ，看起来比较新奇，不过跟本次学习过程没有关系，我就是记录一下，有空回来学习学习。<br>同时，我看到了一些博客讲解如何分析miRNA数据：<a href=\"http://genomespot.blogspot.com/2013/08/quick-alignment-of-microrna-seq-data-to.html\">http://genomespot.blogspot.com/2013/08/quick-alignment-of-microrna-seq-data-to.html</a><br>还有很多公司讲数据分析流程：</p>\n<blockquote>\n<p><a href=\"http://bioinfo5.ugr.es/miRanalyzer/miRanalyzer_tutorial.html\">http://bioinfo5.ugr.es/miRanalyzer/miRanalyzer_tutorial.html</a><br><a href=\"http://www.partek.com/sites/default/files/Assets/UserGuideMicroRNAPipeline.pdf\">http://www.partek.com/sites/default/files/Assets/UserGuideMicroRNAPipeline.pdf</a><br><a href=\"http://partek.com/Tutorials/microarray/microRNA/miRNA_tutorial.pdf\">http://partek.com/Tutorials/microarray/microRNA/miRNA_tutorial.pdf</a><br><a href=\"http://www.arraystar.com/reviews/microrna-sequencing-data-analysis-guideline/\">http://www.arraystar.com/reviews/microrna-sequencing-data-analysis-guideline/</a><br><a href=\"http://bioinfo5.ugr.es/sRNAbench/sRNAbench_tutorial.pdf\">http://bioinfo5.ugr.es/sRNAbench/sRNAbench_tutorial.pdf</a><br><a href=\"http://seqcluster.readthedocs.io/mirna_annotation.html\">http://seqcluster.readthedocs.io/mirna_annotation.html</a></p>\n</blockquote>\n<p>耶鲁大学好像做得不错： <a href=\"http://www.yale.edu/giraldezlab/miRNA.html\">http://www.yale.edu/giraldezlab/miRNA.html</a><br>中国有个南方基因： <a href=\"http://www.southgene.com/newsshow.php?cid=55&amp;id=73\">http://www.southgene.com/newsshow.php?cid=55&amp;id=73</a><br>miRNA研究整套方案 <a href=\"http://wenku.baidu.com/view/5f38577a31b765ce05081429.html?re=view\">http://wenku.baidu.com/view/5f38577a31b765ce05081429.html?re=view</a><br>Biostar 讨论帖子：<br><a href=\"https://www.biostars.org/p/3344/\">https://www.biostars.org/p/3344/</a><br><a href=\"https://www.biostars.org/p/98486/\">https://www.biostars.org/p/98486/</a><br>miRNA-seq数据处理实战指南：　<a href=\"http://bib.oxfordjournals.org/content/early/2015/04/17/bib.bbv019.full\">http://bib.oxfordjournals.org/content/early/2015/04/17/bib.bbv019.full</a><br>直接用一个包也可以搞定：　<a href=\"http://bioconductor.org/packages/release/bioc/html/easyRNASeq.html\">http://bioconductor.org/packages/release/bioc/html/easyRNASeq.html</a><br>ｇｉｔｈｕｂ流程：miRNA Analysis Pipeline v0.2.7　　　<a href=\"https://github.com/bcgsc/mirna/tree/master/v0.2.7\">https://github.com/bcgsc/mirna/tree/master/v0.2.7</a><br><a href=\"https://tools.thermofisher.com/content/sfs/manuals/CO25176_0512.pdf\">https://tools.thermofisher.com/content/sfs/manuals/CO25176_0512.pdf</a><br>miRNA annotation　　：　　<a href=\"http://seqcluster.readthedocs.io/mirna_annotation.html\">http://seqcluster.readthedocs.io/mirna_annotation.html</a><br>开发的网页版分析工具：　<a href=\"https://wiki.uio.no/projects/clsi/images/2/2f/HTS_2014_miRNA_analysis_Lifeportal_14_final.pdf\">https://wiki.uio.no/projects/clsi/images/2/2f/HTS_2014_miRNA_analysis_Lifeportal_14_final.pdf</a><br>Ｒ　ｐａｃｋａｇｅ　也很好用：　<a href=\"http://bioinf.wehi.edu.au/subread-package/SubreadUsersGuide.pdf\">http://bioinf.wehi.edu.au/subread-package/SubreadUsersGuide.pdf</a><br>一个培训：　<a href=\"http://www.training.prace-ri.eu/uploads/tx_pracetmo/NGSdataAnalysisWithChipster.pdf\">http://www.training.prace-ri.eu/uploads/tx_pracetmo/NGSdataAnalysisWithChipster.pdf</a><br>可视化IGV User Guide：　　<a href=\"http://www.broadinstitute.org/igv/book/export/html/6\">http://www.broadinstitute.org/igv/book/export/html/6</a><br>比较特殊的是新的miRNA预测，miRNA靶基因预测，这块研究太多软件了，并没有成型的流程和标准。</p>\n<h1 id=\"公共测序数据下载\"><a href=\"#公共测序数据下载\" class=\"headerlink\" title=\"公共测序数据下载\"></a>公共测序数据下载</h1><p>前面已经讲到了该文章的数据已经上传到NCBI的SRA数据中心，所以直接根据索引号下载，然后用SRAtoolkit转出我们想要的fastq测序数据即可。下载的数据一般要进行质量控制，可视化展现一下质量如何，然后根据大题测序质量进行简单过滤。所以需要提前安装一些软件来完成这些任务，包括： sratoolkit /fastx_toolkit /fastqc/bowtie2/hg19/miRBase/SHRiMP</p>\n<p>下面是我用新服务器下载安装软件的一些代码记录，因为fastx_toolkit /fastqc我已经安装过，就不列代码了，还有miRBase的下载，我在前面第二讲里面提到过，传送门：<a href=\"http://www.bio-info-trainee.com/1697.html\">自学miRNA-seq分析第二讲~学习资料的搜集</a></p>\n<blockquote>\n<p>## pre-step: download sratoolkit /fastx_toolkit_0.0.13/fastqc/bowtie2/hg19/miRBase/SHRiMP<br>## <a href=\"http://www.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software\">http://www.ncbi.nlm.nih.gov/Traces/sra/sra.cgi?view=software</a><br>## <a href=\"http://www.ncbi.nlm.nih.gov/books/NBK158900/\">http://www.ncbi.nlm.nih.gov/books/NBK158900/</a><br> ## 我这里特意挑选的二进制版本程序下载的，这样直接解压就可以用，但是需要挑选适合自己的操作系统的程序。<br>cd ~/biosoft<br>mkdir sratoolkit &amp;&amp;  cd sratoolkit<br>wget <a href=\"http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/2.6.3/sratoolkit.2.6.3-centos_linux64.tar.gz\">http://ftp-trace.ncbi.nlm.nih.gov/sra/sdk/2.6.3/sratoolkit.2.6.3-centos_linux64.tar.gz</a><br>##<br>##  Length: 63453761 (61M) [application/x-gzip]<br>##  Saving to: “sratoolkit.2.6.3-centos_linux64.tar.gz”<br>tar zxvf <strong>sratoolkit.2.6.3-centos_linux64.tar.gz</strong><br>cd ~/biosoft<br>mkdir bowtie &amp;&amp;  cd bowtie<br>wget <a href=\"https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.2.9/bowtie2-2.2.9-linux-x86_64.zip/download\">https://sourceforge.net/projects/bowtie-bio/files/bowtie2/2.2.9/bowtie2-2.2.9-linux-x86_64.zip/download</a></p>\n<p>#Length: 27073243 (26M) [application/octet-stream]<br>#Saving to: “download”<br> mv download  bowtie2-2.2.9-linux-x86_64.zip<br> unzip <strong>bowtie2-2.2.9-linux-x86_64.zip</strong><br>## <a href=\"http://compbio.cs.toronto.edu/shrimp/\">http://compbio.cs.toronto.edu/shrimp/</a><br>mkdir SHRiMP &amp;&amp;  cd SHRiMP<br>wget <a href=\"http://compbio.cs.toronto.edu/shrimp/releases/SHRiMP_2_2_3.lx26.x86_64.tar.gz\">http://compbio.cs.toronto.edu/shrimp/releases/SHRiMP_2_2_3.lx26.x86_64.tar.gz</a><br>tar zxvf <strong>SHRiMP_2_2_3.lx26.x86_64.tar.gz</strong><br>cd SHRiMP_2_2_3<br>export SHRIMP_FOLDER=$PWD  ## 这个软件使用的时候比较奇葩，需要设置到环境变量，不能简单的调用全路径</p>\n</blockquote>\n<p>SHRiMP这个软件比较小众，我也是第一次听说过，本来我计划是能用bowtie搞定，就不麻烦了，但是第一次比对出了一个bug，就是下载的miRNA序列里面的U没有转换成T，所以导致比对率非常之低，所以我不得不根据文章里面记录的软件SHRiMP 来做比对，最后发现比对率完全没有改善，搞得我都在怀疑是不是作者乱来了。</p>\n<p>下面是下载数据，质量控制的代码，希望大家可以照着运行一下：</p>\n<blockquote>\n<p>## step1 : download raw data<br>mkdir miRNA<em>test &amp;&amp; cd miRNA_test<br>echo {14..19} |sed ‘s/ /\\n/g’ |while read id; \\<br>do  wget “<a href=\"ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByStudy/sra/SRP/SRP045/SRP045420/SRR15427$id/SRR15427$id.sra\">ftp://ftp-trace.ncbi.nlm.nih.gov/sra/sra-instant/reads/ByStudy/sra/SRP/SRP045/SRP045420/SRR15427$id/SRR15427$id.sra</a>“  ;\\<br>done<br>## step2 :  change sra data to fastq files.<br>## 主要是用shell脚本来批量下载<br>ls <em>sra |while read id; do ~/biosoft/sratoolkit/sratoolkit.2.6.3-centos_linux64/bin/fastq-dump $id;done<br>rm </em>sra<br>##  33M —&gt; 247M<br>#Read 1866654 spots for SRR1542714.sra<br>#Written 1866654 spots for SRR1542714.sra<br>## step3 : download the results from paper<br>## <a href=\"http://www.bio-info-trainee.com/1571.html\">http://www.bio-info-trainee.com/1571.html</a><br>## <a href=\"ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE1nnn/GSE1009/suppl/GSE1009_RAW.tar\">ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE1nnn/GSE1009/suppl/GSE1009_RAW.tar</a><br>mkdir paper_results &amp;&amp; cd paper_results<br>wget <a href=\"ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE60nnn/GSE60292/suppl/GSE60292_RAW.tar\">ftp://ftp.ncbi.nlm.nih.gov/geo/series/GSE60nnn/GSE60292/suppl/GSE60292_RAW.tar</a><br>## tar xvf GSE60292_RAW.tar<br>ls *gz |while read id ; do (echo $id;zcat $id | cut -f 2 |perl -alne ‘{$t+=$</em>;}END{print $t}’);done<br>ls <em>gz |xargs gunzip<br>## step4 : quality assessment<br>ls </em>fastq | while read id ; do ~/biosoft/fastqc/FastQC/fastqc $id;done<br>## Sequence length 8-109<br>## %GC 52<br>## Adapter Content passed<br>## write a script : :: cat &gt;filter.sh<br>ls <em>fastq |while read id<br>do<br>echo $id<br>~/biosoft/fastx_toolkit_0.0.13/bin/fastq_quality_filter <strong>-v -q 20 -p 80 -Q33</strong> -i $id -o tmp ;<br>~/biosoft/fastx_toolkit_0.0.13/bin/fastx_trimmer <strong>-v -f 1 -l 27</strong> <strong>-i tmp  -Q33 -z</strong> -o ${id%%.</em>}_clean.fq.gz ;<br>done<br>rm tmp<br>## <strong>discarded 12%~~49%%</strong><br>ls <em>_clean.fq.gz | while read id ; do ~/biosoft/fastqc/FastQC/fastqc $id;done<br>mkdir QC_results<br>mv </em>zip *html QC_results</p>\n</blockquote>\n<p>这个代码是我自己根据文章的理解写出的，因为我本身不擅长miRNA数据分析，所以在进行QC的时候参数选择可能并不是那么友好，如果有高手能指正就最好了，可以直接打我电话告诉我，或者发邮箱给我，邮箱用户名是jmzeng1314，是163邮箱。</p>\n<p>~/biosoft/fastx_toolkit_0.0.13/bin/fastq_quality_filter <strong>-v -q 20 -p 80 -Q33</strong> -i $id -o tmp ;<br>~/biosoft/fastx_toolkit_0.0.13/bin/fastx_trimmer <strong>-v -f 1 -l 27</strong> <strong>-i tmp  -Q33 -z</strong> -o ${id%%.*}_clean.fq.gz ;<br>最后得到的clean.fq.gz系列文件，就是我需要进行比对的序列啦。</p>\n<h1 id=\"测序数据比对\"><a href=\"#测序数据比对\" class=\"headerlink\" title=\"测序数据比对\"></a>测序数据比对</h1><p>序列比对是大多数类型数据分析的核心，如果要利用好测序数据，比对细节非常重要，我这里只是研读一篇文章也就没有对比对细节过多考虑，只是列出自己的代码和自己的几点思考，力求重现文章作者的分析结果。对miRNA-seq数据有两条比对策略，一种是下载miRBase数据库里面的已知miRNA序列来进行比对，一种直接比对到参考基因组(比如人类的是hg19/hg38)，前面的比对非常简单，而且很容易就可以数出已经的所以miRNA序列的表达量，后面的比对有点耗时，而且算表达量的时候也不是很方便，但是它有个有点是可以来预测新的miRNA，所以大多数文章都会把这两条路给走一下。</p>\n<p>本文选择的是SHRiMP这个小众软件，起初我并没有在意，就用的bowtie2而已，参考基因组我这里因为服务器原因，就用了miRBase数据库下载的人类的参考序列，现在的miRNA版本来说，人类这个物种已知的成熟miRNA共有2588条序列，而前体miRNA共有1881条序列，我下载（下载时间2016年6月 ）的代码见<a href=\"http://www.bio-info-trainee.com/1697.html\"> 自学miRNA-seq分析第二讲~学习资料的搜集</a> ，下面比对所用到的软件已经序列在我的： <a href=\"http://www.bio-info-trainee.com/1703.html\">自学miRNA-seq分析第三讲~公共测序数据下载</a></p>\n<blockquote>\n<p>## step5 : alignment to miRBase v21 (hairpin.human.fa/mature.human.fa )<br>#### step5.1 using bowtie2 to do alignment<br>mkdir  bowtie2_index &amp;&amp;  cd bowtie2_index<br>~/biosoft/bowtie/bowtie2-2.2.9/bowtie2-build ../hairpin.human.fa hairpin_human<br>~/biosoft/bowtie/bowtie2-2.2.9/bowtie2-build ../mature.human.fa  mature_human<br>ls <em>_clean.fq.gz | while read id ; do  ~/biosoft/bowtie/bowtie2-2.2.9/bowtie2 -x miRBase/bowtie2_index/hairpin_human -U $id  -S ${id%%.</em>}.hairpin.sam ; done<br><strong>## overall alignment rate:  10.20% / 5.71%/ 10.18%/ 4.36% / 10.02% / 4.95%  (before convert U to T )</strong><br><strong>## overall alignment rate:  51.77% / 70.38%/51.45% /61.14%/ 52.20% / 65.85% (after convert U to T )</strong><br>ls <em>_clean.fq.gz | while read id ; do  ~/biosoft/bowtie/bowtie2-2.2.9/bowtie2 -x miRBase/bowtie2_index/mature_human  -U $id  -S ${id%%.</em>}.mature.sam ; done<br><strong>## overall alignment rate:  6.67% / 3.78% / 6.70% / 2.80%/ 6.55% / 3.23%   (before convert U to T )</strong><br><strong>## overall alignment rate:  34.94% / 46.16%/ 35.00%/ 38.50% / 35.46% /42.41%(after convert U to T )</strong><br>#### step5.2 using SHRiMP to do alignment<br>##   <a href=\"http://compbio.cs.toronto.edu/shrimp/README\">http://compbio.cs.toronto.edu/shrimp/README</a><br>##   3.5 Mapping cDNA reads against a miRNA database<br>cd ~/biosoft/SHRiMP/SHRiMP_2_2_3<br>export SHRIMP_FOLDER=$PWD<br>cd -<br>##　　We project the database with:<br>$SHRIMP_FOLDER/utils/project-db.py —seed 00111111001111111100,00111111110011111100,00111111111100111100,00111111111111001100,00111111111111110000 \\<br> —h-flag —shrimp-mode ls miRBase/hairpin.human.fa<br>##<br>$SHRIMP_FOLDER/bin/gmapper-ls -L  hairpin.human-ls SRR1542716.fastq  —qv-offset 33  \\<br>-o 1 -H -E -a -1 -q -30 -g -30 —qv-offset 33 —strata -N 8  &gt;map.out 2&gt;map.log</p>\n</blockquote>\n<p>大家可以看到我们把测序reads比对到前体miRNA和成熟的miRNA结果是有略微区别的，因为一个前体miRNA可以形成多个成熟的miRNA，而并不是所有的成熟的miRNA形式都被记录在数据库，所以一般推荐我们比对到前体miRNA数据库，这样还可以预测新的成熟miRNA，也是非常有意义的。</p>\n<p>而且有个非常重要的一点，就是大家可以看到我把U变成T前后比对率差异非常大，这其实是一个非常蠢的错误。我就不多说了。但是做到这一步，其实可以跟文章来做验证了，文章有提到比对率，比对的序列。</p>\n<p>我也是在博客里面看到这个信息的：<br>Thank you so  much!. Yes I contacted the lab-guy and he just said that trimmed the first 4 bp and last 4bp. ( as you found)<br>So  I firstly <strong>trimmed the adapter sequences</strong>(TGGAATTCTCGGGTGCCAAGGAACTCCAGTCAC)<br>And then, <strong>trimmed the first 4bp and last 4bp</strong> from reads, which <strong>leads to the 22bp peak of read-length distribution(instead of 24bp)</strong><br>Anyhow, I tried to map with bowtie2 again.<br><strong>&gt;</strong> <strong>bowtie2 —local -N 1 -L 16</strong><br><strong>-x ../miRNA_reference/hairpin_UtoT.fa</strong><br><strong>-U first4bptrimmed_A1-SmallRNA_S1_L001_R1_001_Illuminaadpatertrim.fastq</strong><br><strong>-S f4_trimmed.sam</strong><br><strong>I also changed hairpin.fa file (U to T)</strong><br>Oh.. thank you David,<br>Finallly, I got<br>2565353 reads; of these:<br>2565353 (100.00%) were unpaired; of these:<br>479292 (18.68%) aligned 0 times<br>11959 (0.47%) aligned exactly 1 time<br>2074102 (80.85%) aligned &gt;1 times<br><strong>81.32% overall alignment rate</strong></p>\n<h1 id=\"miRNA表达量获取\"><a href=\"#miRNA表达量获取\" class=\"headerlink\" title=\"miRNA表达量获取\"></a>miRNA表达量获取</h1><p>拿到比对后的sam/bam文件之后，这只能算是level2的数据，一般我们给他人share我们的结果也是直接给表达矩阵的， miRNA分析跟mRNA分析类似，但是它的表达矩阵更好获取一点。如果是mRNA，我们一般会跟基因组来比较，而基因组就那24条参考染色体，想知道具体比对到了哪个基因，需要根据基因组注释文件来写程序提取表达量信息，现在比较流行的是htseq这个软件，我前面也写过教程如何安装和使用，这里就不啰嗦了。但是对于miRNA，因为我比对的就是那1881条前体miRNA序列，所以直接分析比对的sam/bam文件就可以知道每条参考miRNA序列的表达量了。 </p>\n<blockquote>\n<p>## step6: counts the reads which mapping to each miRNA reference.<br>## we need to exclude unmapped as well as multiple-mapped  reads<br>## XS:i:<n> Alignment score for second-best alignment. Can be negative. Can be greater than 0 in —local mode<br>## NM:i:1  ## NM i Edit distance to the reference, including ambiguous bases but excluding clipping<br>#The following command exclude unmapped (-F 4) as well as multiple-mapped (grep -v “XS:”) reads<br>#samtools view -F 4 input.bam | grep -v “XS:” | wc -l<br>## 180466//1520320<br>##cat &gt;<a href=\"http://count.hairpin.sh/\">count.hairpin.sh</a><br>ls <em>hairpin.sam  | while read id<br>do<br>**samtools view  -SF 4 $id |perl -alne ‘{$h{$F[2]}++}END{print “$<em>\\t$h{$</em>}” foreach sort keys %h }’  &gt; ${id%%_\\</em>}.hairpin.counts<strong><br>done<br>## bash <a href=\"http://count.hairpin.sh/\">count.hairpin.sh</a><br>##cat &gt;<a href=\"http://count.mature.sh/\">count.mature.sh</a><br>ls *mature.sam  | while read id<br>do\n</strong>samtools view  -SF 4 $id |perl -alne ‘{$h{$F[2]}++}END{print “$<em>\\t$h{$</em>}” foreach sort keys %h }’  &gt; ${id%%_*}.mature.counts**<br>done<br>## bash <a href=\"http://count.mature.sh/\">count.mature.sh</a></n></p>\n</blockquote>\n<p>上面的代码，是我自己写的脚本来算表达量，非常简单，因为我没有考虑细节，直接想得到各个样本测序数据的表达量而已。如果是比对到了参考基因组，就要根据miRNA的gff注释文件用htseq等软件来计算表达量啦。<br>得到了表达量，就可以跟文献来做比较啦：</p>\n<blockquote>\n<p>### step7: compare the results with paper’s<br>GSM1470353: control-CM, experiment1; Homo sapiens; miRNA-Seq  SRR1542714<br>GSM1470354: ET1-CM, experiment1; Homo sapiens; miRNA-Seq  SRR1542715<br>GSM1470355: control-CM, experiment2; Homo sapiens; miRNA-SeqSRR1542716<br>GSM1470356: ET1-CM, experiment2; Homo sapiens; miRNA-Seq SRR1542717<br>GSM1470357: control-CM, experiment3; Homo sapiens; miRNA-Seq SRR1542718<br>GSM1470358: ET1-CM, experiment3; Homo sapiens; miRNA-Seq SRR1542719<br>### 下面我用R语言来检验一下，我得到的分析结果跟文章发表的结果的区别。<br> <strong>a=read.table(“bowtie_bam/SRR1542714.mature.counts”)</strong><br> <strong>b=read.table(“paper_results/GSM1470353_iPS_010313_Unstim_known_miRNA_counts.txt”)</strong><br> plot(log(tmp[,2]),log(tmp[,3]))<br> cor(tmp[,2],tmp[,3])<br><strong>##[1] 0.8413439</strong></p>\n</blockquote>\n<h1 id=\"miRNA表达量差异分析\"><a href=\"#miRNA表达量差异分析\" class=\"headerlink\" title=\"miRNA表达量差异分析\"></a>miRNA表达量差异分析</h1><p>这一讲是miRNA-seq数据分析的分水岭，前面的5讲说的是读文献下载数据比对然后计算表达量，属于常规的流程分析，一般在公司测序之后都可以拿到分析结果，或者文献也会给出下载结果。但是单纯的分析一个样本意义不大，一般来说，我们做研究都是针对于不同状态下的miRNA表达量差异分析，然后做注释，功能分析，网络分析，这才是重点，也是难点。我这里就直接拿文献处理好的miRNA表达量来展示如何做下游分析，首先就是差异分析啦：根据文献，我们可以知道样本的分类情况是:</p>\n<blockquote>\n<p>GSM1470353: control-CM, experiment1; Homo sapiens; miRNA-Seq  SRR1542714<br>GSM1470354: ET1-CM, experiment1; Homo sapiens; miRNA-Seq  SRR1542715<br>GSM1470355: control-CM, experiment2; Homo sapiens; miRNA-SeqSRR1542716<br>GSM1470356: ET1-CM, experiment2; Homo sapiens; miRNA-Seq SRR1542717<br>GSM1470357: control-CM, experiment3; Homo sapiens; miRNA-Seq SRR1542718<br>GSM1470358: ET1-CM, experiment3; Homo sapiens; miRNA-Seq SRR1542719<br>可以看到是6个样本的测序数据，分成两组，就是ET1刺激了CM细胞系前后对比而已！</p>\n</blockquote>\n<p>同时，我们也拿到了这6个样本的表达矩阵，计量单位是counts的reads数，所以我们一般会选用DESeq2，edgeR这样的常用包来做差异分析，当然，做差异分析的工具还有十几个，我这里只是拿一根最顺手的举例子，就是DESeq2<br>下面的代码有点长，因为我在bioconductor系列教程里面多次提到了DESeq2使用方法，这里就只贴出代码，反正我要说的重点就是，我们进行了差异分析，然后得到差异miRNA列表</p>\n<blockquote>\n<p>### step8: differential expression analysis by R package for miRNA expression patterns:<br>## 文章里面提到的结果是：<br>MicroRNA sequencing revealed over 250 known and 34 predicted novel miRNAs to be differentially expressed between ET-1 stimulated and unstimulated control hiPSC-CMs.<br>## (FDR &lt; 0.1 and 1.5 fold change)<br>rm(list=ls())<br>setwd(‘J:\\miRNA<em>test\\paper_results’) ##把从GEO里面下载的文献结果放在这里<br>sampleIDs=c()<br>groupList=c()<br>allFiles=list.files(pattern = ‘.txt’)<br>i=allFiles[1]<br>sampleID=strsplit(i,”</em>“)[[1]][1]<br>treat=strsplit(i,”<em>“)[[1]][4]<br>dat=read.table(i,stringsAsFactors = F)<br>colnames(dat)=c(‘miRNA’,sampleID)<br>groupList=c(groupList,treat)<br>for (i in allFiles[-1]){<br>sampleID=strsplit(i,”</em>“)[[1]][1]<br>treat=strsplit(i,”_”)[[1]][4]<br>a=read.table(i,stringsAsFactors = F)<br>colnames(a)=c(‘miRNA’,sampleID)<br>dat=merge(dat,a,by=’miRNA’)<br>groupList=c(groupList,treat)<br>}<br>### 上面的代码只是为了把6个独立的表达文件给合并成一个表达矩阵<br>## we need to filter the low expression level miRNA<br>exprSet=dat[,-1]<br>rownames(exprSet)=dat[,1]<br>suppressMessages(library(DESeq2))<br>exprSet=ceiling(exprSet)<br>(colData &lt;- data.frame(row.names=colnames(exprSet), groupList=groupList))</p>\n<p>## DESeq2就是这么简单的用<br>dds &lt;- DESeqDataSetFromMatrix(countData = exprSet,<br>colData = colData,<br>design = ~ groupList)<br>dds &lt;- DESeq(dds)<br>png(“qc_dispersions.png”, 1000, 1000, pointsize=20)<br>plotDispEsts(dds, main=”Dispersion plot”)<br>dev.off()<br>res &lt;- results(dds)<br>## 画一些图，相当于做QC吧<br>png(“RAWvsNORM.png”)<br>rld &lt;- rlogTransformation(dds)<br>exprSet_new=assay(rld)<br>par(cex = 0.7)<br>n.sample=ncol(exprSet)<br>if(n.sample&gt;40) par(cex = 0.5)<br>cols &lt;- rainbow(n.sample*1.2)<br>par(mfrow=c(2,2))<br>boxplot(exprSet, col = cols,main=”expression value”,las=2)<br>boxplot(exprSet_new, col = cols,main=”expression value”,las=2)<br>hist(exprSet[,1])<br>hist(exprSet_new[,1])<br>dev.off()library(RColorBrewer)<br>(mycols &lt;- brewer.pal(8, “Dark2”)[1:length(unique(groupList))])</p>\n<p># Sample distance heatmap<br>sampleDists &lt;- as.matrix(dist(t(exprSet_new)))<br>#install.packages(“gplots”,repos = “<a href=\"http://cran.us.r-project.org\">http://cran.us.r-project.org</a>“)<br>library(gplots)<br>png(“qc-heatmap-samples.png”, w=1000, h=1000, pointsize=20)<br>heatmap.2(as.matrix(sampleDists), key=F, trace=”none”,<br>col=colorpanel(100, “black”, “white”),<br>ColSideColors=mycols[groupList], RowSideColors=mycols[groupList],<br>margin=c(10, 10), main=”Sample Distance Matrix”)<br>dev.off()</p>\n<p>png(“MA.png”)<br>DESeq2::plotMA(res, main=”DESeq2”, ylim=c(-2,2))<br>dev.off()<br>## 重点就是这里啦，得到了差异分析的结果<br>resOrdered &lt;- res[order(res$padj),]<br>resOrdered=as.data.frame(resOrdered)<br>write.csv(resOrdered,”<strong>deseq2.results.csv</strong>“,quote = F)</p>\n<p>##下面也是一些图，主要是看看样本之间的差异情况<br>library(limma)<br>plotMDS(log(counts(dds, normalized=TRUE) + 1))<br>plotMDS(log(counts(dds, normalized=TRUE) + 1) - log(t( t(assays(dds)[[“mu”]]) / sizeFactors(dds) ) + 1))<br>plotMDS( assays(dds)[[“counts”]] ) ## raw count<br>plotMDS( assays(dds)[[“mu”]] ) ##- fitted values.</p>\n</blockquote>\n<p>最后我们得到的差异分析结果：deseq2.results.csv，就可以跟进FDR和fold change来挑选符合要求的差异miRNA啦</p>\n<h1 id=\"miRNA样本配对mRNA表达量获取\"><a href=\"#miRNA样本配对mRNA表达量获取\" class=\"headerlink\" title=\"miRNA样本配对mRNA表达量获取\"></a>miRNA样本配对mRNA表达量获取</h1><p>这一讲其实算不上是自学miRNA-seq分析，本质就是affymetrix的mRNA表达芯片数据分析，而且还是最常用的那种GPL570   HG-U133_Plus_2，但是因为是跟miRNA样本配对检测的，而且后面会利用到这两个数据分析结果来做共表达网络分析等等，所以就贴出对该芯片数据的分析结果。文章里面也提到了 Messenger RNA expression analysis identified 731 probe sets with significant differential expression，作者挑选的差异分析结果的显著基因列表如下：## <a href=\"http://journals.plos.org/plosone/article/asset?unique&amp;id=info:doi/10.1371/journal.pone.0108051.s002\">http://journals.plos.org/plosone/article/asset?unique&amp;id=info:doi/10.1371/journal.pone.0108051.s002</a><br>## mRNA expression array - GSE60291 (Affymetrix Human Genome U133 Plus 2.0 Array)</p>\n<p>hgu133plus2芯片数据太常见了，可以从GEO里面下载该study的原始测序数据，然后用affy,limma包来分析，也可以直接用GEOquery包来下载作者分析好的表达矩阵，然后直接做差异分析。我这里选择的是后者，而且我跟作者分析方法有一点区别是，我先把探针都注释好了基因，然后对每个基因只挑最大表达量的基因。而作者是直接对探针为单位的的表达矩阵进行差异分析，对分析结果里面的探针进行基因注释。我这里无法给出哪种方法好的绝对评价。代码如下：</p>\n<blockquote>\n<p>rm(list=ls())<br>library(GEOquery)<br>library(limma)<br>GSE60291 &lt;- getGEO(‘GSE60291’, destdir=”.”,getGPL = F)</p>\n<p>#下面是表达矩阵<br><strong>exprSet</strong>=exprs(GSE60291[[1]])<br>library(“annotate”)<br>GSE60291[[1]]<br>## 下面是分组信息<br>pdata=pData(GSE60291[[1]])<br><strong>treatment</strong>=factor(unlist(lapply(pdata$title,function(x) strsplit(as.character(x),”-“)[[1]][1])))<br>#treatment=relevel(treatment,’control’)<br>## 下面做基因注释<br>platformDB=’hgu133plus2.db’<br>library(platformDB, character.only=TRUE)<br>probeset &lt;- featureNames(GSE60291[[1]])<br>#EGID &lt;- as.numeric(lookUp(probeset, platformDB, “ENTREZID”))<br>SYMBOL &lt;- lookUp(probeset, platformDB, “SYMBOL”)<br>## 下面对每个基因挑选最大表达量探针<br>a=cbind(SYMBOL,exprSet)<br>## remove the duplicated probeset<br>rmDupID &lt;-function(a=matrix(c(1,1:5,2,2:6,2,3:7),ncol=6)){<br>exprSet=a[,-1]<br>rowMeans=apply(exprSet,1,function(x) mean(as.numeric(x),na.rm=T))<br>a=a[order(rowMeans,decreasing=T),]<br>exprSet=a[!duplicated(a[,1]),]<br>#<br>exprSet=exprSet[!is.na(exprSet[,1]),]<br>rownames(exprSet)=exprSet[,1]<br>exprSet=exprSet[,-1]<br>return(exprSet)<br>}<br>exprSet=rmDupID(a)<br>rn=rownames(exprSet)<br>exprSet=apply(exprSet,2,as.numeric)<br>rownames(exprSet)=rn<br>exprSet[1:4,1:4]<br>#exprSet=log(exprSet) ## based on e<br>boxplot(exprSet,las=2)<br>## 下面用limma包来进行芯片数据差异分析<br>design=model.matrix(~ treatment)<br>fit=lmFit(exprSet,design)<br>fit=eBayes(fit)<br>#vennDiagram(decideTests(fit))<br>DEG=topTable(fit,coef=2,n=Inf,adjust=’BH’)<br>dim(DEG[abs(DEG[,1])&gt;1.2 &amp; DEG[,5]&lt;0.05,]) ## 806 genes<br>write.csv(DEG,”ET1-normal.DEG.csv”)</p>\n</blockquote>\n<p>得到的ET1-normal.DEG.csv 文件就是我们的差异分析结果，可以跟文章提供的差异结果做比较，是几乎一模一样的！</p>\n<p>如果根据logFC 1.2 p 矫正P 值0.05来挑选，可以拿到806个基因。</p>\n<h1 id=\"miRNA-mRNA表达相关下游分析\"><a href=\"#miRNA-mRNA表达相关下游分析\" class=\"headerlink\" title=\"miRNA-mRNA表达相关下游分析\"></a>miRNA-mRNA表达相关下游分析</h1><p>通过前面的分析，我们已经量化了ET1刺激前后的细胞的miRNA和mRNA表达水平，也通过成熟的统计学分析分别得到了差异miRNA和mRNA，这时候我们就需要换一个参考文献了，因为前面提到的那篇文章分析的不够细致，我这里选择了浙江大学的一篇TCGA数据挖掘分析文章<a href=\"http://www.nature.com/articles/srep12995\">Identifying miRNA/mRNA negative regulation pairs in colorectal cancer</a>，里面首先就是查找miRNA-mRNA基因对，因为miRNA主要还是负向调控mRNA表达，所以根据我们得到的两个表达矩阵做相关性分析，很容易得到符合统计学意义的miRNA-mRNA基因对，具体分析内容如下：</p>\n<blockquote>\n<p>把得到的差异miRNA的表达量画一个热图，看看它是否能显著的分类<br>用miRWalk2.0等数据库或者根据来获取这些差异miRNA的validated target genes<br>然后看看这些<strong>pairs of miRNA- target genes的表达量相关系数</strong>，选取显著正相关或者负相关的pairs<br>这些被选取的pairs of miRNA- target genes拿去做<strong>富集分析</strong><br>最后这些pairs of miRNA- target genes做<strong>PPI网络分析</strong></p>\n</blockquote>\n<p>首先我们看第一个热图的实现：</p>\n<blockquote>\n<p>resOrdered=na.omit(resOrdered)<br>DEmiRNA=resOrdered[abs(resOrdered$log2FoldChange)&gt;log2(1.5) &amp; resOrdered$padj &lt;0.01 ,]<br>write.csv(resOrdered,”deseq2.results.csv”,quote = F)<br>DEmiRNAexprSet=exprSet[rownames(DEmiRNA),]<br>write.csv(DEmiRNAexprSet,’DEmiRNAexprSet.csv’)</p>\n<p>DEmiRNAexprSet=read.csv(‘<strong>DEmiRNAexprSet.csv</strong>‘,stringsAsFactors = F)<br>exprSet=as.matrix(DEmiRNAexprSet[,2:7])<br>rownames(exprSet)=rownames(DEmiRNAexprSet)<br>heatmap(exprSet)<br>gplots::heatmap.2(exprSet)<br>library(pheatmap)<br>## <a href=\"http://biit.cs.ut.ee/clustvis/\">http://biit.cs.ut.ee/clustvis/</a></p>\n</blockquote>\n<p>因为我前面保存的表达量就基于counts的，所以画热图还需要进行normalization，我这里懒得弄了，就用了一个网页版工具，自动出热图<a href=\"http://biit.cs.ut.ee/clustvis/\">http://biit.cs.ut.ee/clustvis/</a></p>\n<p><a href=\"http://www.bio-info-trainee.com/wp-content/uploads/2016/07/miRNA-heatmap.png\"><img src=\"http://www.bio-info-trainee.com/wp-content/uploads/2016/07/miRNA-heatmap.png\" alt=\"miRNA-heatmap\"></a></p>\n<p>感觉还不错，可以很清楚的看到ET1刺激前后细胞中miRNA表达量变化</p>\n<p>然后就是检验我们选取的感兴趣的有显著差异的miRNA的target genes，这时候有两种方法，一个是先由数据库得到已经被检验的miRNA的target genes，另一种是根据miRNA和mRNA表达量的相关性来预测。</p>\n<p>用数据库来查找MiRNA的作用基因，非常多的工具，比较常用的有<strong>TargetScan/miRTarBase</strong><br>### <a href=\"http://nar.oxfordjournals.org/content/early/2015/11/19/nar.gkv1258.full\">http://nar.oxfordjournals.org/content/early/2015/11/19/nar.gkv1258.full</a><br>### <a href=\"http://mirtarbase.mbc.nctu.edu.tw/\">http://mirtarbase.mbc.nctu.edu.tw/</a><br>### <a href=\"http://mirtarbase.mbc.nctu.edu.tw/cache/download/6.1/hsa_MTI.xlsx\">http://mirtarbase.mbc.nctu.edu.tw/cache/download/6.1/hsa_MTI.xlsx</a><br>### <a href=\"http://www.targetscan.org/vert_71/\">http://www.targetscan.org/vert_71/</a> (version 7.1 (June 2016))<br>我还看到过一个整合工具： miRecords (DIANA-microT, MicroInspector, miRanda, MirTarget2, miTarget, NBmiRTar, PicTar, PITA, RNA22, RNAhybrid and TargetScan/TargertScanS)里面提到了查找MiRNA的作用基因这一过程，高假阳性，至少被5种工具支持，才算是真的<br>还有很多类似的工具，miRWalk2，psRNATarget网页版工具，最后值得一提的是中山大学的：<a href=\"http://starbase.sysu.edu.cn/panCancer.php\"> starBase </a>Pan-Cancer Analysis Platform is designed for deciphering Pan-Cancer Networks of lncRNAs, miRNAs, ceRNAs and RNA-binding proteins (RBPs) by mining clinical and expression profiles of 14 cancer types (&gt;6000 samples) from The Cancer Genome Atlas (TCGA) Data Portal (all data available without limitations).虽然我没有仔细的用，但是看介绍好牛的样子，还有一个R包：miRLAB我玩了一会，它是先通过算所有配对的<strong>miRNA- genes的表达量相关系数</strong>，选取显著正相关或者负相关的pairs，然后反过来通过已知数据库来验证。</p>\n<p>后面我就不讲了，主要看你得到miRNA的时候其它生物学数据是否充分，如果是癌症病人，有生存相关数据，可以做生存分析，如果你同时测了甲基化数据，可以做甲基化相关分析<del>~</del>~~~~</p>\n<p>如果只是单纯的miRNA测序数据，可以回过头去研究一下de novo的miRNA预测的步骤，也是研究重点</p>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p><a href=\"http://www.bio-info-trainee.com/tag/mirna-seq\">生信菜鸟团—自学miRNA-seq</a></p>\n<p>参考文章如引起任何侵权问题，可以与我<a href=\"mailto:liaoshuilin@outlook.com\">联系</a>，谢谢。</p>\n","categories":["Pipeline","miRNA-seq"],"tags":["miRNA-seq"]},{"title":"single_cell_RNA_seq_learning1","url":"/2020/12/28/2020-12-28-single_cell_RNA_seq_learning1/","content":"<p>单细胞测序数据分析学习教程（1）<br><a id=\"more\"></a></p>\n<h1 id=\"学习资源\"><a href=\"#学习资源\" class=\"headerlink\" title=\"学习资源\"></a>学习资源</h1><p>学习基于<u>芬兰CSC-IT科学中心</u>、<u>剑桥大学生物信息培训中心</u>以及<u>莱顿大学计算生物学中心(LeidenCBC)</u>的单细胞测序课程。</p>\n<ul>\n<li><p>芬兰CSC-IT科学中心：<br><strong>学习链接</strong>：<a href=\"https://www.csc.fi/web/training/-/scrnaseq\">https://www.csc.fi/web/training/-/scrnaseq</a><br><strong>GitHub</strong>：<a href=\"https://github.com/NBISweden/excelerate-scRNAseq\">https://github.com/NBISweden/excelerate-scRNAseq</a><br><strong>YouTube</strong>：<a href=\"https://www.youtube.com/playlist?list=PLjiXAZO27elC_xnk7gVNM85I2IQl5BEJN\">https://www.youtube.com/playlist?list=PLjiXAZO27elC_xnk7gVNM85I2IQl5BEJN</a><br><strong>中文跟练教程</strong>：【生信start_site】 <a href=\"https://www.jianshu.com/p/c04c4dc99e2b\">https://www.jianshu.com/p/c04c4dc99e2b</a></p>\n</li>\n<li><p>剑桥大学生物信息培训中心<br><strong>学习链接</strong>：<a href=\"https://scrnaseq-course.cog.sanger.ac.uk/website/index.html\">https://scrnaseq-course.cog.sanger.ac.uk/website/index.html</a><br><strong>GitHub</strong>：<a href=\"https://github.com/hemberg-lab/scRNA.seq.course\">https://github.com/hemberg-lab/scRNA.seq.course</a><br><strong>YouTube</strong>：<a href=\"https://www.youtube.com/watch?v=thHgPqQpkE4&amp;feature=emb_err_woyt\">https://www.youtube.com/watch?v=thHgPqQpkE4&amp;feature=emb_err_woyt</a><br><a href=\"https://www.youtube.com/watch?v=7dQ_pleDO2Y&amp;feature=emb_err_woyt\">https://www.youtube.com/watch?v=7dQ_pleDO2Y&amp;feature=emb_err_woyt</a><br><strong>中文跟练教程</strong>：【生信宝典】 <a href=\"https://www.jianshu.com/p/c04c4dc99e2b\">https://www.jianshu.com/p/c04c4dc99e2b</a></p>\n</li>\n<li><p>LeidenCBC<br><strong>GitHub</strong>：<a href=\"https://github.com/LeidenCBC/MGC-BioSB-SingleCellAnalysis2020\">https://github.com/LeidenCBC/MGC-BioSB-SingleCellAnalysis2020</a></p>\n</li>\n</ul>\n<h1 id=\"单细胞测序的介绍\"><a href=\"#单细胞测序的介绍\" class=\"headerlink\" title=\"单细胞测序的介绍\"></a>单细胞测序的介绍</h1>\n<p>​                                            scRNAseq技术的演变（Svensson et al. Nature Prorocols (2018)）</p>\n\n<p>​                        Single-cell RNA sequencing experiment workflow（Molecular Cell, 2015, 58, 615）</p>\n<p>每个scRNA-seq实验都需要经历以下步骤：单个细胞的捕获和溶解 — 将mRNA逆转录成为cDNA — cDNA通过PCR或者体外转录得到扩增  — 文库制备和测序。其中，单个细胞捕获的方法有低通量（ 显微操作、激光捕获显微切割（LCM）、流式细胞荧光分离（FACS））和高通量单细胞分离方法（微液滴和微流控系统等）。</p>\n<p>定量有两种类型—-<u>全长型</u>和<u>标签型</u> (tag-based)。全长型力图捕获并均匀测序整条转录本，标签型只捕获转录本的5’或3’端。不同定量方式需要自己对应的计算分析方法。全长方案理论上可以对整个转录本进行均匀测序，但实际上总会有测序覆盖偏好性的存在。标签型的主要优点是可以与唯一的分子标识符(UMIs)结合进行更精确定量。其缺点是，测序限制在转录本的5’或3’端，可能会降低比对率，并且难以区分不同剪接体的表达。</p>\n<p>捕获的策略决定了实验通量、细胞如何被选择和除测序外的哪些额外信息可获得。最常用的三种捕获方式是基于<strong>微孔- (microwell-)，微流- (microfluidic-)，液滴- (droplet-)</strong>，<strong>组合标签（Plate based）</strong>等。</p>\n<ul>\n<li>Plate based：SMART-seq2, CEL-seq2, STRT-seq</li>\n<li>Droplet based (Lecture from Susan and Miao)</li>\n</ul>\n<p>液滴型方法是将单独的细胞和一个包含建库所学酶的珠粒 (bead)包裹在一个纳米级液滴里面。特殊地，每个珠粒(bead)包含一段独特的条形码序列 (barcode)，会加到所有来自于液滴里面这个细胞的序列上，用于区分不同细胞的转录本。因此所有的液滴可以混合在一起测序，然后再根据barcode序列确定其是否归属于同一细胞。液滴型平台通常有最高的通量，因为文库的准备成本很低，约为0.05美元/每个细胞。随之而来的，测序成本往往是其限制因素，通常测序深度比较低，只检测几千个转录本的表达。</p>\n<p>本文讲着重介绍由10x genomics平台产出的数据进行分析的流程和方法。</p>\n<p>10x genomics平台测序原理：利用微流控技术进行单个细胞分选，将带有条形码和引物的凝胶珠和单个细胞包裹在油滴中；在每个油滴内，凝胶珠溶解，细胞裂解释放mRNA，通过逆转录产生用于测序的带条形码的cDNA；液体油层破坏后，cDNA后续进行文库构建，使用Illumina测序平台对文库进行测序检测，即可一次性获得大量单细胞的基因表达数据，10min内自动完成多至80,000个细胞的捕获，从而达到在单细胞水平进行表达测序的目的。</p>\n\n<p>​                                            10 x Chromium Single Cell Gene Expression Solution技术原理</p>\n<h1 id=\"从reads到matrixSTRT-seq\"><a href=\"#从reads到matrixSTRT-seq\" class=\"headerlink\" title=\"从reads到matrixSTRT-seq\"></a>从reads到matrixSTRT-seq</h1><h2 id=\"数据下载\"><a href=\"#数据下载\" class=\"headerlink\" title=\"数据下载\"></a>数据下载</h2><p>本次要练手的数据来源于文章：<a href=\"https://pubmed.ncbi.nlm.nih.gov/30250229/\">Acquired cancer resistance to combination immunotherapy from transcriptional loss of class I HLA</a>。文章解读见 <a href=\"https://mp.weixin.qq.com/s?__biz=MzI1Njk4ODE0MQ==&amp;mid=2247484132&amp;idx=1&amp;sn=11e787fd663104c12b39cc933dd3c5bf&amp;chksm=ea1f0466dd688d7065ea73121f1ae2424d6daff6104acc3137111d40363be63947edbe4d732b&amp;scene=21#wechat_redirect\">单细胞天地</a>。共有两名患者：</p>\n<ul>\n<li><p>在<a href=\"https://www.ncbi.nlm.nih.gov/geo/\">GSE数据库</a>根据编号（GSE117988、GSE118056）进行搜索，拖到下方，点击<code>SRA Run Selector</code></p>\n<figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">discovery&#x2F;index patient: GSE117988 2586-4 六个样本</span><br><span class=\"line\">validation patient: GSE118056   9245-3 四个样本</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>选中需要的样本（全部）点击 <code>Metadata</code>和<code>Accession List</code></p>\n</li>\n<li><p>下载SRA</p>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">  for i in `cat SRR_Acc_List.txt` ;</span><br><span class=\"line\">  do</span><br><span class=\"line\">    /disk/share/toolkits/enaBrowserTools-1.6/python3/enaDataGet -f sra -a $i -d ./sra</span><br><span class=\"line\">    # -f fastq可直接下载fastq文件，但只有一个，不满足后续cellranger需要三个文件的需求，故下载sra格式，后期用fastq-dump进行转化</span><br><span class=\"line\">    fastq-dump --gzip --split-files -A $i ./sra/$i/$&#123;i&#125;.sra</span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<h2 id=\"解释fastq文件\"><a href=\"#解释fastq文件\" class=\"headerlink\" title=\"解释fastq文件\"></a>解释fastq文件</h2><p> 10X单细胞数据比较特殊，它的测序文库中包括index、barcode、UMI和测序reads</p>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><p><a href=\"https://mp.weixin.qq.com/s?__biz=MzI1Njk4ODE0MQ==&amp;mid=2247484146&amp;idx=1&amp;sn=16e09b82d048eed1ff6100b22970abd5&amp;scene=21#wechat_redirect\">单细胞实战(一)数据下载</a></p>\n<p>参考文章如引起任何侵权问题，可以与我<a href=\"mailto:liaoshuilin@outlook.com\">联系</a>，谢谢。</p>\n","categories":["Omics data","scRNA-seq"],"tags":["scRNA-seq"]},{"title":"生存分析","url":"/2020/12/29/2020-12-29-%E7%94%9F%E5%AD%98%E5%88%86%E6%9E%90/","content":"<p>生存分析学习以及在R中的实现。<br><a id=\"more\"></a></p>\n<h1 id=\"生存分析（survival-analysis）\"><a href=\"#生存分析（survival-analysis）\" class=\"headerlink\" title=\"生存分析（survival analysis）\"></a>生存分析（survival analysis）</h1><p>生存分析是对一个或多个非负随机变量进行统计推断，研究生存现象和响应时间数据及其统计规律的一门学科。它是一种既考虑结果又考虑生存时间的统计方法，并可充分利用截尾数据所提供的不完全信息，对生存时间的分布特征进行描述，对影响生存时间的主要因素进行分析。生存分析不同于其它多因素分析的主要区别点：生存分析考虑了每个观测出现某一结局的时间长短。</p>\n<p><strong>生存分析</strong>可用于许多领域，例如：</p>\n<ul>\n<li>用于患者生存时间分析的癌症研究，如，研究某种药物的疗效，手术后的存活时间，某件机器的使用寿命等。</li>\n<li>社会学研究中的“事件-历史分析”，如，出狱犯人第一次犯罪，失业人员第一次找到工作，</li>\n<li><em>工程学中</em>用于“故障-时间分析”，如，产品的失效。<br>以上内容都可以被转换为“生存资料”；对生存资料的分析称为生存分析。所谓生存资料就是描述寿命或者一个发生时间的数据。更详细的说一个人的生存时间的长短与许多因素有联系的，研究因素与生存时间的联系有无及程度大小，称为生存分析。</li>\n</ul>\n<p>在癌症研究中，典型的研究问题如下：</p>\n<ul>\n<li>某些临床特征对患者生存的影响是什么？</li>\n<li>一个人生存3年的概率是多少？</li>\n<li>两组患者的生存率是否存在差异？</li>\n</ul>\n<h1 id=\"目录\"><a href=\"#目录\" class=\"headerlink\" title=\"目录\"></a>目录</h1><ul>\n<li>几个概念</li>\n<li>研究内容</li>\n<li>Kaplan-Meier图可视化生存曲线</li>\n<li>对数秩检验以比较两组或更多组的生存曲线间是否存在差异。</li>\n<li>用Cox比例风险回归描述变量对生存的影响</li>\n<li>R代码实现</li>\n</ul>\n<h1 id=\"几个概念\"><a href=\"#几个概念\" class=\"headerlink\" title=\"几个概念\"></a>几个概念</h1><p><strong>事件包括起始事件和失效事件。</strong></p>\n<ul>\n<li><strong>起始事件</strong>：反应生存时间起始特征的事件，如疾病确诊、某种疾病治疗开始等。</li>\n<li><strong>失效事件</strong>（Failure Event）：常被简称为事件，研究者规定的终点结局，医学研究中可以是患者死亡，也可以是疾病的发生、某种治疗的反应、疾病的复发等。与之对应的起始事件可以是疾病的确诊、某种治疗的开始等。也称之为死亡事件、终点事件。</li>\n<li><strong>生存时间</strong>（Survival Time）：广义上指某个起点事件开始到某个终点事件发生所经历的时间，度量单位可以是年、月、日、小时等，常用符号t所示。</li>\n</ul>\n<p>根据研究对象的结局，生存时间数据可分为两种类型：</p>\n<ul>\n<li><strong>完全数据</strong>(Completed Data)：从观察起点到发生死亡事件所经历的时间。</li>\n<li><strong>不完全数据</strong>(Incomplete Data)：生存时间观察过程的截止不是由于死亡事件，而是由其他原因引起的。<strong>不完全数据分为</strong>：删失数据(censored Data)，截断数据。常见原因有失访、患者退出试验、事件发生是由于非研究性疾病（如研究病人发生脑卒中后的生存时间，结果病人因为车祸死亡）、研究结束时研究对象仍未发生失效事件。删失数据的生存时间为起始事件到截尾点所经历的时间。常在截尾数据的右上角放一个“+”表示其实该对象可能活的更久。</li>\n<li><strong>变量</strong>：生存分析的变量有两个：生存时间t和结局变量(0-1)。其中结局变量1表示死亡事件，0表示截尾。</li>\n<li><strong>生存曲线</strong>：以生存时间为横轴、生存率为纵轴绘制一条生存曲线。</li>\n<li><strong>中位生存时间</strong>（Median Survival Time）/<strong>平均生存时间</strong>（Mean Survival Time）：中位生存时间又称半数生存期，表示恰好一半个体未发生失效事件的时间，生存曲线上纵轴50%对应的时间。平均生存时间则表示生存曲线下的面积。</li>\n</ul>\n<p>生存和风险函数</p>\n<ul>\n<li><strong>生存函数</strong>，也被称为幸存者函数S(t)，是从时间起源（例如诊断癌症）到指定的未来时间t内仍然处于生存状态，未发生终点事件的概率。</li>\n<li><p>风险函数，h(t)是在时间t内被观察的个体在该时间发生事件的概率。</p>\n<p>请注意，生存函数侧重于没有事件发生，相反，风险函数着重于事件发生。</p>\n</li>\n</ul>\n<p>从分析的因素上看，有单因素分析和多因素分析。正如“连续资料的单因素分析常用t检验、方差分析，对应的多因素分析是多重线性回归”、“分类资料的单因素分析方法卡方分析，对应的多因素分析有logistic回归”一样，生存分析的<strong>常用单因素（或少数因素）</strong>的分析有<strong>Life Tables/寿命表法</strong>、<strong>Kaplan-Meier法</strong>，对应的<strong>多因素模型</strong>则常用<strong>Cox回归模型（Cox风险比例模型）</strong>。从采取的分析方法上看，生存分析有非参数法（如Wilcoxon法、Log-rank法）、参数法（如Weibull回归、lognormal回归等）和半参数分析（Cox回归）。</p>\n<h1 id=\"Kaplan-Meier法\"><a href=\"#Kaplan-Meier法\" class=\"headerlink\" title=\"Kaplan-Meier法\"></a>Kaplan-Meier法</h1><p>Kaplan-Meier（KM）方法是一种非参数方法，用于根据观察到的生存时间估算生存概率（Kaplan和Meier，1958年）。估计的生存概率（S(t)）是针对时间点t的函数，每个时间点t都有自己的对应值。我们也可以计算生存概率的置信区间。</p>\n<p><img src=\"/2020/12/29/2020-12-29-%E7%94%9F%E5%AD%98%E5%88%86%E6%9E%90/Users\\liaos\\AppData\\Roaming\\Typora\\typora-user-images\\image-20201229141302703.png\" alt=\"image-20201229141302703\"></p>\n<ul>\n<li>S(ti-1) = 在ti-1还活着的概率</li>\n<li>ni = 在ti不久之前还活着的患者人数</li>\n<li>di = 在ti时间点发生的事件数</li>\n<li>t0 = 0， S(0) = 1</li>\n</ul>\n<p>Kaplan-Meier法，也称乘积极限法。<a href=\"https://blog.csdn.net/weixin_43087035/article/details/109298584\">【生存分析之Kaplan-Meier曲线都告诉我们什么】</a>说明了KM曲线能告诉我们什么，以及乘积极限法的基本原理。<br>Kaplan-Meier曲线为我们描画了患者生存率随时间变化的特征。各个时间点的生存率值也被称为时点生存率。横轴是时间，纵轴是生存率。生存曲线呈现折线的样子，每一个“台阶”都对应着一个发生终点事件的时间点，每次有终点事件出现的时刻都会计算一次生存率，把他们用折线连接就构成了生存曲线。如何计算？</p>\n<ul>\n<li>在研究的起始处，生存率是100%；</li>\n<li>第一个事件出现：在这个事件发生时，共有12例患者处于观察中，其中一人出现终点事件，死亡1/12=0.0833；生存11/12=0.9167，生存率计算：91.67%；</li>\n<li>第二个点出现：在这个时段，共有11人坚持随访，其中一人发生终点事件,10人生存。故而生存概率为10/11=0.9091。由于这个时刻的生存情况实在上一个时间点的基础上产生的，所以这个时点的累积生存率也要基于上一个时间点生存率计算：0.9167X0.9091=83.33%；</li>\n<li>第三个点出现：第三个结局事件发生之前，已经有一例删失病例出现，所以到这时，仅余9人在随访过程中，其中一人发生终点事件，生存8/9=0.8889。同样的，基于前一时刻的生存率计算本时刻的累计生存率：0.8333X0.8889=74.07%；</li>\n<li>如上往复，我们可以获得完整的生存曲线。</li>\n</ul>\n<h1 id=\"Cox比例风险模型回归\"><a href=\"#Cox比例风险模型回归\" class=\"headerlink\" title=\"Cox比例风险模型回归\"></a>Cox比例风险模型回归</h1><p>Cox回归要求满足比例风险假定(proportional-hazards assumption)的前提条件。所谓比例风险假定，就是假定风险比(HR，Hazard Ratio)不随时间t变化而变化。</p>\n<h1 id=\"R代码实现\"><a href=\"#R代码实现\" class=\"headerlink\" title=\"R代码实现\"></a>R代码实现</h1><ul>\n<li><p>环境搭建</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># install.packages(&quot;survminer&quot;)</span></span><br><span class=\"line\"><span class=\"comment\"># install.packages(&quot;survival&quot;) </span></span><br><span class=\"line\"><span class=\"keyword\">library</span>(survival) </span><br><span class=\"line\"><span class=\"keyword\">library</span>(ggplot2) </span><br><span class=\"line\"><span class=\"keyword\">library</span>(ggpubr) </span><br><span class=\"line\"><span class=\"keyword\">library</span>(survminer) </span><br><span class=\"line\"><span class=\"keyword\">library</span>(dplyr)</span><br></pre></td></tr></table></figure>\n</li>\n<li><p>示例数据集<br>使用survival包中提供的肺癌数据。</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">data(<span class=\"string\">&quot;lung&quot;</span>)</span><br><span class=\"line\">head(lung)</span><br><span class=\"line\">  inst time status age sex ph.ecog ph.karno pat.karno meal.cal wt.loss</span><br><span class=\"line\"><span class=\"number\">1</span>    <span class=\"number\">3</span>  <span class=\"number\">306</span>      <span class=\"number\">2</span>  <span class=\"number\">74</span>   <span class=\"number\">1</span>       <span class=\"number\">1</span>       <span class=\"number\">90</span>       <span class=\"number\">100</span>     <span class=\"number\">1175</span>      <span class=\"literal\">NA</span></span><br><span class=\"line\"><span class=\"number\">2</span>    <span class=\"number\">3</span>  <span class=\"number\">455</span>      <span class=\"number\">2</span>  <span class=\"number\">68</span>   <span class=\"number\">1</span>       <span class=\"number\">0</span>       <span class=\"number\">90</span>        <span class=\"number\">90</span>     <span class=\"number\">1225</span>      <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">3</span>    <span class=\"number\">3</span> <span class=\"number\">1010</span>      <span class=\"number\">1</span>  <span class=\"number\">56</span>   <span class=\"number\">1</span>       <span class=\"number\">0</span>       <span class=\"number\">90</span>        <span class=\"number\">90</span>       <span class=\"literal\">NA</span>      <span class=\"number\">15</span></span><br><span class=\"line\"><span class=\"number\">4</span>    <span class=\"number\">5</span>  <span class=\"number\">210</span>      <span class=\"number\">2</span>  <span class=\"number\">57</span>   <span class=\"number\">1</span>       <span class=\"number\">1</span>       <span class=\"number\">90</span>        <span class=\"number\">60</span>     <span class=\"number\">1150</span>      <span class=\"number\">11</span></span><br><span class=\"line\"><span class=\"number\">5</span>    <span class=\"number\">1</span>  <span class=\"number\">883</span>      <span class=\"number\">2</span>  <span class=\"number\">60</span>   <span class=\"number\">1</span>       <span class=\"number\">0</span>      <span class=\"number\">100</span>        <span class=\"number\">90</span>       <span class=\"literal\">NA</span>       <span class=\"number\">0</span></span><br><span class=\"line\"><span class=\"number\">6</span>   <span class=\"number\">12</span> <span class=\"number\">1022</span>      <span class=\"number\">1</span>  <span class=\"number\">74</span>   <span class=\"number\">1</span>       <span class=\"number\">1</span>       <span class=\"number\">50</span>        <span class=\"number\">80</span>      <span class=\"number\">513</span>       <span class=\"number\">0</span></span><br></pre></td></tr></table></figure>\n<p>inst：机构代码<br>time：以天为单位的生存时间<br>status：删失状态1 = 删失，2 = 出现失效事件<br>age：岁<br>sex：性别，男= 1女= 2<br>ph.ecog：ECOG评分（0 =好，5 =死）<br>ph.karno：医师进行的Karnofsky评分（0 = 差，100 = 好）<br>pat.karno：患者自行进行的Karnofsky评分（0 = 差，100 = 好）<br>meal.cal：用餐时消耗的卡路里<br>wt.loss：最近六个月的体重减轻</p>\n</li>\n</ul>\n<ul>\n<li>计算生存曲线：survfit()<br>目标：按性别计算生存率。<br>函数survfit()[在survival包中]可用于计算kaplan-Meier生存估计。主要论包括：<br>使用Surv()函数创建的生存对象<br>数据集中包含了数据内容。</li>\n</ul>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">fit &lt;- survfit(Surv(time, status) ~ sex, data = lung)</span><br><span class=\"line\">print(fit)</span><br><span class=\"line\">Call: survfit(formula = Surv(time, status) ~ sex, data = lung)</span><br><span class=\"line\">        n events median <span class=\"number\">0.</span>95LCL <span class=\"number\">0.</span>95UCL</span><br><span class=\"line\">sex=<span class=\"number\">1</span> <span class=\"number\">138</span>    <span class=\"number\">112</span>    <span class=\"number\">270</span>     <span class=\"number\">212</span>     <span class=\"number\">310</span></span><br><span class=\"line\">sex=<span class=\"number\">2</span>  <span class=\"number\">90</span>     <span class=\"number\">53</span>    <span class=\"number\">426</span>     <span class=\"number\">348</span>     <span class=\"number\">550</span></span><br></pre></td></tr></table></figure>\n<p>默认情况下，函数print()显示生存曲线的简短统计内容。它输入了观察值，事件数，中位生存率和其置信区间。<br>如果要显示生存曲线的更完整统计内容，请键入以下内容：</p>\n<figure class=\"highlight r\"><table><tr><td class=\"code\"><pre><span class=\"line\">summary(fit)</span><br><span class=\"line\"><span class=\"comment\"># 查看看完整的生存表格</span></span><br><span class=\"line\">summary(fit)$table</span><br></pre></td></tr></table></figure>\n<h1 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h1><ul>\n<li><a href=\"https://blog.csdn.net/weixin_43893431/article/details/111467915?utm_medium=distribute.pc_relevant.none-task-blog-baidujs_baidulandingword-2&amp;spm=1001.2101.3001.4242\">【Bioinfo Blog 011】【R Code 010】——生存分析(Kaplan-Meier &amp; Cox)</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/113676828\">R语言统计与绘图：Kaplan-Meier生存曲线绘制</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/35093424\">生信补给站 — R|生存分析</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/160915839\">第二十五讲 R语言 生存分析基础概念</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/163316406\">第二十六讲 R-生存分析：绘制KM生存曲线</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/163316626\">第二十七讲 R-生存分析：生存函数的假设检验</a></li>\n<li><a href=\"https://zhuanlan.zhihu.com/p/164351709\">第二十八讲 R语言-Cox比例风险模型1</a></li>\n</ul>\n<p>参考文章如引起任何侵权问题，可以与我<a href=\"mailto:liaoshuilin@outlook.com\">联系</a>，谢谢。</p>\n","categories":["R","Undef"],"tags":["R","Survival Analyze"]},{"title":"如何高速下载SRA","url":"/2020/12/28/2020-12-28-%E5%A6%82%E4%BD%95%E9%AB%98%E9%80%9F%E4%B8%8B%E8%BD%BDSRA/","content":"<p>介绍国内如何利用aspera和enaDataGet/enaGroupGet从EMBL－EBI的ENA数据库下载高速下载SRA。<br><a id=\"more\"></a></p>\n<h1 id=\"软件\"><a href=\"#软件\" class=\"headerlink\" title=\"软件\"></a>软件</h1><ul>\n<li>Aspera<br>High-performace transfer brower plugin，IBM旗下的高速下载插件。<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 下载</span></span><br><span class=\"line\">wget wget https://download.asperasoft.com/download/sw/connect/3.9.9/ibm-aspera-connect-3.9.9.177872-linux-g2.12-64.tar.gz </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 解压</span></span><br><span class=\"line\">tar -zxvf ibm-aspera-connect-3.9.9.177872-linux-g2.12-64.tar.gz</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 安装 软件安装路径是用户根目录的 .aspera/</span></span><br><span class=\"line\">./ibm-aspera-connect-3.9.9.177872-linux-g2.12-64.sh</span><br></pre></td></tr></table></figure></li>\n<li><a href=\"https://github.com/enasequence/enaBrowserTools\">enaBrowserTools</a><br>enaDataGet/enaGroupGet是enaBrowserTools的一个python脚本，enaBrowserTools是基于python3的与ENA web services接口的套件，可以方便访问ENA。安装方式简单，直接上github下载源代码，然后解压即可。<br>enaDataGet: all data for <strong>a given</strong> sequence, assembly, read or analysis accession or WGS set.<br>enaGroupGet: all data for <strong>a particular group</strong>(sequence, WGS, assembly, read or analysis) for a given sample or study accession.</li>\n</ul>\n<h1 id=\"配置\"><a href=\"#配置\" class=\"headerlink\" title=\"配置\"></a>配置</h1><ul>\n<li>配置aspera：<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 配置许可(这一步需要账户有root权限，普通用户无法设置，也可以不需要设置)</span></span><br><span class=\"line\">sudo cp ~/.aspera/connect/etc/aspera-license /usr/local/bin/</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 添加环境变量</span></span><br><span class=\"line\">echo &#x27;export PATH=~/.aspera/connect/bin:$PATH&#x27; &gt;&gt; ~/.bashrc</span><br><span class=\"line\">source ~/.bashrc </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\">  配置秘钥</span></span><br><span class=\"line\">mkdir /home/zouhua/.aspera/config/ </span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> 复制到配置目录</span></span><br><span class=\"line\">cp ~/.aspera/connect/etc/asperaweb_id_dsa.openssh /home/zouhua/.aspera/config/</span><br></pre></td></tr></table></figure></li>\n<li>配置enaDataGet<br>如果使用Aspera下载数据，则需要配置aspera_settings.ini文件</li>\n</ul>\n<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> step1 配置aspera_settings.ini</span></span><br><span class=\"line\">cd /disk/share/toolkits/enaBrowserTools-1.6 &amp; vi aspera_settings.ini</span><br></pre></td></tr></table></figure>\n<p>配置前<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[aspera]</span><br><span class=\"line\">ASPERA_BIN &#x3D; &#x2F;path&#x2F;to&#x2F;ascp</span><br><span class=\"line\">ASPERA_PRIVATE_KEY &#x3D; &#x2F;path&#x2F;to&#x2F;aspera_dsa.openssh</span><br><span class=\"line\">ASPERA_OPTIONS &#x3D;</span><br><span class=\"line\">ASPERA_SPEED &#x3D; 100M</span><br></pre></td></tr></table></figure><br>配置后: 1. 指定ascp脚本；2.指定密钥；3.设置下载速度<br><figure class=\"highlight plain\"><table><tr><td class=\"code\"><pre><span class=\"line\">[aspera]</span><br><span class=\"line\">ASPERA_BIN &#x3D; &#x2F;home&#x2F;zouhua&#x2F;.aspera&#x2F;connect&#x2F;bin&#x2F;ascp</span><br><span class=\"line\">ASPERA_PRIVATE_KEY &#x3D; &#x2F;home&#x2F;zouhua&#x2F;.aspera&#x2F;connect&#x2F;etc&#x2F;asperaweb_id_dsa.openssh</span><br><span class=\"line\">ASPERA_OPTIONS &#x3D;</span><br><span class=\"line\">ASPERA_SPEED &#x3D; 100M</span><br></pre></td></tr></table></figure><br><figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> step2 配置aspera</span></span><br><span class=\"line\">export ENA_ASPERA_INIFILE=&quot;enaBrowserTools-1.6/aspera_settings.ini&quot;</span><br></pre></td></tr></table></figure></p>\n<ul>\n<li>enaDataGet：重要参数 1. -f 指定数据类型；2. -d 指定本地下载目录；3. -a 指定是否使用aspera</li>\n</ul>\n<h1 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h1><p>enaDataGet和enaGroupGet可配置aspera使用，参数为<em>-a/—aspera</em>，添加此参数则调用aspera。</p>\n<ul>\n<li>step1 先搜索accession在EBI的api接口；</li>\n<li>step2 本地创建下载日志文件目录 logs；</li>\n<li>step3 使用ascp软件下载accession；<figure class=\"highlight shell\"><table><tr><td class=\"code\"><pre><span class=\"line\">enaBrowserTools-1.6/python3/enaDataGet -f sra -a SRR212430 -d ./sra</span><br><span class=\"line\"><span class=\"meta\">#</span><span class=\"bash\"> enaBrowserTools-1.6/python3/enaDataGet -f sra SRR212430 -d ./sra</span></span><br></pre></td></tr></table></figure>\n</li>\n</ul>\n<p>下载失败: 出现session stop即为失败</p>\n<ul>\n<li>完全下载失败<br><img src=\"https://zouhua.top/images/Tools_SRA_01/Download_failed_SRA.jpg\" alt=\"img\"></li>\n<li>部分下载失败<br><img src=\"https://zouhua.top/images/Tools_SRA_01/Download_failed2_SRA.jpg\" alt=\"img\"><br>不使用aspera下载<br><img src=\"https://zouhua.top/images/Tools_SRA_01/Download_without_aspera.jpg\" alt=\"img\"></li>\n</ul>\n<h2 id=\"引用\"><a href=\"#引用\" class=\"headerlink\" title=\"引用\"></a>引用</h2><p><a href=\"https://zouhua.top/archives/e4e050de.html\">zouhua - 如何在国内高速下载SRA</a></p>\n<p>参考文章如引起任何侵权问题，可以与我<a href=\"mailto:liaoshuilin@outlook.com\">联系</a>，谢谢。</p>\n","categories":["Tools","Download"],"tags":["SRA","Aspera","enaBrowserTools"]}]